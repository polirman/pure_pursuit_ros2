// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "message_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_2eproto;
namespace autonomous_proto {
class Control;
struct ControlDefaultTypeInternal;
extern ControlDefaultTypeInternal _Control_default_instance_;
class ControlLimits;
struct ControlLimitsDefaultTypeInternal;
extern ControlLimitsDefaultTypeInternal _ControlLimits_default_instance_;
class Control_Direction;
struct Control_DirectionDefaultTypeInternal;
extern Control_DirectionDefaultTypeInternal _Control_Direction_default_instance_;
class Control_Mode;
struct Control_ModeDefaultTypeInternal;
extern Control_ModeDefaultTypeInternal _Control_Mode_default_instance_;
class Control_Priority;
struct Control_PriorityDefaultTypeInternal;
extern Control_PriorityDefaultTypeInternal _Control_Priority_default_instance_;
}  // namespace autonomous_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::autonomous_proto::Control* Arena::CreateMaybeMessage<::autonomous_proto::Control>(Arena*);
template<> ::autonomous_proto::ControlLimits* Arena::CreateMaybeMessage<::autonomous_proto::ControlLimits>(Arena*);
template<> ::autonomous_proto::Control_Direction* Arena::CreateMaybeMessage<::autonomous_proto::Control_Direction>(Arena*);
template<> ::autonomous_proto::Control_Mode* Arena::CreateMaybeMessage<::autonomous_proto::Control_Mode>(Arena*);
template<> ::autonomous_proto::Control_Priority* Arena::CreateMaybeMessage<::autonomous_proto::Control_Priority>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autonomous_proto {

enum Control_Mode_Value : int {
  Control_Mode_Value_unknown = 0,
  Control_Mode_Value_autonomous = 1,
  Control_Mode_Value_standby = 2,
  Control_Mode_Value_Control_Mode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Control_Mode_Value_Control_Mode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Control_Mode_Value_IsValid(int value);
constexpr Control_Mode_Value Control_Mode_Value_Value_MIN = Control_Mode_Value_unknown;
constexpr Control_Mode_Value Control_Mode_Value_Value_MAX = Control_Mode_Value_standby;
constexpr int Control_Mode_Value_Value_ARRAYSIZE = Control_Mode_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_Mode_Value_descriptor();
template<typename T>
inline const std::string& Control_Mode_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Control_Mode_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Control_Mode_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Control_Mode_Value_descriptor(), enum_t_value);
}
inline bool Control_Mode_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Control_Mode_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Control_Mode_Value>(
    Control_Mode_Value_descriptor(), name, value);
}
enum Control_Direction_Value : int {
  Control_Direction_Value_unknown = 0,
  Control_Direction_Value_forward = 1,
  Control_Direction_Value_backward = -1,
  Control_Direction_Value_neutral = 1024,
  Control_Direction_Value_Control_Direction_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Control_Direction_Value_Control_Direction_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Control_Direction_Value_IsValid(int value);
constexpr Control_Direction_Value Control_Direction_Value_Value_MIN = Control_Direction_Value_backward;
constexpr Control_Direction_Value Control_Direction_Value_Value_MAX = Control_Direction_Value_neutral;
constexpr int Control_Direction_Value_Value_ARRAYSIZE = Control_Direction_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_Direction_Value_descriptor();
template<typename T>
inline const std::string& Control_Direction_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Control_Direction_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Control_Direction_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Control_Direction_Value_descriptor(), enum_t_value);
}
inline bool Control_Direction_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Control_Direction_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Control_Direction_Value>(
    Control_Direction_Value_descriptor(), name, value);
}
// ===================================================================

class Control_Mode final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:autonomous_proto.Control.Mode) */ {
 public:
  inline Control_Mode() : Control_Mode(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Control_Mode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Control_Mode(const Control_Mode& from);
  Control_Mode(Control_Mode&& from) noexcept
    : Control_Mode() {
    *this = ::std::move(from);
  }

  inline Control_Mode& operator=(const Control_Mode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control_Mode& operator=(Control_Mode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Control_Mode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Control_Mode* internal_default_instance() {
    return reinterpret_cast<const Control_Mode*>(
               &_Control_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Control_Mode& a, Control_Mode& b) {
    a.Swap(&b);
  }
  inline void Swap(Control_Mode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control_Mode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Control_Mode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Control_Mode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Control_Mode& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Control_Mode& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Control.Mode";
  }
  protected:
  explicit Control_Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Control_Mode_Value Value;
  static constexpr Value unknown =
    Control_Mode_Value_unknown;
  static constexpr Value autonomous =
    Control_Mode_Value_autonomous;
  static constexpr Value standby =
    Control_Mode_Value_standby;
  static inline bool Value_IsValid(int value) {
    return Control_Mode_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    Control_Mode_Value_Value_MIN;
  static constexpr Value Value_MAX =
    Control_Mode_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    Control_Mode_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return Control_Mode_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return Control_Mode_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return Control_Mode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:autonomous_proto.Control.Mode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class Control_Direction final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:autonomous_proto.Control.Direction) */ {
 public:
  inline Control_Direction() : Control_Direction(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Control_Direction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Control_Direction(const Control_Direction& from);
  Control_Direction(Control_Direction&& from) noexcept
    : Control_Direction() {
    *this = ::std::move(from);
  }

  inline Control_Direction& operator=(const Control_Direction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control_Direction& operator=(Control_Direction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Control_Direction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Control_Direction* internal_default_instance() {
    return reinterpret_cast<const Control_Direction*>(
               &_Control_Direction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Control_Direction& a, Control_Direction& b) {
    a.Swap(&b);
  }
  inline void Swap(Control_Direction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control_Direction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Control_Direction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Control_Direction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Control_Direction& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Control_Direction& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Control.Direction";
  }
  protected:
  explicit Control_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Control_Direction_Value Value;
  static constexpr Value unknown =
    Control_Direction_Value_unknown;
  static constexpr Value forward =
    Control_Direction_Value_forward;
  static constexpr Value backward =
    Control_Direction_Value_backward;
  static constexpr Value neutral =
    Control_Direction_Value_neutral;
  static inline bool Value_IsValid(int value) {
    return Control_Direction_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    Control_Direction_Value_Value_MIN;
  static constexpr Value Value_MAX =
    Control_Direction_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    Control_Direction_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return Control_Direction_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return Control_Direction_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return Control_Direction_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:autonomous_proto.Control.Direction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class Control_Priority final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Control.Priority) */ {
 public:
  inline Control_Priority() : Control_Priority(nullptr) {}
  ~Control_Priority() override;
  explicit PROTOBUF_CONSTEXPR Control_Priority(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Control_Priority(const Control_Priority& from);
  Control_Priority(Control_Priority&& from) noexcept
    : Control_Priority() {
    *this = ::std::move(from);
  }

  inline Control_Priority& operator=(const Control_Priority& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control_Priority& operator=(Control_Priority&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Control_Priority& default_instance() {
    return *internal_default_instance();
  }
  static inline const Control_Priority* internal_default_instance() {
    return reinterpret_cast<const Control_Priority*>(
               &_Control_Priority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Control_Priority& a, Control_Priority& b) {
    a.Swap(&b);
  }
  inline void Swap(Control_Priority* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control_Priority* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Control_Priority* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Control_Priority>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Control_Priority& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Control_Priority& from) {
    Control_Priority::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Control_Priority* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Control.Priority";
  }
  protected:
  explicit Control_Priority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kKFieldNumber = 3,
    kKvFieldNumber = 4,
    kVFieldNumber = 5,
    kAccFieldNumber = 6,
    kThrottleFieldNumber = 7,
    kBrakeFieldNumber = 8,
  };
  // .google.protobuf.Int32Value mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& mode() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_mode();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_mode();
  void set_allocated_mode(::PROTOBUF_NAMESPACE_ID::Int32Value* mode);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_mode() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* mode);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_mode();

  // .google.protobuf.Int32Value direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& direction() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_direction();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_direction();
  void set_allocated_direction(::PROTOBUF_NAMESPACE_ID::Int32Value* direction);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_direction() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* direction);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_direction();

  // .google.protobuf.Int32Value k = 3;
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& k() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_k();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_k();
  void set_allocated_k(::PROTOBUF_NAMESPACE_ID::Int32Value* k);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_k() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_k();
  public:
  void unsafe_arena_set_allocated_k(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* k);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_k();

  // .google.protobuf.Int32Value kv = 4;
  bool has_kv() const;
  private:
  bool _internal_has_kv() const;
  public:
  void clear_kv();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& kv() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_kv();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_kv();
  void set_allocated_kv(::PROTOBUF_NAMESPACE_ID::Int32Value* kv);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_kv() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_kv();
  public:
  void unsafe_arena_set_allocated_kv(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* kv);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_kv();

  // .google.protobuf.Int32Value v = 5;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& v() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_v();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_v();
  void set_allocated_v(::PROTOBUF_NAMESPACE_ID::Int32Value* v);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_v() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_v();
  public:
  void unsafe_arena_set_allocated_v(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* v);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_v();

  // .google.protobuf.Int32Value acc = 6;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& acc() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_acc();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_acc();
  void set_allocated_acc(::PROTOBUF_NAMESPACE_ID::Int32Value* acc);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_acc() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_acc();
  public:
  void unsafe_arena_set_allocated_acc(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* acc);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_acc();

  // .google.protobuf.Int32Value throttle = 7;
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& throttle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_throttle();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_throttle();
  void set_allocated_throttle(::PROTOBUF_NAMESPACE_ID::Int32Value* throttle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_throttle() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_throttle();
  public:
  void unsafe_arena_set_allocated_throttle(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* throttle);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_throttle();

  // .google.protobuf.Int32Value brake = 8;
  bool has_brake() const;
  private:
  bool _internal_has_brake() const;
  public:
  void clear_brake();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& brake() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_brake();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_brake();
  void set_allocated_brake(::PROTOBUF_NAMESPACE_ID::Int32Value* brake);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_brake() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_brake();
  public:
  void unsafe_arena_set_allocated_brake(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* brake);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_brake();

  // @@protoc_insertion_point(class_scope:autonomous_proto.Control.Priority)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Int32Value* mode_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* direction_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* k_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* kv_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* v_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* acc_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* throttle_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* brake_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class Control final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Control) */ {
 public:
  inline Control() : Control(nullptr) {}
  ~Control() override;
  explicit PROTOBUF_CONSTEXPR Control(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Control(const Control& from);
  Control(Control&& from) noexcept
    : Control() {
    *this = ::std::move(from);
  }

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control& operator=(Control&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Control& default_instance() {
    return *internal_default_instance();
  }
  static inline const Control* internal_default_instance() {
    return reinterpret_cast<const Control*>(
               &_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Control& a, Control& b) {
    a.Swap(&b);
  }
  inline void Swap(Control* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Control>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Control& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Control& from) {
    Control::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Control* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Control";
  }
  protected:
  explicit Control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Control_Mode Mode;
  typedef Control_Direction Direction;
  typedef Control_Priority Priority;

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 3,
    kKFieldNumber = 4,
    kKvFieldNumber = 5,
    kVFieldNumber = 6,
    kAccFieldNumber = 7,
    kThrottleFieldNumber = 8,
    kBrakeFieldNumber = 9,
    kHeaderFieldNumber = 1,
    kPriorityFieldNumber = 10,
    kModeFieldNumber = 2,
  };
  // repeated .autonomous_proto.Control.Direction.Value direction = 3;
  int direction_size() const;
  private:
  int _internal_direction_size() const;
  public:
  void clear_direction();
  private:
  ::autonomous_proto::Control_Direction_Value _internal_direction(int index) const;
  void _internal_add_direction(::autonomous_proto::Control_Direction_Value value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_direction();
  public:
  ::autonomous_proto::Control_Direction_Value direction(int index) const;
  void set_direction(int index, ::autonomous_proto::Control_Direction_Value value);
  void add_direction(::autonomous_proto::Control_Direction_Value value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& direction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_direction();

  // repeated double k = 4;
  int k_size() const;
  private:
  int _internal_k_size() const;
  public:
  void clear_k();
  private:
  double _internal_k(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_k() const;
  void _internal_add_k(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_k();
  public:
  double k(int index) const;
  void set_k(int index, double value);
  void add_k(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      k() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_k();

  // repeated double kv = 5;
  int kv_size() const;
  private:
  int _internal_kv_size() const;
  public:
  void clear_kv();
  private:
  double _internal_kv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_kv() const;
  void _internal_add_kv(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_kv();
  public:
  double kv(int index) const;
  void set_kv(int index, double value);
  void add_kv(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_kv();

  // repeated double v = 6;
  int v_size() const;
  private:
  int _internal_v_size() const;
  public:
  void clear_v();
  private:
  double _internal_v(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_v() const;
  void _internal_add_v(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_v();
  public:
  double v(int index) const;
  void set_v(int index, double value);
  void add_v(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      v() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_v();

  // repeated double acc = 7;
  int acc_size() const;
  private:
  int _internal_acc_size() const;
  public:
  void clear_acc();
  private:
  double _internal_acc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_acc() const;
  void _internal_add_acc(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_acc();
  public:
  double acc(int index) const;
  void set_acc(int index, double value);
  void add_acc(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      acc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_acc();

  // repeated double throttle = 8;
  int throttle_size() const;
  private:
  int _internal_throttle_size() const;
  public:
  void clear_throttle();
  private:
  double _internal_throttle(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_throttle() const;
  void _internal_add_throttle(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_throttle();
  public:
  double throttle(int index) const;
  void set_throttle(int index, double value);
  void add_throttle(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      throttle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_throttle();

  // repeated double brake = 9;
  int brake_size() const;
  private:
  int _internal_brake_size() const;
  public:
  void clear_brake();
  private:
  double _internal_brake(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_brake() const;
  void _internal_add_brake(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_brake();
  public:
  double brake(int index) const;
  void set_brake(int index, double value);
  void add_brake(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      brake() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_brake();

  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .autonomous_proto.Control.Priority priority = 10;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  const ::autonomous_proto::Control_Priority& priority() const;
  PROTOBUF_NODISCARD ::autonomous_proto::Control_Priority* release_priority();
  ::autonomous_proto::Control_Priority* mutable_priority();
  void set_allocated_priority(::autonomous_proto::Control_Priority* priority);
  private:
  const ::autonomous_proto::Control_Priority& _internal_priority() const;
  ::autonomous_proto::Control_Priority* _internal_mutable_priority();
  public:
  void unsafe_arena_set_allocated_priority(
      ::autonomous_proto::Control_Priority* priority);
  ::autonomous_proto::Control_Priority* unsafe_arena_release_priority();

  // .autonomous_proto.Control.Mode.Value mode = 2;
  void clear_mode();
  ::autonomous_proto::Control_Mode_Value mode() const;
  void set_mode(::autonomous_proto::Control_Mode_Value value);
  private:
  ::autonomous_proto::Control_Mode_Value _internal_mode() const;
  void _internal_set_mode(::autonomous_proto::Control_Mode_Value value);
  public:

  // @@protoc_insertion_point(class_scope:autonomous_proto.Control)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> direction_;
    mutable std::atomic<int> _direction_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > k_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > kv_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > v_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > acc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > throttle_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > brake_;
    ::autonomous_proto::MessageInfo* header_;
    ::autonomous_proto::Control_Priority* priority_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlLimits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.ControlLimits) */ {
 public:
  inline ControlLimits() : ControlLimits(nullptr) {}
  ~ControlLimits() override;
  explicit PROTOBUF_CONSTEXPR ControlLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlLimits(const ControlLimits& from);
  ControlLimits(ControlLimits&& from) noexcept
    : ControlLimits() {
    *this = ::std::move(from);
  }

  inline ControlLimits& operator=(const ControlLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlLimits& operator=(ControlLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlLimits* internal_default_instance() {
    return reinterpret_cast<const ControlLimits*>(
               &_ControlLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ControlLimits& a, ControlLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlLimits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlLimits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlLimits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControlLimits& from) {
    ControlLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlLimits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.ControlLimits";
  }
  protected:
  explicit ControlLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kVMaxFieldNumber = 2,
  };
  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .google.protobuf.DoubleValue v_max = 2;
  bool has_v_max() const;
  private:
  bool _internal_has_v_max() const;
  public:
  void clear_v_max();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& v_max() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_v_max();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_v_max();
  void set_allocated_v_max(::PROTOBUF_NAMESPACE_ID::DoubleValue* v_max);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_v_max() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_v_max();
  public:
  void unsafe_arena_set_allocated_v_max(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* v_max);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_v_max();

  // @@protoc_insertion_point(class_scope:autonomous_proto.ControlLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::MessageInfo* header_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* v_max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Control_Mode

// -------------------------------------------------------------------

// Control_Direction

// -------------------------------------------------------------------

// Control_Priority

// .google.protobuf.Int32Value mode = 1;
inline bool Control_Priority::_internal_has_mode() const {
  return this != internal_default_instance() && _impl_.mode_ != nullptr;
}
inline bool Control_Priority::has_mode() const {
  return _internal_has_mode();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::_internal_mode() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::mode() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.Priority.mode)
  return _internal_mode();
}
inline void Control_Priority::unsafe_arena_set_allocated_mode(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  _impl_.mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.Priority.mode)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::release_mode() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.Priority.mode)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::_internal_mutable_mode() {
  
  if (_impl_.mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.mode_ = p;
  }
  return _impl_.mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::mutable_mode() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.Priority.mode)
  return _msg;
}
inline void Control_Priority::set_allocated_mode(::PROTOBUF_NAMESPACE_ID::Int32Value* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode));
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.Priority.mode)
}

// .google.protobuf.Int32Value direction = 2;
inline bool Control_Priority::_internal_has_direction() const {
  return this != internal_default_instance() && _impl_.direction_ != nullptr;
}
inline bool Control_Priority::has_direction() const {
  return _internal_has_direction();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::_internal_direction() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::direction() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.Priority.direction)
  return _internal_direction();
}
inline void Control_Priority::unsafe_arena_set_allocated_direction(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.Priority.direction)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::release_direction() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.Priority.direction)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::_internal_mutable_direction() {
  
  if (_impl_.direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.direction_ = p;
  }
  return _impl_.direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::mutable_direction() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.Priority.direction)
  return _msg;
}
inline void Control_Priority::set_allocated_direction(::PROTOBUF_NAMESPACE_ID::Int32Value* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction));
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.Priority.direction)
}

// .google.protobuf.Int32Value k = 3;
inline bool Control_Priority::_internal_has_k() const {
  return this != internal_default_instance() && _impl_.k_ != nullptr;
}
inline bool Control_Priority::has_k() const {
  return _internal_has_k();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::_internal_k() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.k_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::k() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.Priority.k)
  return _internal_k();
}
inline void Control_Priority::unsafe_arena_set_allocated_k(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* k) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.k_);
  }
  _impl_.k_ = k;
  if (k) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.Priority.k)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::release_k() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.k_;
  _impl_.k_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::unsafe_arena_release_k() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.Priority.k)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.k_;
  _impl_.k_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::_internal_mutable_k() {
  
  if (_impl_.k_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.k_ = p;
  }
  return _impl_.k_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::mutable_k() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_k();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.Priority.k)
  return _msg;
}
inline void Control_Priority::set_allocated_k(::PROTOBUF_NAMESPACE_ID::Int32Value* k) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.k_);
  }
  if (k) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(k));
    if (message_arena != submessage_arena) {
      k = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, k, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.k_ = k;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.Priority.k)
}

// .google.protobuf.Int32Value kv = 4;
inline bool Control_Priority::_internal_has_kv() const {
  return this != internal_default_instance() && _impl_.kv_ != nullptr;
}
inline bool Control_Priority::has_kv() const {
  return _internal_has_kv();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::_internal_kv() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.kv_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::kv() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.Priority.kv)
  return _internal_kv();
}
inline void Control_Priority::unsafe_arena_set_allocated_kv(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* kv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  _impl_.kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.Priority.kv)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::release_kv() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::unsafe_arena_release_kv() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.Priority.kv)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::_internal_mutable_kv() {
  
  if (_impl_.kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.kv_ = p;
  }
  return _impl_.kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::mutable_kv() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_kv();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.Priority.kv)
  return _msg;
}
inline void Control_Priority::set_allocated_kv(::PROTOBUF_NAMESPACE_ID::Int32Value* kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  if (kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kv));
    if (message_arena != submessage_arena) {
      kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kv_ = kv;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.Priority.kv)
}

// .google.protobuf.Int32Value v = 5;
inline bool Control_Priority::_internal_has_v() const {
  return this != internal_default_instance() && _impl_.v_ != nullptr;
}
inline bool Control_Priority::has_v() const {
  return _internal_has_v();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::_internal_v() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.v_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::v() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.Priority.v)
  return _internal_v();
}
inline void Control_Priority::unsafe_arena_set_allocated_v(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_);
  }
  _impl_.v_ = v;
  if (v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.Priority.v)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::release_v() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.v_;
  _impl_.v_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::unsafe_arena_release_v() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.Priority.v)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.v_;
  _impl_.v_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::_internal_mutable_v() {
  
  if (_impl_.v_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.v_ = p;
  }
  return _impl_.v_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::mutable_v() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.Priority.v)
  return _msg;
}
inline void Control_Priority::set_allocated_v(::PROTOBUF_NAMESPACE_ID::Int32Value* v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_);
  }
  if (v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v));
    if (message_arena != submessage_arena) {
      v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.v_ = v;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.Priority.v)
}

// .google.protobuf.Int32Value acc = 6;
inline bool Control_Priority::_internal_has_acc() const {
  return this != internal_default_instance() && _impl_.acc_ != nullptr;
}
inline bool Control_Priority::has_acc() const {
  return _internal_has_acc();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::_internal_acc() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.acc_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::acc() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.Priority.acc)
  return _internal_acc();
}
inline void Control_Priority::unsafe_arena_set_allocated_acc(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* acc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acc_);
  }
  _impl_.acc_ = acc;
  if (acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.Priority.acc)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::release_acc() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.acc_;
  _impl_.acc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::unsafe_arena_release_acc() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.Priority.acc)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.acc_;
  _impl_.acc_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::_internal_mutable_acc() {
  
  if (_impl_.acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.acc_ = p;
  }
  return _impl_.acc_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::mutable_acc() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_acc();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.Priority.acc)
  return _msg;
}
inline void Control_Priority::set_allocated_acc(::PROTOBUF_NAMESPACE_ID::Int32Value* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acc_);
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc));
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.Priority.acc)
}

// .google.protobuf.Int32Value throttle = 7;
inline bool Control_Priority::_internal_has_throttle() const {
  return this != internal_default_instance() && _impl_.throttle_ != nullptr;
}
inline bool Control_Priority::has_throttle() const {
  return _internal_has_throttle();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::_internal_throttle() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.throttle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::throttle() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.Priority.throttle)
  return _internal_throttle();
}
inline void Control_Priority::unsafe_arena_set_allocated_throttle(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* throttle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_);
  }
  _impl_.throttle_ = throttle;
  if (throttle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.Priority.throttle)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::release_throttle() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.throttle_;
  _impl_.throttle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::unsafe_arena_release_throttle() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.Priority.throttle)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.throttle_;
  _impl_.throttle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::_internal_mutable_throttle() {
  
  if (_impl_.throttle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.throttle_ = p;
  }
  return _impl_.throttle_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::mutable_throttle() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_throttle();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.Priority.throttle)
  return _msg;
}
inline void Control_Priority::set_allocated_throttle(::PROTOBUF_NAMESPACE_ID::Int32Value* throttle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_);
  }
  if (throttle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle));
    if (message_arena != submessage_arena) {
      throttle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.throttle_ = throttle;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.Priority.throttle)
}

// .google.protobuf.Int32Value brake = 8;
inline bool Control_Priority::_internal_has_brake() const {
  return this != internal_default_instance() && _impl_.brake_ != nullptr;
}
inline bool Control_Priority::has_brake() const {
  return _internal_has_brake();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::_internal_brake() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.brake_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Control_Priority::brake() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.Priority.brake)
  return _internal_brake();
}
inline void Control_Priority::unsafe_arena_set_allocated_brake(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* brake) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_);
  }
  _impl_.brake_ = brake;
  if (brake) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.Priority.brake)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::release_brake() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.brake_;
  _impl_.brake_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::unsafe_arena_release_brake() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.Priority.brake)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.brake_;
  _impl_.brake_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::_internal_mutable_brake() {
  
  if (_impl_.brake_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.brake_ = p;
  }
  return _impl_.brake_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Control_Priority::mutable_brake() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_brake();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.Priority.brake)
  return _msg;
}
inline void Control_Priority::set_allocated_brake(::PROTOBUF_NAMESPACE_ID::Int32Value* brake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_);
  }
  if (brake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brake));
    if (message_arena != submessage_arena) {
      brake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brake_ = brake;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.Priority.brake)
}

// -------------------------------------------------------------------

// Control

// .autonomous_proto.MessageInfo header = 1;
inline bool Control::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Control::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& Control::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& Control::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.header)
  return _internal_header();
}
inline void Control::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.header)
}
inline ::autonomous_proto::MessageInfo* Control::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* Control::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* Control::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* Control::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.header)
  return _msg;
}
inline void Control::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.header)
}

// .autonomous_proto.Control.Mode.Value mode = 2;
inline void Control::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::autonomous_proto::Control_Mode_Value Control::_internal_mode() const {
  return static_cast< ::autonomous_proto::Control_Mode_Value >(_impl_.mode_);
}
inline ::autonomous_proto::Control_Mode_Value Control::mode() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.mode)
  return _internal_mode();
}
inline void Control::_internal_set_mode(::autonomous_proto::Control_Mode_Value value) {
  
  _impl_.mode_ = value;
}
inline void Control::set_mode(::autonomous_proto::Control_Mode_Value value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.Control.mode)
}

// repeated .autonomous_proto.Control.Direction.Value direction = 3;
inline int Control::_internal_direction_size() const {
  return _impl_.direction_.size();
}
inline int Control::direction_size() const {
  return _internal_direction_size();
}
inline void Control::clear_direction() {
  _impl_.direction_.Clear();
}
inline ::autonomous_proto::Control_Direction_Value Control::_internal_direction(int index) const {
  return static_cast< ::autonomous_proto::Control_Direction_Value >(_impl_.direction_.Get(index));
}
inline ::autonomous_proto::Control_Direction_Value Control::direction(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.direction)
  return _internal_direction(index);
}
inline void Control::set_direction(int index, ::autonomous_proto::Control_Direction_Value value) {
  _impl_.direction_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.Control.direction)
}
inline void Control::_internal_add_direction(::autonomous_proto::Control_Direction_Value value) {
  _impl_.direction_.Add(value);
}
inline void Control::add_direction(::autonomous_proto::Control_Direction_Value value) {
  _internal_add_direction(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.Control.direction)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Control::direction() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.Control.direction)
  return _impl_.direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Control::_internal_mutable_direction() {
  return &_impl_.direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Control::mutable_direction() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.Control.direction)
  return _internal_mutable_direction();
}

// repeated double k = 4;
inline int Control::_internal_k_size() const {
  return _impl_.k_.size();
}
inline int Control::k_size() const {
  return _internal_k_size();
}
inline void Control::clear_k() {
  _impl_.k_.Clear();
}
inline double Control::_internal_k(int index) const {
  return _impl_.k_.Get(index);
}
inline double Control::k(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.k)
  return _internal_k(index);
}
inline void Control::set_k(int index, double value) {
  _impl_.k_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.Control.k)
}
inline void Control::_internal_add_k(double value) {
  _impl_.k_.Add(value);
}
inline void Control::add_k(double value) {
  _internal_add_k(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.Control.k)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::_internal_k() const {
  return _impl_.k_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::k() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.Control.k)
  return _internal_k();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::_internal_mutable_k() {
  return &_impl_.k_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.Control.k)
  return _internal_mutable_k();
}

// repeated double kv = 5;
inline int Control::_internal_kv_size() const {
  return _impl_.kv_.size();
}
inline int Control::kv_size() const {
  return _internal_kv_size();
}
inline void Control::clear_kv() {
  _impl_.kv_.Clear();
}
inline double Control::_internal_kv(int index) const {
  return _impl_.kv_.Get(index);
}
inline double Control::kv(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.kv)
  return _internal_kv(index);
}
inline void Control::set_kv(int index, double value) {
  _impl_.kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.Control.kv)
}
inline void Control::_internal_add_kv(double value) {
  _impl_.kv_.Add(value);
}
inline void Control::add_kv(double value) {
  _internal_add_kv(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.Control.kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::_internal_kv() const {
  return _impl_.kv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::kv() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.Control.kv)
  return _internal_kv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::_internal_mutable_kv() {
  return &_impl_.kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.Control.kv)
  return _internal_mutable_kv();
}

// repeated double v = 6;
inline int Control::_internal_v_size() const {
  return _impl_.v_.size();
}
inline int Control::v_size() const {
  return _internal_v_size();
}
inline void Control::clear_v() {
  _impl_.v_.Clear();
}
inline double Control::_internal_v(int index) const {
  return _impl_.v_.Get(index);
}
inline double Control::v(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.v)
  return _internal_v(index);
}
inline void Control::set_v(int index, double value) {
  _impl_.v_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.Control.v)
}
inline void Control::_internal_add_v(double value) {
  _impl_.v_.Add(value);
}
inline void Control::add_v(double value) {
  _internal_add_v(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.Control.v)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::_internal_v() const {
  return _impl_.v_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::v() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.Control.v)
  return _internal_v();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::_internal_mutable_v() {
  return &_impl_.v_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.Control.v)
  return _internal_mutable_v();
}

// repeated double acc = 7;
inline int Control::_internal_acc_size() const {
  return _impl_.acc_.size();
}
inline int Control::acc_size() const {
  return _internal_acc_size();
}
inline void Control::clear_acc() {
  _impl_.acc_.Clear();
}
inline double Control::_internal_acc(int index) const {
  return _impl_.acc_.Get(index);
}
inline double Control::acc(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.acc)
  return _internal_acc(index);
}
inline void Control::set_acc(int index, double value) {
  _impl_.acc_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.Control.acc)
}
inline void Control::_internal_add_acc(double value) {
  _impl_.acc_.Add(value);
}
inline void Control::add_acc(double value) {
  _internal_add_acc(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.Control.acc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::_internal_acc() const {
  return _impl_.acc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::acc() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.Control.acc)
  return _internal_acc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::_internal_mutable_acc() {
  return &_impl_.acc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::mutable_acc() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.Control.acc)
  return _internal_mutable_acc();
}

// repeated double throttle = 8;
inline int Control::_internal_throttle_size() const {
  return _impl_.throttle_.size();
}
inline int Control::throttle_size() const {
  return _internal_throttle_size();
}
inline void Control::clear_throttle() {
  _impl_.throttle_.Clear();
}
inline double Control::_internal_throttle(int index) const {
  return _impl_.throttle_.Get(index);
}
inline double Control::throttle(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.throttle)
  return _internal_throttle(index);
}
inline void Control::set_throttle(int index, double value) {
  _impl_.throttle_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.Control.throttle)
}
inline void Control::_internal_add_throttle(double value) {
  _impl_.throttle_.Add(value);
}
inline void Control::add_throttle(double value) {
  _internal_add_throttle(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.Control.throttle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::_internal_throttle() const {
  return _impl_.throttle_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::throttle() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.Control.throttle)
  return _internal_throttle();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::_internal_mutable_throttle() {
  return &_impl_.throttle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::mutable_throttle() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.Control.throttle)
  return _internal_mutable_throttle();
}

// repeated double brake = 9;
inline int Control::_internal_brake_size() const {
  return _impl_.brake_.size();
}
inline int Control::brake_size() const {
  return _internal_brake_size();
}
inline void Control::clear_brake() {
  _impl_.brake_.Clear();
}
inline double Control::_internal_brake(int index) const {
  return _impl_.brake_.Get(index);
}
inline double Control::brake(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.brake)
  return _internal_brake(index);
}
inline void Control::set_brake(int index, double value) {
  _impl_.brake_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.Control.brake)
}
inline void Control::_internal_add_brake(double value) {
  _impl_.brake_.Add(value);
}
inline void Control::add_brake(double value) {
  _internal_add_brake(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.Control.brake)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::_internal_brake() const {
  return _impl_.brake_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Control::brake() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.Control.brake)
  return _internal_brake();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::_internal_mutable_brake() {
  return &_impl_.brake_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Control::mutable_brake() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.Control.brake)
  return _internal_mutable_brake();
}

// .autonomous_proto.Control.Priority priority = 10;
inline bool Control::_internal_has_priority() const {
  return this != internal_default_instance() && _impl_.priority_ != nullptr;
}
inline bool Control::has_priority() const {
  return _internal_has_priority();
}
inline void Control::clear_priority() {
  if (GetArenaForAllocation() == nullptr && _impl_.priority_ != nullptr) {
    delete _impl_.priority_;
  }
  _impl_.priority_ = nullptr;
}
inline const ::autonomous_proto::Control_Priority& Control::_internal_priority() const {
  const ::autonomous_proto::Control_Priority* p = _impl_.priority_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::Control_Priority&>(
      ::autonomous_proto::_Control_Priority_default_instance_);
}
inline const ::autonomous_proto::Control_Priority& Control::priority() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Control.priority)
  return _internal_priority();
}
inline void Control::unsafe_arena_set_allocated_priority(
    ::autonomous_proto::Control_Priority* priority) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.priority_);
  }
  _impl_.priority_ = priority;
  if (priority) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Control.priority)
}
inline ::autonomous_proto::Control_Priority* Control::release_priority() {
  
  ::autonomous_proto::Control_Priority* temp = _impl_.priority_;
  _impl_.priority_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::Control_Priority* Control::unsafe_arena_release_priority() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Control.priority)
  
  ::autonomous_proto::Control_Priority* temp = _impl_.priority_;
  _impl_.priority_ = nullptr;
  return temp;
}
inline ::autonomous_proto::Control_Priority* Control::_internal_mutable_priority() {
  
  if (_impl_.priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::Control_Priority>(GetArenaForAllocation());
    _impl_.priority_ = p;
  }
  return _impl_.priority_;
}
inline ::autonomous_proto::Control_Priority* Control::mutable_priority() {
  ::autonomous_proto::Control_Priority* _msg = _internal_mutable_priority();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Control.priority)
  return _msg;
}
inline void Control::set_allocated_priority(::autonomous_proto::Control_Priority* priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.priority_;
  }
  if (priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(priority);
    if (message_arena != submessage_arena) {
      priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Control.priority)
}

// -------------------------------------------------------------------

// ControlLimits

// .autonomous_proto.MessageInfo header = 1;
inline bool ControlLimits::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ControlLimits::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& ControlLimits::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& ControlLimits::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.ControlLimits.header)
  return _internal_header();
}
inline void ControlLimits::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.ControlLimits.header)
}
inline ::autonomous_proto::MessageInfo* ControlLimits::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* ControlLimits::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.ControlLimits.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* ControlLimits::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* ControlLimits::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.ControlLimits.header)
  return _msg;
}
inline void ControlLimits::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.ControlLimits.header)
}

// .google.protobuf.DoubleValue v_max = 2;
inline bool ControlLimits::_internal_has_v_max() const {
  return this != internal_default_instance() && _impl_.v_max_ != nullptr;
}
inline bool ControlLimits::has_v_max() const {
  return _internal_has_v_max();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ControlLimits::_internal_v_max() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.v_max_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ControlLimits::v_max() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.ControlLimits.v_max)
  return _internal_v_max();
}
inline void ControlLimits::unsafe_arena_set_allocated_v_max(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* v_max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_max_);
  }
  _impl_.v_max_ = v_max;
  if (v_max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.ControlLimits.v_max)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ControlLimits::release_v_max() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.v_max_;
  _impl_.v_max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ControlLimits::unsafe_arena_release_v_max() {
  // @@protoc_insertion_point(field_release:autonomous_proto.ControlLimits.v_max)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.v_max_;
  _impl_.v_max_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ControlLimits::_internal_mutable_v_max() {
  
  if (_impl_.v_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.v_max_ = p;
  }
  return _impl_.v_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ControlLimits::mutable_v_max() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_v_max();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.ControlLimits.v_max)
  return _msg;
}
inline void ControlLimits::set_allocated_v_max(::PROTOBUF_NAMESPACE_ID::DoubleValue* v_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_max_);
  }
  if (v_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v_max));
    if (message_arena != submessage_arena) {
      v_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v_max, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.v_max_ = v_max;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.ControlLimits.v_max)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autonomous_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autonomous_proto::Control_Mode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autonomous_proto::Control_Mode_Value>() {
  return ::autonomous_proto::Control_Mode_Value_descriptor();
}
template <> struct is_proto_enum< ::autonomous_proto::Control_Direction_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autonomous_proto::Control_Direction_Value>() {
  return ::autonomous_proto::Control_Direction_Value_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_2eproto
