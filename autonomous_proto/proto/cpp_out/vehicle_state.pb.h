// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "message_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fstate_2eproto;
namespace autonomous_proto {
class VehicleState;
struct VehicleStateDefaultTypeInternal;
extern VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
class VehicleState_Battery;
struct VehicleState_BatteryDefaultTypeInternal;
extern VehicleState_BatteryDefaultTypeInternal _VehicleState_Battery_default_instance_;
class VehicleState_DriverOperation;
struct VehicleState_DriverOperationDefaultTypeInternal;
extern VehicleState_DriverOperationDefaultTypeInternal _VehicleState_DriverOperation_default_instance_;
class VehicleState_Engine;
struct VehicleState_EngineDefaultTypeInternal;
extern VehicleState_EngineDefaultTypeInternal _VehicleState_Engine_default_instance_;
class VehicleState_Gear;
struct VehicleState_GearDefaultTypeInternal;
extern VehicleState_GearDefaultTypeInternal _VehicleState_Gear_default_instance_;
class VehicleState_Mode;
struct VehicleState_ModeDefaultTypeInternal;
extern VehicleState_ModeDefaultTypeInternal _VehicleState_Mode_default_instance_;
}  // namespace autonomous_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::autonomous_proto::VehicleState* Arena::CreateMaybeMessage<::autonomous_proto::VehicleState>(Arena*);
template<> ::autonomous_proto::VehicleState_Battery* Arena::CreateMaybeMessage<::autonomous_proto::VehicleState_Battery>(Arena*);
template<> ::autonomous_proto::VehicleState_DriverOperation* Arena::CreateMaybeMessage<::autonomous_proto::VehicleState_DriverOperation>(Arena*);
template<> ::autonomous_proto::VehicleState_Engine* Arena::CreateMaybeMessage<::autonomous_proto::VehicleState_Engine>(Arena*);
template<> ::autonomous_proto::VehicleState_Gear* Arena::CreateMaybeMessage<::autonomous_proto::VehicleState_Gear>(Arena*);
template<> ::autonomous_proto::VehicleState_Mode* Arena::CreateMaybeMessage<::autonomous_proto::VehicleState_Mode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autonomous_proto {

enum VehicleState_Mode_Enum : int {
  VehicleState_Mode_Enum_unknown = 0,
  VehicleState_Mode_Enum_autonomous = 1,
  VehicleState_Mode_Enum_manual_driving = 2,
  VehicleState_Mode_Enum_remote_controller = 3,
  VehicleState_Mode_Enum_undefined = -1,
  VehicleState_Mode_Enum_VehicleState_Mode_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleState_Mode_Enum_VehicleState_Mode_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleState_Mode_Enum_IsValid(int value);
constexpr VehicleState_Mode_Enum VehicleState_Mode_Enum_Enum_MIN = VehicleState_Mode_Enum_undefined;
constexpr VehicleState_Mode_Enum VehicleState_Mode_Enum_Enum_MAX = VehicleState_Mode_Enum_remote_controller;
constexpr int VehicleState_Mode_Enum_Enum_ARRAYSIZE = VehicleState_Mode_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleState_Mode_Enum_descriptor();
template<typename T>
inline const std::string& VehicleState_Mode_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleState_Mode_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleState_Mode_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleState_Mode_Enum_descriptor(), enum_t_value);
}
inline bool VehicleState_Mode_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleState_Mode_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleState_Mode_Enum>(
    VehicleState_Mode_Enum_descriptor(), name, value);
}
enum VehicleState_Gear_Mode : int {
  VehicleState_Gear_Mode_unknown = 0,
  VehicleState_Gear_Mode_N = 1,
  VehicleState_Gear_Mode_D = 2,
  VehicleState_Gear_Mode_R = 3,
  VehicleState_Gear_Mode_P = 4,
  VehicleState_Gear_Mode_spin = 5,
  VehicleState_Gear_Mode_r_spin = 6,
  VehicleState_Gear_Mode_halt = 1024,
  VehicleState_Gear_Mode_undefined = -1,
  VehicleState_Gear_Mode_VehicleState_Gear_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleState_Gear_Mode_VehicleState_Gear_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleState_Gear_Mode_IsValid(int value);
constexpr VehicleState_Gear_Mode VehicleState_Gear_Mode_Mode_MIN = VehicleState_Gear_Mode_undefined;
constexpr VehicleState_Gear_Mode VehicleState_Gear_Mode_Mode_MAX = VehicleState_Gear_Mode_halt;
constexpr int VehicleState_Gear_Mode_Mode_ARRAYSIZE = VehicleState_Gear_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleState_Gear_Mode_descriptor();
template<typename T>
inline const std::string& VehicleState_Gear_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleState_Gear_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleState_Gear_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleState_Gear_Mode_descriptor(), enum_t_value);
}
inline bool VehicleState_Gear_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleState_Gear_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleState_Gear_Mode>(
    VehicleState_Gear_Mode_descriptor(), name, value);
}
// ===================================================================

class VehicleState_Mode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.VehicleState.Mode) */ {
 public:
  inline VehicleState_Mode() : VehicleState_Mode(nullptr) {}
  ~VehicleState_Mode() override;
  explicit PROTOBUF_CONSTEXPR VehicleState_Mode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleState_Mode(const VehicleState_Mode& from);
  VehicleState_Mode(VehicleState_Mode&& from) noexcept
    : VehicleState_Mode() {
    *this = ::std::move(from);
  }

  inline VehicleState_Mode& operator=(const VehicleState_Mode& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState_Mode& operator=(VehicleState_Mode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState_Mode& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState_Mode* internal_default_instance() {
    return reinterpret_cast<const VehicleState_Mode*>(
               &_VehicleState_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleState_Mode& a, VehicleState_Mode& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState_Mode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState_Mode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState_Mode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleState_Mode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleState_Mode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleState_Mode& from) {
    VehicleState_Mode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState_Mode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.VehicleState.Mode";
  }
  protected:
  explicit VehicleState_Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleState_Mode_Enum Enum;
  static constexpr Enum unknown =
    VehicleState_Mode_Enum_unknown;
  static constexpr Enum autonomous =
    VehicleState_Mode_Enum_autonomous;
  static constexpr Enum manual_driving =
    VehicleState_Mode_Enum_manual_driving;
  static constexpr Enum remote_controller =
    VehicleState_Mode_Enum_remote_controller;
  static constexpr Enum undefined =
    VehicleState_Mode_Enum_undefined;
  static inline bool Enum_IsValid(int value) {
    return VehicleState_Mode_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    VehicleState_Mode_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    VehicleState_Mode_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    VehicleState_Mode_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return VehicleState_Mode_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return VehicleState_Mode_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return VehicleState_Mode_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFieldNumber = 1,
    kSteerFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kGearFieldNumber = 4,
    kThrottleFieldNumber = 5,
    kBrakeFieldNumber = 6,
    kParkFieldNumber = 7,
  };
  // .autonomous_proto.VehicleState.Mode.Enum vehicle = 1;
  void clear_vehicle();
  ::autonomous_proto::VehicleState_Mode_Enum vehicle() const;
  void set_vehicle(::autonomous_proto::VehicleState_Mode_Enum value);
  private:
  ::autonomous_proto::VehicleState_Mode_Enum _internal_vehicle() const;
  void _internal_set_vehicle(::autonomous_proto::VehicleState_Mode_Enum value);
  public:

  // .autonomous_proto.VehicleState.Mode.Enum steer = 2;
  void clear_steer();
  ::autonomous_proto::VehicleState_Mode_Enum steer() const;
  void set_steer(::autonomous_proto::VehicleState_Mode_Enum value);
  private:
  ::autonomous_proto::VehicleState_Mode_Enum _internal_steer() const;
  void _internal_set_steer(::autonomous_proto::VehicleState_Mode_Enum value);
  public:

  // .autonomous_proto.VehicleState.Mode.Enum speed = 3;
  void clear_speed();
  ::autonomous_proto::VehicleState_Mode_Enum speed() const;
  void set_speed(::autonomous_proto::VehicleState_Mode_Enum value);
  private:
  ::autonomous_proto::VehicleState_Mode_Enum _internal_speed() const;
  void _internal_set_speed(::autonomous_proto::VehicleState_Mode_Enum value);
  public:

  // .autonomous_proto.VehicleState.Mode.Enum gear = 4;
  void clear_gear();
  ::autonomous_proto::VehicleState_Mode_Enum gear() const;
  void set_gear(::autonomous_proto::VehicleState_Mode_Enum value);
  private:
  ::autonomous_proto::VehicleState_Mode_Enum _internal_gear() const;
  void _internal_set_gear(::autonomous_proto::VehicleState_Mode_Enum value);
  public:

  // .autonomous_proto.VehicleState.Mode.Enum throttle = 5;
  void clear_throttle();
  ::autonomous_proto::VehicleState_Mode_Enum throttle() const;
  void set_throttle(::autonomous_proto::VehicleState_Mode_Enum value);
  private:
  ::autonomous_proto::VehicleState_Mode_Enum _internal_throttle() const;
  void _internal_set_throttle(::autonomous_proto::VehicleState_Mode_Enum value);
  public:

  // .autonomous_proto.VehicleState.Mode.Enum brake = 6;
  void clear_brake();
  ::autonomous_proto::VehicleState_Mode_Enum brake() const;
  void set_brake(::autonomous_proto::VehicleState_Mode_Enum value);
  private:
  ::autonomous_proto::VehicleState_Mode_Enum _internal_brake() const;
  void _internal_set_brake(::autonomous_proto::VehicleState_Mode_Enum value);
  public:

  // .autonomous_proto.VehicleState.Mode.Enum park = 7;
  void clear_park();
  ::autonomous_proto::VehicleState_Mode_Enum park() const;
  void set_park(::autonomous_proto::VehicleState_Mode_Enum value);
  private:
  ::autonomous_proto::VehicleState_Mode_Enum _internal_park() const;
  void _internal_set_park(::autonomous_proto::VehicleState_Mode_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:autonomous_proto.VehicleState.Mode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int vehicle_;
    int steer_;
    int speed_;
    int gear_;
    int throttle_;
    int brake_;
    int park_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fstate_2eproto;
};
// -------------------------------------------------------------------

class VehicleState_Gear final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.VehicleState.Gear) */ {
 public:
  inline VehicleState_Gear() : VehicleState_Gear(nullptr) {}
  ~VehicleState_Gear() override;
  explicit PROTOBUF_CONSTEXPR VehicleState_Gear(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleState_Gear(const VehicleState_Gear& from);
  VehicleState_Gear(VehicleState_Gear&& from) noexcept
    : VehicleState_Gear() {
    *this = ::std::move(from);
  }

  inline VehicleState_Gear& operator=(const VehicleState_Gear& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState_Gear& operator=(VehicleState_Gear&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState_Gear& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState_Gear* internal_default_instance() {
    return reinterpret_cast<const VehicleState_Gear*>(
               &_VehicleState_Gear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleState_Gear& a, VehicleState_Gear& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState_Gear* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState_Gear* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState_Gear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleState_Gear>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleState_Gear& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleState_Gear& from) {
    VehicleState_Gear::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState_Gear* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.VehicleState.Gear";
  }
  protected:
  explicit VehicleState_Gear(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleState_Gear_Mode Mode;
  static constexpr Mode unknown =
    VehicleState_Gear_Mode_unknown;
  static constexpr Mode N =
    VehicleState_Gear_Mode_N;
  static constexpr Mode D =
    VehicleState_Gear_Mode_D;
  static constexpr Mode R =
    VehicleState_Gear_Mode_R;
  static constexpr Mode P =
    VehicleState_Gear_Mode_P;
  static constexpr Mode spin =
    VehicleState_Gear_Mode_spin;
  static constexpr Mode r_spin =
    VehicleState_Gear_Mode_r_spin;
  static constexpr Mode halt =
    VehicleState_Gear_Mode_halt;
  static constexpr Mode undefined =
    VehicleState_Gear_Mode_undefined;
  static inline bool Mode_IsValid(int value) {
    return VehicleState_Gear_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    VehicleState_Gear_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    VehicleState_Gear_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    VehicleState_Gear_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return VehicleState_Gear_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return VehicleState_Gear_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return VehicleState_Gear_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 2,
    kSelectionRatioFieldNumber = 3,
    kShiftingFieldNumber = 4,
    kModeFieldNumber = 1,
  };
  // .google.protobuf.Int32Value selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& selection() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_selection();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_selection();
  void set_allocated_selection(::PROTOBUF_NAMESPACE_ID::Int32Value* selection);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_selection() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* selection);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_selection();

  // .google.protobuf.DoubleValue selection_ratio = 3;
  bool has_selection_ratio() const;
  private:
  bool _internal_has_selection_ratio() const;
  public:
  void clear_selection_ratio();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& selection_ratio() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_selection_ratio();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_selection_ratio();
  void set_allocated_selection_ratio(::PROTOBUF_NAMESPACE_ID::DoubleValue* selection_ratio);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_selection_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_selection_ratio();
  public:
  void unsafe_arena_set_allocated_selection_ratio(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* selection_ratio);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_selection_ratio();

  // .google.protobuf.BoolValue shifting = 4;
  bool has_shifting() const;
  private:
  bool _internal_has_shifting() const;
  public:
  void clear_shifting();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& shifting() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_shifting();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_shifting();
  void set_allocated_shifting(::PROTOBUF_NAMESPACE_ID::BoolValue* shifting);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_shifting() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_shifting();
  public:
  void unsafe_arena_set_allocated_shifting(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* shifting);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_shifting();

  // .autonomous_proto.VehicleState.Gear.Mode mode = 1;
  void clear_mode();
  ::autonomous_proto::VehicleState_Gear_Mode mode() const;
  void set_mode(::autonomous_proto::VehicleState_Gear_Mode value);
  private:
  ::autonomous_proto::VehicleState_Gear_Mode _internal_mode() const;
  void _internal_set_mode(::autonomous_proto::VehicleState_Gear_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:autonomous_proto.VehicleState.Gear)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Int32Value* selection_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* selection_ratio_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* shifting_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fstate_2eproto;
};
// -------------------------------------------------------------------

class VehicleState_DriverOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.VehicleState.DriverOperation) */ {
 public:
  inline VehicleState_DriverOperation() : VehicleState_DriverOperation(nullptr) {}
  ~VehicleState_DriverOperation() override;
  explicit PROTOBUF_CONSTEXPR VehicleState_DriverOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleState_DriverOperation(const VehicleState_DriverOperation& from);
  VehicleState_DriverOperation(VehicleState_DriverOperation&& from) noexcept
    : VehicleState_DriverOperation() {
    *this = ::std::move(from);
  }

  inline VehicleState_DriverOperation& operator=(const VehicleState_DriverOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState_DriverOperation& operator=(VehicleState_DriverOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState_DriverOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState_DriverOperation* internal_default_instance() {
    return reinterpret_cast<const VehicleState_DriverOperation*>(
               &_VehicleState_DriverOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VehicleState_DriverOperation& a, VehicleState_DriverOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState_DriverOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState_DriverOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState_DriverOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleState_DriverOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleState_DriverOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleState_DriverOperation& from) {
    VehicleState_DriverOperation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState_DriverOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.VehicleState.DriverOperation";
  }
  protected:
  explicit VehicleState_DriverOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteerFieldNumber = 1,
    kSteerTorqueFieldNumber = 2,
    kSteerSpeedFieldNumber = 3,
    kVFieldNumber = 4,
    kAccFieldNumber = 5,
    kThrottleFieldNumber = 6,
    kBrakeFieldNumber = 7,
    kGearFieldNumber = 8,
    kThrottlePedalFieldNumber = 9,
    kBrakePedalFieldNumber = 10,
  };
  // .google.protobuf.DoubleValue steer = 1;
  bool has_steer() const;
  private:
  bool _internal_has_steer() const;
  public:
  void clear_steer();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& steer() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_steer();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_steer();
  void set_allocated_steer(::PROTOBUF_NAMESPACE_ID::DoubleValue* steer);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_steer() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_steer();
  public:
  void unsafe_arena_set_allocated_steer(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_steer();

  // .google.protobuf.DoubleValue steer_torque = 2;
  bool has_steer_torque() const;
  private:
  bool _internal_has_steer_torque() const;
  public:
  void clear_steer_torque();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& steer_torque() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_steer_torque();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_steer_torque();
  void set_allocated_steer_torque(::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_torque);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_steer_torque() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_steer_torque();
  public:
  void unsafe_arena_set_allocated_steer_torque(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_torque);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_steer_torque();

  // .google.protobuf.DoubleValue steer_speed = 3;
  bool has_steer_speed() const;
  private:
  bool _internal_has_steer_speed() const;
  public:
  void clear_steer_speed();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& steer_speed() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_steer_speed();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_steer_speed();
  void set_allocated_steer_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_speed);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_steer_speed() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_steer_speed();
  public:
  void unsafe_arena_set_allocated_steer_speed(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_speed);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_steer_speed();

  // .google.protobuf.DoubleValue v = 4;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& v() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_v();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_v();
  void set_allocated_v(::PROTOBUF_NAMESPACE_ID::DoubleValue* v);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_v() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_v();
  public:
  void unsafe_arena_set_allocated_v(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* v);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_v();

  // .google.protobuf.DoubleValue acc = 5;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& acc() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_acc();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_acc();
  void set_allocated_acc(::PROTOBUF_NAMESPACE_ID::DoubleValue* acc);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_acc() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_acc();
  public:
  void unsafe_arena_set_allocated_acc(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* acc);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_acc();

  // .google.protobuf.DoubleValue throttle = 6;
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& throttle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_throttle();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_throttle();
  void set_allocated_throttle(::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_throttle() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_throttle();
  public:
  void unsafe_arena_set_allocated_throttle(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_throttle();

  // .google.protobuf.DoubleValue brake = 7;
  bool has_brake() const;
  private:
  bool _internal_has_brake() const;
  public:
  void clear_brake();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& brake() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_brake();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_brake();
  void set_allocated_brake(::PROTOBUF_NAMESPACE_ID::DoubleValue* brake);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_brake() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_brake();
  public:
  void unsafe_arena_set_allocated_brake(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* brake);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_brake();

  // .autonomous_proto.VehicleState.Gear gear = 8;
  bool has_gear() const;
  private:
  bool _internal_has_gear() const;
  public:
  void clear_gear();
  const ::autonomous_proto::VehicleState_Gear& gear() const;
  PROTOBUF_NODISCARD ::autonomous_proto::VehicleState_Gear* release_gear();
  ::autonomous_proto::VehicleState_Gear* mutable_gear();
  void set_allocated_gear(::autonomous_proto::VehicleState_Gear* gear);
  private:
  const ::autonomous_proto::VehicleState_Gear& _internal_gear() const;
  ::autonomous_proto::VehicleState_Gear* _internal_mutable_gear();
  public:
  void unsafe_arena_set_allocated_gear(
      ::autonomous_proto::VehicleState_Gear* gear);
  ::autonomous_proto::VehicleState_Gear* unsafe_arena_release_gear();

  // .google.protobuf.DoubleValue throttle_pedal = 9;
  bool has_throttle_pedal() const;
  private:
  bool _internal_has_throttle_pedal() const;
  public:
  void clear_throttle_pedal();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& throttle_pedal() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_throttle_pedal();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_throttle_pedal();
  void set_allocated_throttle_pedal(::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_pedal);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_throttle_pedal() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_throttle_pedal();
  public:
  void unsafe_arena_set_allocated_throttle_pedal(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_pedal);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_throttle_pedal();

  // .google.protobuf.DoubleValue brake_pedal = 10;
  bool has_brake_pedal() const;
  private:
  bool _internal_has_brake_pedal() const;
  public:
  void clear_brake_pedal();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& brake_pedal() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_brake_pedal();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_brake_pedal();
  void set_allocated_brake_pedal(::PROTOBUF_NAMESPACE_ID::DoubleValue* brake_pedal);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_brake_pedal() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_brake_pedal();
  public:
  void unsafe_arena_set_allocated_brake_pedal(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* brake_pedal);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_brake_pedal();

  // @@protoc_insertion_point(class_scope:autonomous_proto.VehicleState.DriverOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_torque_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_speed_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* v_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* acc_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* brake_;
    ::autonomous_proto::VehicleState_Gear* gear_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_pedal_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* brake_pedal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fstate_2eproto;
};
// -------------------------------------------------------------------

class VehicleState_Engine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.VehicleState.Engine) */ {
 public:
  inline VehicleState_Engine() : VehicleState_Engine(nullptr) {}
  ~VehicleState_Engine() override;
  explicit PROTOBUF_CONSTEXPR VehicleState_Engine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleState_Engine(const VehicleState_Engine& from);
  VehicleState_Engine(VehicleState_Engine&& from) noexcept
    : VehicleState_Engine() {
    *this = ::std::move(from);
  }

  inline VehicleState_Engine& operator=(const VehicleState_Engine& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState_Engine& operator=(VehicleState_Engine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState_Engine& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState_Engine* internal_default_instance() {
    return reinterpret_cast<const VehicleState_Engine*>(
               &_VehicleState_Engine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleState_Engine& a, VehicleState_Engine& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState_Engine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState_Engine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState_Engine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleState_Engine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleState_Engine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleState_Engine& from) {
    VehicleState_Engine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState_Engine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.VehicleState.Engine";
  }
  protected:
  explicit VehicleState_Engine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmFieldNumber = 1,
    kRpmDemandFieldNumber = 2,
    kTorqueFieldNumber = 3,
    kTorqueDemandFieldNumber = 4,
    kLoadFieldNumber = 5,
  };
  // .google.protobuf.DoubleValue rpm = 1;
  bool has_rpm() const;
  private:
  bool _internal_has_rpm() const;
  public:
  void clear_rpm();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& rpm() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_rpm();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_rpm();
  void set_allocated_rpm(::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_rpm() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_rpm();
  public:
  void unsafe_arena_set_allocated_rpm(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_rpm();

  // .google.protobuf.DoubleValue rpm_demand = 2;
  bool has_rpm_demand() const;
  private:
  bool _internal_has_rpm_demand() const;
  public:
  void clear_rpm_demand();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& rpm_demand() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_rpm_demand();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_rpm_demand();
  void set_allocated_rpm_demand(::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm_demand);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_rpm_demand() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_rpm_demand();
  public:
  void unsafe_arena_set_allocated_rpm_demand(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm_demand);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_rpm_demand();

  // .google.protobuf.DoubleValue torque = 3;
  bool has_torque() const;
  private:
  bool _internal_has_torque() const;
  public:
  void clear_torque();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& torque() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_torque();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_torque();
  void set_allocated_torque(::PROTOBUF_NAMESPACE_ID::DoubleValue* torque);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_torque() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_torque();
  public:
  void unsafe_arena_set_allocated_torque(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* torque);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_torque();

  // .google.protobuf.DoubleValue torque_demand = 4;
  bool has_torque_demand() const;
  private:
  bool _internal_has_torque_demand() const;
  public:
  void clear_torque_demand();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& torque_demand() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_torque_demand();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_torque_demand();
  void set_allocated_torque_demand(::PROTOBUF_NAMESPACE_ID::DoubleValue* torque_demand);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_torque_demand() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_torque_demand();
  public:
  void unsafe_arena_set_allocated_torque_demand(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* torque_demand);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_torque_demand();

  // .google.protobuf.DoubleValue load = 5;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& load() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_load();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_load();
  void set_allocated_load(::PROTOBUF_NAMESPACE_ID::DoubleValue* load);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_load() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_load();
  public:
  void unsafe_arena_set_allocated_load(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* load);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_load();

  // @@protoc_insertion_point(class_scope:autonomous_proto.VehicleState.Engine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm_demand_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* torque_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* torque_demand_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* load_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fstate_2eproto;
};
// -------------------------------------------------------------------

class VehicleState_Battery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.VehicleState.Battery) */ {
 public:
  inline VehicleState_Battery() : VehicleState_Battery(nullptr) {}
  ~VehicleState_Battery() override;
  explicit PROTOBUF_CONSTEXPR VehicleState_Battery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleState_Battery(const VehicleState_Battery& from);
  VehicleState_Battery(VehicleState_Battery&& from) noexcept
    : VehicleState_Battery() {
    *this = ::std::move(from);
  }

  inline VehicleState_Battery& operator=(const VehicleState_Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState_Battery& operator=(VehicleState_Battery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState_Battery& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState_Battery* internal_default_instance() {
    return reinterpret_cast<const VehicleState_Battery*>(
               &_VehicleState_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleState_Battery& a, VehicleState_Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState_Battery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState_Battery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState_Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleState_Battery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleState_Battery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleState_Battery& from) {
    VehicleState_Battery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState_Battery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.VehicleState.Battery";
  }
  protected:
  explicit VehicleState_Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoltageFieldNumber = 1,
    kCurrentFieldNumber = 2,
    kPowerFieldNumber = 3,
    kTemperatureFieldNumber = 4,
    kSocFieldNumber = 5,
    kRemainCapacityFieldNumber = 6,
  };
  // .google.protobuf.DoubleValue voltage = 1;
  bool has_voltage() const;
  private:
  bool _internal_has_voltage() const;
  public:
  void clear_voltage();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& voltage() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_voltage();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_voltage();
  void set_allocated_voltage(::PROTOBUF_NAMESPACE_ID::DoubleValue* voltage);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_voltage() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_voltage();
  public:
  void unsafe_arena_set_allocated_voltage(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* voltage);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_voltage();

  // .google.protobuf.DoubleValue current = 2;
  bool has_current() const;
  private:
  bool _internal_has_current() const;
  public:
  void clear_current();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& current() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_current();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_current();
  void set_allocated_current(::PROTOBUF_NAMESPACE_ID::DoubleValue* current);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_current() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_current();
  public:
  void unsafe_arena_set_allocated_current(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* current);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_current();

  // .google.protobuf.DoubleValue power = 3;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& power() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_power();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_power();
  void set_allocated_power(::PROTOBUF_NAMESPACE_ID::DoubleValue* power);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_power() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_power();
  public:
  void unsafe_arena_set_allocated_power(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* power);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_power();

  // .google.protobuf.DoubleValue temperature = 4;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& temperature() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_temperature();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_temperature();
  void set_allocated_temperature(::PROTOBUF_NAMESPACE_ID::DoubleValue* temperature);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_temperature();
  public:
  void unsafe_arena_set_allocated_temperature(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* temperature);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_temperature();

  // .google.protobuf.DoubleValue soc = 5;
  bool has_soc() const;
  private:
  bool _internal_has_soc() const;
  public:
  void clear_soc();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& soc() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_soc();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_soc();
  void set_allocated_soc(::PROTOBUF_NAMESPACE_ID::DoubleValue* soc);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_soc() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_soc();
  public:
  void unsafe_arena_set_allocated_soc(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* soc);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_soc();

  // .google.protobuf.DoubleValue remain_capacity = 6;
  bool has_remain_capacity() const;
  private:
  bool _internal_has_remain_capacity() const;
  public:
  void clear_remain_capacity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& remain_capacity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_remain_capacity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_remain_capacity();
  void set_allocated_remain_capacity(::PROTOBUF_NAMESPACE_ID::DoubleValue* remain_capacity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_remain_capacity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_remain_capacity();
  public:
  void unsafe_arena_set_allocated_remain_capacity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* remain_capacity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_remain_capacity();

  // @@protoc_insertion_point(class_scope:autonomous_proto.VehicleState.Battery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* voltage_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* current_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* power_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* temperature_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* soc_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* remain_capacity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fstate_2eproto;
};
// -------------------------------------------------------------------

class VehicleState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.VehicleState) */ {
 public:
  inline VehicleState() : VehicleState(nullptr) {}
  ~VehicleState() override;
  explicit PROTOBUF_CONSTEXPR VehicleState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleState(const VehicleState& from);
  VehicleState(VehicleState&& from) noexcept
    : VehicleState() {
    *this = ::std::move(from);
  }

  inline VehicleState& operator=(const VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState& operator=(VehicleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState* internal_default_instance() {
    return reinterpret_cast<const VehicleState*>(
               &_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VehicleState& a, VehicleState& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleState& from) {
    VehicleState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.VehicleState";
  }
  protected:
  explicit VehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleState_Mode Mode;
  typedef VehicleState_Gear Gear;
  typedef VehicleState_DriverOperation DriverOperation;
  typedef VehicleState_Engine Engine;
  typedef VehicleState_Battery Battery;

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 5,
    kAngleVelocityFieldNumber = 6,
    kVFieldNumber = 7,
    kAccFieldNumber = 8,
    kThrottleFieldNumber = 9,
    kBrakeFieldNumber = 10,
    kErrorsFieldNumber = 11,
    kGearFieldNumber = 12,
    kEngineFieldNumber = 13,
    kBatteryFieldNumber = 14,
    kSteerFieldNumber = 15,
    kSteerSpeedFieldNumber = 16,
    kSteerTorqueFieldNumber = 17,
    kHeaderFieldNumber = 1,
    kModeFieldNumber = 2,
    kDriverOperationFieldNumber = 3,
    kParkFieldNumber = 4,
  };
  // repeated double angle = 5;
  int angle_size() const;
  private:
  int _internal_angle_size() const;
  public:
  void clear_angle();
  private:
  double _internal_angle(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_angle() const;
  void _internal_add_angle(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_angle();
  public:
  double angle(int index) const;
  void set_angle(int index, double value);
  void add_angle(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      angle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_angle();

  // repeated double angle_velocity = 6;
  int angle_velocity_size() const;
  private:
  int _internal_angle_velocity_size() const;
  public:
  void clear_angle_velocity();
  private:
  double _internal_angle_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_angle_velocity() const;
  void _internal_add_angle_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_angle_velocity();
  public:
  double angle_velocity(int index) const;
  void set_angle_velocity(int index, double value);
  void add_angle_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      angle_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_angle_velocity();

  // repeated double v = 7;
  int v_size() const;
  private:
  int _internal_v_size() const;
  public:
  void clear_v();
  private:
  double _internal_v(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_v() const;
  void _internal_add_v(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_v();
  public:
  double v(int index) const;
  void set_v(int index, double value);
  void add_v(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      v() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_v();

  // repeated double acc = 8;
  int acc_size() const;
  private:
  int _internal_acc_size() const;
  public:
  void clear_acc();
  private:
  double _internal_acc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_acc() const;
  void _internal_add_acc(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_acc();
  public:
  double acc(int index) const;
  void set_acc(int index, double value);
  void add_acc(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      acc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_acc();

  // repeated double throttle = 9;
  int throttle_size() const;
  private:
  int _internal_throttle_size() const;
  public:
  void clear_throttle();
  private:
  double _internal_throttle(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_throttle() const;
  void _internal_add_throttle(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_throttle();
  public:
  double throttle(int index) const;
  void set_throttle(int index, double value);
  void add_throttle(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      throttle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_throttle();

  // repeated double brake = 10;
  int brake_size() const;
  private:
  int _internal_brake_size() const;
  public:
  void clear_brake();
  private:
  double _internal_brake(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_brake() const;
  void _internal_add_brake(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_brake();
  public:
  double brake(int index) const;
  void set_brake(int index, double value);
  void add_brake(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      brake() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_brake();

  // repeated string errors = 11;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, size_t size);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errors();
  private:
  const std::string& _internal_errors(int index) const;
  std::string* _internal_add_errors();
  public:

  // repeated .autonomous_proto.VehicleState.Gear gear = 12;
  int gear_size() const;
  private:
  int _internal_gear_size() const;
  public:
  void clear_gear();
  ::autonomous_proto::VehicleState_Gear* mutable_gear(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Gear >*
      mutable_gear();
  private:
  const ::autonomous_proto::VehicleState_Gear& _internal_gear(int index) const;
  ::autonomous_proto::VehicleState_Gear* _internal_add_gear();
  public:
  const ::autonomous_proto::VehicleState_Gear& gear(int index) const;
  ::autonomous_proto::VehicleState_Gear* add_gear();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Gear >&
      gear() const;

  // repeated .autonomous_proto.VehicleState.Engine engine = 13;
  int engine_size() const;
  private:
  int _internal_engine_size() const;
  public:
  void clear_engine();
  ::autonomous_proto::VehicleState_Engine* mutable_engine(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Engine >*
      mutable_engine();
  private:
  const ::autonomous_proto::VehicleState_Engine& _internal_engine(int index) const;
  ::autonomous_proto::VehicleState_Engine* _internal_add_engine();
  public:
  const ::autonomous_proto::VehicleState_Engine& engine(int index) const;
  ::autonomous_proto::VehicleState_Engine* add_engine();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Engine >&
      engine() const;

  // repeated .autonomous_proto.VehicleState.Battery battery = 14;
  int battery_size() const;
  private:
  int _internal_battery_size() const;
  public:
  void clear_battery();
  ::autonomous_proto::VehicleState_Battery* mutable_battery(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Battery >*
      mutable_battery();
  private:
  const ::autonomous_proto::VehicleState_Battery& _internal_battery(int index) const;
  ::autonomous_proto::VehicleState_Battery* _internal_add_battery();
  public:
  const ::autonomous_proto::VehicleState_Battery& battery(int index) const;
  ::autonomous_proto::VehicleState_Battery* add_battery();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Battery >&
      battery() const;

  // repeated double steer = 15;
  int steer_size() const;
  private:
  int _internal_steer_size() const;
  public:
  void clear_steer();
  private:
  double _internal_steer(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_steer() const;
  void _internal_add_steer(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_steer();
  public:
  double steer(int index) const;
  void set_steer(int index, double value);
  void add_steer(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      steer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_steer();

  // repeated double steer_speed = 16;
  int steer_speed_size() const;
  private:
  int _internal_steer_speed_size() const;
  public:
  void clear_steer_speed();
  private:
  double _internal_steer_speed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_steer_speed() const;
  void _internal_add_steer_speed(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_steer_speed();
  public:
  double steer_speed(int index) const;
  void set_steer_speed(int index, double value);
  void add_steer_speed(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      steer_speed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_steer_speed();

  // repeated double steer_torque = 17;
  int steer_torque_size() const;
  private:
  int _internal_steer_torque_size() const;
  public:
  void clear_steer_torque();
  private:
  double _internal_steer_torque(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_steer_torque() const;
  void _internal_add_steer_torque(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_steer_torque();
  public:
  double steer_torque(int index) const;
  void set_steer_torque(int index, double value);
  void add_steer_torque(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      steer_torque() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_steer_torque();

  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .autonomous_proto.VehicleState.Mode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::autonomous_proto::VehicleState_Mode& mode() const;
  PROTOBUF_NODISCARD ::autonomous_proto::VehicleState_Mode* release_mode();
  ::autonomous_proto::VehicleState_Mode* mutable_mode();
  void set_allocated_mode(::autonomous_proto::VehicleState_Mode* mode);
  private:
  const ::autonomous_proto::VehicleState_Mode& _internal_mode() const;
  ::autonomous_proto::VehicleState_Mode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::autonomous_proto::VehicleState_Mode* mode);
  ::autonomous_proto::VehicleState_Mode* unsafe_arena_release_mode();

  // .autonomous_proto.VehicleState.DriverOperation driver_operation = 3;
  bool has_driver_operation() const;
  private:
  bool _internal_has_driver_operation() const;
  public:
  void clear_driver_operation();
  const ::autonomous_proto::VehicleState_DriverOperation& driver_operation() const;
  PROTOBUF_NODISCARD ::autonomous_proto::VehicleState_DriverOperation* release_driver_operation();
  ::autonomous_proto::VehicleState_DriverOperation* mutable_driver_operation();
  void set_allocated_driver_operation(::autonomous_proto::VehicleState_DriverOperation* driver_operation);
  private:
  const ::autonomous_proto::VehicleState_DriverOperation& _internal_driver_operation() const;
  ::autonomous_proto::VehicleState_DriverOperation* _internal_mutable_driver_operation();
  public:
  void unsafe_arena_set_allocated_driver_operation(
      ::autonomous_proto::VehicleState_DriverOperation* driver_operation);
  ::autonomous_proto::VehicleState_DriverOperation* unsafe_arena_release_driver_operation();

  // .google.protobuf.BoolValue park = 4;
  bool has_park() const;
  private:
  bool _internal_has_park() const;
  public:
  void clear_park();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& park() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_park();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_park();
  void set_allocated_park(::PROTOBUF_NAMESPACE_ID::BoolValue* park);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_park() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_park();
  public:
  void unsafe_arena_set_allocated_park(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* park);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_park();

  // @@protoc_insertion_point(class_scope:autonomous_proto.VehicleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > angle_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > angle_velocity_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > v_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > acc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > throttle_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > brake_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Gear > gear_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Engine > engine_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Battery > battery_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > steer_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > steer_speed_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > steer_torque_;
    ::autonomous_proto::MessageInfo* header_;
    ::autonomous_proto::VehicleState_Mode* mode_;
    ::autonomous_proto::VehicleState_DriverOperation* driver_operation_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* park_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleState_Mode

// .autonomous_proto.VehicleState.Mode.Enum vehicle = 1;
inline void VehicleState_Mode::clear_vehicle() {
  _impl_.vehicle_ = 0;
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::_internal_vehicle() const {
  return static_cast< ::autonomous_proto::VehicleState_Mode_Enum >(_impl_.vehicle_);
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::vehicle() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Mode.vehicle)
  return _internal_vehicle();
}
inline void VehicleState_Mode::_internal_set_vehicle(::autonomous_proto::VehicleState_Mode_Enum value) {
  
  _impl_.vehicle_ = value;
}
inline void VehicleState_Mode::set_vehicle(::autonomous_proto::VehicleState_Mode_Enum value) {
  _internal_set_vehicle(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.Mode.vehicle)
}

// .autonomous_proto.VehicleState.Mode.Enum steer = 2;
inline void VehicleState_Mode::clear_steer() {
  _impl_.steer_ = 0;
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::_internal_steer() const {
  return static_cast< ::autonomous_proto::VehicleState_Mode_Enum >(_impl_.steer_);
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::steer() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Mode.steer)
  return _internal_steer();
}
inline void VehicleState_Mode::_internal_set_steer(::autonomous_proto::VehicleState_Mode_Enum value) {
  
  _impl_.steer_ = value;
}
inline void VehicleState_Mode::set_steer(::autonomous_proto::VehicleState_Mode_Enum value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.Mode.steer)
}

// .autonomous_proto.VehicleState.Mode.Enum speed = 3;
inline void VehicleState_Mode::clear_speed() {
  _impl_.speed_ = 0;
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::_internal_speed() const {
  return static_cast< ::autonomous_proto::VehicleState_Mode_Enum >(_impl_.speed_);
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::speed() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Mode.speed)
  return _internal_speed();
}
inline void VehicleState_Mode::_internal_set_speed(::autonomous_proto::VehicleState_Mode_Enum value) {
  
  _impl_.speed_ = value;
}
inline void VehicleState_Mode::set_speed(::autonomous_proto::VehicleState_Mode_Enum value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.Mode.speed)
}

// .autonomous_proto.VehicleState.Mode.Enum gear = 4;
inline void VehicleState_Mode::clear_gear() {
  _impl_.gear_ = 0;
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::_internal_gear() const {
  return static_cast< ::autonomous_proto::VehicleState_Mode_Enum >(_impl_.gear_);
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::gear() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Mode.gear)
  return _internal_gear();
}
inline void VehicleState_Mode::_internal_set_gear(::autonomous_proto::VehicleState_Mode_Enum value) {
  
  _impl_.gear_ = value;
}
inline void VehicleState_Mode::set_gear(::autonomous_proto::VehicleState_Mode_Enum value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.Mode.gear)
}

// .autonomous_proto.VehicleState.Mode.Enum throttle = 5;
inline void VehicleState_Mode::clear_throttle() {
  _impl_.throttle_ = 0;
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::_internal_throttle() const {
  return static_cast< ::autonomous_proto::VehicleState_Mode_Enum >(_impl_.throttle_);
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::throttle() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Mode.throttle)
  return _internal_throttle();
}
inline void VehicleState_Mode::_internal_set_throttle(::autonomous_proto::VehicleState_Mode_Enum value) {
  
  _impl_.throttle_ = value;
}
inline void VehicleState_Mode::set_throttle(::autonomous_proto::VehicleState_Mode_Enum value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.Mode.throttle)
}

// .autonomous_proto.VehicleState.Mode.Enum brake = 6;
inline void VehicleState_Mode::clear_brake() {
  _impl_.brake_ = 0;
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::_internal_brake() const {
  return static_cast< ::autonomous_proto::VehicleState_Mode_Enum >(_impl_.brake_);
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::brake() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Mode.brake)
  return _internal_brake();
}
inline void VehicleState_Mode::_internal_set_brake(::autonomous_proto::VehicleState_Mode_Enum value) {
  
  _impl_.brake_ = value;
}
inline void VehicleState_Mode::set_brake(::autonomous_proto::VehicleState_Mode_Enum value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.Mode.brake)
}

// .autonomous_proto.VehicleState.Mode.Enum park = 7;
inline void VehicleState_Mode::clear_park() {
  _impl_.park_ = 0;
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::_internal_park() const {
  return static_cast< ::autonomous_proto::VehicleState_Mode_Enum >(_impl_.park_);
}
inline ::autonomous_proto::VehicleState_Mode_Enum VehicleState_Mode::park() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Mode.park)
  return _internal_park();
}
inline void VehicleState_Mode::_internal_set_park(::autonomous_proto::VehicleState_Mode_Enum value) {
  
  _impl_.park_ = value;
}
inline void VehicleState_Mode::set_park(::autonomous_proto::VehicleState_Mode_Enum value) {
  _internal_set_park(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.Mode.park)
}

// -------------------------------------------------------------------

// VehicleState_Gear

// .autonomous_proto.VehicleState.Gear.Mode mode = 1;
inline void VehicleState_Gear::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::autonomous_proto::VehicleState_Gear_Mode VehicleState_Gear::_internal_mode() const {
  return static_cast< ::autonomous_proto::VehicleState_Gear_Mode >(_impl_.mode_);
}
inline ::autonomous_proto::VehicleState_Gear_Mode VehicleState_Gear::mode() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Gear.mode)
  return _internal_mode();
}
inline void VehicleState_Gear::_internal_set_mode(::autonomous_proto::VehicleState_Gear_Mode value) {
  
  _impl_.mode_ = value;
}
inline void VehicleState_Gear::set_mode(::autonomous_proto::VehicleState_Gear_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.Gear.mode)
}

// .google.protobuf.Int32Value selection = 2;
inline bool VehicleState_Gear::_internal_has_selection() const {
  return this != internal_default_instance() && _impl_.selection_ != nullptr;
}
inline bool VehicleState_Gear::has_selection() const {
  return _internal_has_selection();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& VehicleState_Gear::_internal_selection() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& VehicleState_Gear::selection() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Gear.selection)
  return _internal_selection();
}
inline void VehicleState_Gear::unsafe_arena_set_allocated_selection(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Gear.selection)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* VehicleState_Gear::release_selection() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* VehicleState_Gear::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Gear.selection)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* VehicleState_Gear::_internal_mutable_selection() {
  
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* VehicleState_Gear::mutable_selection() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Gear.selection)
  return _msg;
}
inline void VehicleState_Gear::set_allocated_selection(::PROTOBUF_NAMESPACE_ID::Int32Value* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Gear.selection)
}

// .google.protobuf.DoubleValue selection_ratio = 3;
inline bool VehicleState_Gear::_internal_has_selection_ratio() const {
  return this != internal_default_instance() && _impl_.selection_ratio_ != nullptr;
}
inline bool VehicleState_Gear::has_selection_ratio() const {
  return _internal_has_selection_ratio();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Gear::_internal_selection_ratio() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.selection_ratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Gear::selection_ratio() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Gear.selection_ratio)
  return _internal_selection_ratio();
}
inline void VehicleState_Gear::unsafe_arena_set_allocated_selection_ratio(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* selection_ratio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_ratio_);
  }
  _impl_.selection_ratio_ = selection_ratio;
  if (selection_ratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Gear.selection_ratio)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Gear::release_selection_ratio() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.selection_ratio_;
  _impl_.selection_ratio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Gear::unsafe_arena_release_selection_ratio() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Gear.selection_ratio)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.selection_ratio_;
  _impl_.selection_ratio_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Gear::_internal_mutable_selection_ratio() {
  
  if (_impl_.selection_ratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.selection_ratio_ = p;
  }
  return _impl_.selection_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Gear::mutable_selection_ratio() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_selection_ratio();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Gear.selection_ratio)
  return _msg;
}
inline void VehicleState_Gear::set_allocated_selection_ratio(::PROTOBUF_NAMESPACE_ID::DoubleValue* selection_ratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_ratio_);
  }
  if (selection_ratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_ratio));
    if (message_arena != submessage_arena) {
      selection_ratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_ratio, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.selection_ratio_ = selection_ratio;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Gear.selection_ratio)
}

// .google.protobuf.BoolValue shifting = 4;
inline bool VehicleState_Gear::_internal_has_shifting() const {
  return this != internal_default_instance() && _impl_.shifting_ != nullptr;
}
inline bool VehicleState_Gear::has_shifting() const {
  return _internal_has_shifting();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& VehicleState_Gear::_internal_shifting() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.shifting_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& VehicleState_Gear::shifting() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Gear.shifting)
  return _internal_shifting();
}
inline void VehicleState_Gear::unsafe_arena_set_allocated_shifting(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* shifting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shifting_);
  }
  _impl_.shifting_ = shifting;
  if (shifting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Gear.shifting)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* VehicleState_Gear::release_shifting() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.shifting_;
  _impl_.shifting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* VehicleState_Gear::unsafe_arena_release_shifting() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Gear.shifting)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.shifting_;
  _impl_.shifting_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* VehicleState_Gear::_internal_mutable_shifting() {
  
  if (_impl_.shifting_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.shifting_ = p;
  }
  return _impl_.shifting_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* VehicleState_Gear::mutable_shifting() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_shifting();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Gear.shifting)
  return _msg;
}
inline void VehicleState_Gear::set_allocated_shifting(::PROTOBUF_NAMESPACE_ID::BoolValue* shifting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shifting_);
  }
  if (shifting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shifting));
    if (message_arena != submessage_arena) {
      shifting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shifting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shifting_ = shifting;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Gear.shifting)
}

// -------------------------------------------------------------------

// VehicleState_DriverOperation

// .google.protobuf.DoubleValue steer = 1;
inline bool VehicleState_DriverOperation::_internal_has_steer() const {
  return this != internal_default_instance() && _impl_.steer_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_steer() const {
  return _internal_has_steer();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_steer() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.steer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::steer() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.steer)
  return _internal_steer();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_steer(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_);
  }
  _impl_.steer_ = steer;
  if (steer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.steer)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_steer() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.steer_;
  _impl_.steer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_steer() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.steer)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.steer_;
  _impl_.steer_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_steer() {
  
  if (_impl_.steer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.steer_ = p;
  }
  return _impl_.steer_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_steer() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_steer();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.steer)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_steer(::PROTOBUF_NAMESPACE_ID::DoubleValue* steer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_);
  }
  if (steer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer));
    if (message_arena != submessage_arena) {
      steer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.steer_ = steer;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.steer)
}

// .google.protobuf.DoubleValue steer_torque = 2;
inline bool VehicleState_DriverOperation::_internal_has_steer_torque() const {
  return this != internal_default_instance() && _impl_.steer_torque_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_steer_torque() const {
  return _internal_has_steer_torque();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_steer_torque() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.steer_torque_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::steer_torque() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.steer_torque)
  return _internal_steer_torque();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_steer_torque(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_torque) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_torque_);
  }
  _impl_.steer_torque_ = steer_torque;
  if (steer_torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.steer_torque)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_steer_torque() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.steer_torque_;
  _impl_.steer_torque_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_steer_torque() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.steer_torque)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.steer_torque_;
  _impl_.steer_torque_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_steer_torque() {
  
  if (_impl_.steer_torque_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.steer_torque_ = p;
  }
  return _impl_.steer_torque_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_steer_torque() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_steer_torque();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.steer_torque)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_steer_torque(::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_torque) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_torque_);
  }
  if (steer_torque) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_torque));
    if (message_arena != submessage_arena) {
      steer_torque = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_torque, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.steer_torque_ = steer_torque;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.steer_torque)
}

// .google.protobuf.DoubleValue steer_speed = 3;
inline bool VehicleState_DriverOperation::_internal_has_steer_speed() const {
  return this != internal_default_instance() && _impl_.steer_speed_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_steer_speed() const {
  return _internal_has_steer_speed();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_steer_speed() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.steer_speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::steer_speed() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.steer_speed)
  return _internal_steer_speed();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_steer_speed(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_speed_);
  }
  _impl_.steer_speed_ = steer_speed;
  if (steer_speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.steer_speed)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_steer_speed() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.steer_speed_;
  _impl_.steer_speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_steer_speed() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.steer_speed)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.steer_speed_;
  _impl_.steer_speed_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_steer_speed() {
  
  if (_impl_.steer_speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.steer_speed_ = p;
  }
  return _impl_.steer_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_steer_speed() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_steer_speed();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.steer_speed)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_steer_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* steer_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_speed_);
  }
  if (steer_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_speed));
    if (message_arena != submessage_arena) {
      steer_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.steer_speed_ = steer_speed;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.steer_speed)
}

// .google.protobuf.DoubleValue v = 4;
inline bool VehicleState_DriverOperation::_internal_has_v() const {
  return this != internal_default_instance() && _impl_.v_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_v() const {
  return _internal_has_v();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_v() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.v_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::v() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.v)
  return _internal_v();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_v(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_);
  }
  _impl_.v_ = v;
  if (v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.v)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_v() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.v_;
  _impl_.v_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_v() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.v)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.v_;
  _impl_.v_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_v() {
  
  if (_impl_.v_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.v_ = p;
  }
  return _impl_.v_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_v() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.v)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_v(::PROTOBUF_NAMESPACE_ID::DoubleValue* v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_);
  }
  if (v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v));
    if (message_arena != submessage_arena) {
      v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.v_ = v;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.v)
}

// .google.protobuf.DoubleValue acc = 5;
inline bool VehicleState_DriverOperation::_internal_has_acc() const {
  return this != internal_default_instance() && _impl_.acc_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_acc() const {
  return _internal_has_acc();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_acc() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.acc_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::acc() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.acc)
  return _internal_acc();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_acc(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* acc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acc_);
  }
  _impl_.acc_ = acc;
  if (acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.acc)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_acc() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.acc_;
  _impl_.acc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_acc() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.acc)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.acc_;
  _impl_.acc_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_acc() {
  
  if (_impl_.acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.acc_ = p;
  }
  return _impl_.acc_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_acc() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_acc();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.acc)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_acc(::PROTOBUF_NAMESPACE_ID::DoubleValue* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acc_);
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc));
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.acc)
}

// .google.protobuf.DoubleValue throttle = 6;
inline bool VehicleState_DriverOperation::_internal_has_throttle() const {
  return this != internal_default_instance() && _impl_.throttle_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_throttle() const {
  return _internal_has_throttle();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_throttle() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.throttle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::throttle() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.throttle)
  return _internal_throttle();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_throttle(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_);
  }
  _impl_.throttle_ = throttle;
  if (throttle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.throttle)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_throttle() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.throttle_;
  _impl_.throttle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_throttle() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.throttle)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.throttle_;
  _impl_.throttle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_throttle() {
  
  if (_impl_.throttle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.throttle_ = p;
  }
  return _impl_.throttle_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_throttle() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_throttle();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.throttle)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_throttle(::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_);
  }
  if (throttle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle));
    if (message_arena != submessage_arena) {
      throttle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.throttle_ = throttle;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.throttle)
}

// .google.protobuf.DoubleValue brake = 7;
inline bool VehicleState_DriverOperation::_internal_has_brake() const {
  return this != internal_default_instance() && _impl_.brake_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_brake() const {
  return _internal_has_brake();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_brake() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.brake_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::brake() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.brake)
  return _internal_brake();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_brake(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* brake) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_);
  }
  _impl_.brake_ = brake;
  if (brake) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.brake)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_brake() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.brake_;
  _impl_.brake_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_brake() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.brake)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.brake_;
  _impl_.brake_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_brake() {
  
  if (_impl_.brake_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.brake_ = p;
  }
  return _impl_.brake_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_brake() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_brake();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.brake)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_brake(::PROTOBUF_NAMESPACE_ID::DoubleValue* brake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_);
  }
  if (brake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brake));
    if (message_arena != submessage_arena) {
      brake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brake_ = brake;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.brake)
}

// .autonomous_proto.VehicleState.Gear gear = 8;
inline bool VehicleState_DriverOperation::_internal_has_gear() const {
  return this != internal_default_instance() && _impl_.gear_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_gear() const {
  return _internal_has_gear();
}
inline void VehicleState_DriverOperation::clear_gear() {
  if (GetArenaForAllocation() == nullptr && _impl_.gear_ != nullptr) {
    delete _impl_.gear_;
  }
  _impl_.gear_ = nullptr;
}
inline const ::autonomous_proto::VehicleState_Gear& VehicleState_DriverOperation::_internal_gear() const {
  const ::autonomous_proto::VehicleState_Gear* p = _impl_.gear_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::VehicleState_Gear&>(
      ::autonomous_proto::_VehicleState_Gear_default_instance_);
}
inline const ::autonomous_proto::VehicleState_Gear& VehicleState_DriverOperation::gear() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.gear)
  return _internal_gear();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_gear(
    ::autonomous_proto::VehicleState_Gear* gear) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gear_);
  }
  _impl_.gear_ = gear;
  if (gear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.gear)
}
inline ::autonomous_proto::VehicleState_Gear* VehicleState_DriverOperation::release_gear() {
  
  ::autonomous_proto::VehicleState_Gear* temp = _impl_.gear_;
  _impl_.gear_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::VehicleState_Gear* VehicleState_DriverOperation::unsafe_arena_release_gear() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.gear)
  
  ::autonomous_proto::VehicleState_Gear* temp = _impl_.gear_;
  _impl_.gear_ = nullptr;
  return temp;
}
inline ::autonomous_proto::VehicleState_Gear* VehicleState_DriverOperation::_internal_mutable_gear() {
  
  if (_impl_.gear_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::VehicleState_Gear>(GetArenaForAllocation());
    _impl_.gear_ = p;
  }
  return _impl_.gear_;
}
inline ::autonomous_proto::VehicleState_Gear* VehicleState_DriverOperation::mutable_gear() {
  ::autonomous_proto::VehicleState_Gear* _msg = _internal_mutable_gear();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.gear)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_gear(::autonomous_proto::VehicleState_Gear* gear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gear_;
  }
  if (gear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gear);
    if (message_arena != submessage_arena) {
      gear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gear, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gear_ = gear;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.gear)
}

// .google.protobuf.DoubleValue throttle_pedal = 9;
inline bool VehicleState_DriverOperation::_internal_has_throttle_pedal() const {
  return this != internal_default_instance() && _impl_.throttle_pedal_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_throttle_pedal() const {
  return _internal_has_throttle_pedal();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_throttle_pedal() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.throttle_pedal_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::throttle_pedal() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.throttle_pedal)
  return _internal_throttle_pedal();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_throttle_pedal(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_pedal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_pedal_);
  }
  _impl_.throttle_pedal_ = throttle_pedal;
  if (throttle_pedal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.throttle_pedal)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_throttle_pedal() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.throttle_pedal_;
  _impl_.throttle_pedal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_throttle_pedal() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.throttle_pedal)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.throttle_pedal_;
  _impl_.throttle_pedal_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_throttle_pedal() {
  
  if (_impl_.throttle_pedal_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.throttle_pedal_ = p;
  }
  return _impl_.throttle_pedal_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_throttle_pedal() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_throttle_pedal();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.throttle_pedal)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_throttle_pedal(::PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_pedal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_pedal_);
  }
  if (throttle_pedal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle_pedal));
    if (message_arena != submessage_arena) {
      throttle_pedal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_pedal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.throttle_pedal_ = throttle_pedal;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.throttle_pedal)
}

// .google.protobuf.DoubleValue brake_pedal = 10;
inline bool VehicleState_DriverOperation::_internal_has_brake_pedal() const {
  return this != internal_default_instance() && _impl_.brake_pedal_ != nullptr;
}
inline bool VehicleState_DriverOperation::has_brake_pedal() const {
  return _internal_has_brake_pedal();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::_internal_brake_pedal() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.brake_pedal_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_DriverOperation::brake_pedal() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.DriverOperation.brake_pedal)
  return _internal_brake_pedal();
}
inline void VehicleState_DriverOperation::unsafe_arena_set_allocated_brake_pedal(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* brake_pedal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_pedal_);
  }
  _impl_.brake_pedal_ = brake_pedal;
  if (brake_pedal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.DriverOperation.brake_pedal)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::release_brake_pedal() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.brake_pedal_;
  _impl_.brake_pedal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::unsafe_arena_release_brake_pedal() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.DriverOperation.brake_pedal)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.brake_pedal_;
  _impl_.brake_pedal_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::_internal_mutable_brake_pedal() {
  
  if (_impl_.brake_pedal_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.brake_pedal_ = p;
  }
  return _impl_.brake_pedal_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_DriverOperation::mutable_brake_pedal() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_brake_pedal();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.DriverOperation.brake_pedal)
  return _msg;
}
inline void VehicleState_DriverOperation::set_allocated_brake_pedal(::PROTOBUF_NAMESPACE_ID::DoubleValue* brake_pedal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_pedal_);
  }
  if (brake_pedal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brake_pedal));
    if (message_arena != submessage_arena) {
      brake_pedal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_pedal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brake_pedal_ = brake_pedal;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.DriverOperation.brake_pedal)
}

// -------------------------------------------------------------------

// VehicleState_Engine

// .google.protobuf.DoubleValue rpm = 1;
inline bool VehicleState_Engine::_internal_has_rpm() const {
  return this != internal_default_instance() && _impl_.rpm_ != nullptr;
}
inline bool VehicleState_Engine::has_rpm() const {
  return _internal_has_rpm();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::_internal_rpm() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.rpm_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::rpm() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Engine.rpm)
  return _internal_rpm();
}
inline void VehicleState_Engine::unsafe_arena_set_allocated_rpm(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rpm_);
  }
  _impl_.rpm_ = rpm;
  if (rpm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Engine.rpm)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::release_rpm() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.rpm_;
  _impl_.rpm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::unsafe_arena_release_rpm() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Engine.rpm)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.rpm_;
  _impl_.rpm_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::_internal_mutable_rpm() {
  
  if (_impl_.rpm_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.rpm_ = p;
  }
  return _impl_.rpm_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::mutable_rpm() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_rpm();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Engine.rpm)
  return _msg;
}
inline void VehicleState_Engine::set_allocated_rpm(::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rpm_);
  }
  if (rpm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpm));
    if (message_arena != submessage_arena) {
      rpm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpm, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rpm_ = rpm;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Engine.rpm)
}

// .google.protobuf.DoubleValue rpm_demand = 2;
inline bool VehicleState_Engine::_internal_has_rpm_demand() const {
  return this != internal_default_instance() && _impl_.rpm_demand_ != nullptr;
}
inline bool VehicleState_Engine::has_rpm_demand() const {
  return _internal_has_rpm_demand();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::_internal_rpm_demand() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.rpm_demand_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::rpm_demand() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Engine.rpm_demand)
  return _internal_rpm_demand();
}
inline void VehicleState_Engine::unsafe_arena_set_allocated_rpm_demand(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm_demand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rpm_demand_);
  }
  _impl_.rpm_demand_ = rpm_demand;
  if (rpm_demand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Engine.rpm_demand)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::release_rpm_demand() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.rpm_demand_;
  _impl_.rpm_demand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::unsafe_arena_release_rpm_demand() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Engine.rpm_demand)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.rpm_demand_;
  _impl_.rpm_demand_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::_internal_mutable_rpm_demand() {
  
  if (_impl_.rpm_demand_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.rpm_demand_ = p;
  }
  return _impl_.rpm_demand_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::mutable_rpm_demand() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_rpm_demand();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Engine.rpm_demand)
  return _msg;
}
inline void VehicleState_Engine::set_allocated_rpm_demand(::PROTOBUF_NAMESPACE_ID::DoubleValue* rpm_demand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rpm_demand_);
  }
  if (rpm_demand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpm_demand));
    if (message_arena != submessage_arena) {
      rpm_demand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpm_demand, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rpm_demand_ = rpm_demand;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Engine.rpm_demand)
}

// .google.protobuf.DoubleValue torque = 3;
inline bool VehicleState_Engine::_internal_has_torque() const {
  return this != internal_default_instance() && _impl_.torque_ != nullptr;
}
inline bool VehicleState_Engine::has_torque() const {
  return _internal_has_torque();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::_internal_torque() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.torque_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::torque() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Engine.torque)
  return _internal_torque();
}
inline void VehicleState_Engine::unsafe_arena_set_allocated_torque(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* torque) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.torque_);
  }
  _impl_.torque_ = torque;
  if (torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Engine.torque)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::release_torque() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.torque_;
  _impl_.torque_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::unsafe_arena_release_torque() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Engine.torque)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.torque_;
  _impl_.torque_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::_internal_mutable_torque() {
  
  if (_impl_.torque_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.torque_ = p;
  }
  return _impl_.torque_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::mutable_torque() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_torque();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Engine.torque)
  return _msg;
}
inline void VehicleState_Engine::set_allocated_torque(::PROTOBUF_NAMESPACE_ID::DoubleValue* torque) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.torque_);
  }
  if (torque) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(torque));
    if (message_arena != submessage_arena) {
      torque = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torque, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.torque_ = torque;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Engine.torque)
}

// .google.protobuf.DoubleValue torque_demand = 4;
inline bool VehicleState_Engine::_internal_has_torque_demand() const {
  return this != internal_default_instance() && _impl_.torque_demand_ != nullptr;
}
inline bool VehicleState_Engine::has_torque_demand() const {
  return _internal_has_torque_demand();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::_internal_torque_demand() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.torque_demand_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::torque_demand() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Engine.torque_demand)
  return _internal_torque_demand();
}
inline void VehicleState_Engine::unsafe_arena_set_allocated_torque_demand(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* torque_demand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.torque_demand_);
  }
  _impl_.torque_demand_ = torque_demand;
  if (torque_demand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Engine.torque_demand)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::release_torque_demand() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.torque_demand_;
  _impl_.torque_demand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::unsafe_arena_release_torque_demand() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Engine.torque_demand)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.torque_demand_;
  _impl_.torque_demand_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::_internal_mutable_torque_demand() {
  
  if (_impl_.torque_demand_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.torque_demand_ = p;
  }
  return _impl_.torque_demand_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::mutable_torque_demand() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_torque_demand();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Engine.torque_demand)
  return _msg;
}
inline void VehicleState_Engine::set_allocated_torque_demand(::PROTOBUF_NAMESPACE_ID::DoubleValue* torque_demand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.torque_demand_);
  }
  if (torque_demand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(torque_demand));
    if (message_arena != submessage_arena) {
      torque_demand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torque_demand, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.torque_demand_ = torque_demand;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Engine.torque_demand)
}

// .google.protobuf.DoubleValue load = 5;
inline bool VehicleState_Engine::_internal_has_load() const {
  return this != internal_default_instance() && _impl_.load_ != nullptr;
}
inline bool VehicleState_Engine::has_load() const {
  return _internal_has_load();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::_internal_load() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.load_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Engine::load() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Engine.load)
  return _internal_load();
}
inline void VehicleState_Engine::unsafe_arena_set_allocated_load(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* load) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.load_);
  }
  _impl_.load_ = load;
  if (load) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Engine.load)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::release_load() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.load_;
  _impl_.load_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::unsafe_arena_release_load() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Engine.load)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.load_;
  _impl_.load_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::_internal_mutable_load() {
  
  if (_impl_.load_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.load_ = p;
  }
  return _impl_.load_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Engine::mutable_load() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Engine.load)
  return _msg;
}
inline void VehicleState_Engine::set_allocated_load(::PROTOBUF_NAMESPACE_ID::DoubleValue* load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.load_);
  }
  if (load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load));
    if (message_arena != submessage_arena) {
      load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.load_ = load;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Engine.load)
}

// -------------------------------------------------------------------

// VehicleState_Battery

// .google.protobuf.DoubleValue voltage = 1;
inline bool VehicleState_Battery::_internal_has_voltage() const {
  return this != internal_default_instance() && _impl_.voltage_ != nullptr;
}
inline bool VehicleState_Battery::has_voltage() const {
  return _internal_has_voltage();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::_internal_voltage() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.voltage_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::voltage() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Battery.voltage)
  return _internal_voltage();
}
inline void VehicleState_Battery::unsafe_arena_set_allocated_voltage(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* voltage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voltage_);
  }
  _impl_.voltage_ = voltage;
  if (voltage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Battery.voltage)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::release_voltage() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.voltage_;
  _impl_.voltage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::unsafe_arena_release_voltage() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Battery.voltage)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.voltage_;
  _impl_.voltage_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::_internal_mutable_voltage() {
  
  if (_impl_.voltage_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.voltage_ = p;
  }
  return _impl_.voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::mutable_voltage() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_voltage();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Battery.voltage)
  return _msg;
}
inline void VehicleState_Battery::set_allocated_voltage(::PROTOBUF_NAMESPACE_ID::DoubleValue* voltage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voltage_);
  }
  if (voltage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltage));
    if (message_arena != submessage_arena) {
      voltage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.voltage_ = voltage;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Battery.voltage)
}

// .google.protobuf.DoubleValue current = 2;
inline bool VehicleState_Battery::_internal_has_current() const {
  return this != internal_default_instance() && _impl_.current_ != nullptr;
}
inline bool VehicleState_Battery::has_current() const {
  return _internal_has_current();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::_internal_current() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.current_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::current() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Battery.current)
  return _internal_current();
}
inline void VehicleState_Battery::unsafe_arena_set_allocated_current(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* current) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_);
  }
  _impl_.current_ = current;
  if (current) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Battery.current)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::release_current() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.current_;
  _impl_.current_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::unsafe_arena_release_current() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Battery.current)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.current_;
  _impl_.current_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::_internal_mutable_current() {
  
  if (_impl_.current_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.current_ = p;
  }
  return _impl_.current_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::mutable_current() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_current();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Battery.current)
  return _msg;
}
inline void VehicleState_Battery::set_allocated_current(::PROTOBUF_NAMESPACE_ID::DoubleValue* current) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_);
  }
  if (current) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current));
    if (message_arena != submessage_arena) {
      current = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_ = current;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Battery.current)
}

// .google.protobuf.DoubleValue power = 3;
inline bool VehicleState_Battery::_internal_has_power() const {
  return this != internal_default_instance() && _impl_.power_ != nullptr;
}
inline bool VehicleState_Battery::has_power() const {
  return _internal_has_power();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::_internal_power() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.power_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::power() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Battery.power)
  return _internal_power();
}
inline void VehicleState_Battery::unsafe_arena_set_allocated_power(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* power) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.power_);
  }
  _impl_.power_ = power;
  if (power) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Battery.power)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::release_power() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.power_;
  _impl_.power_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::unsafe_arena_release_power() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Battery.power)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.power_;
  _impl_.power_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::_internal_mutable_power() {
  
  if (_impl_.power_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.power_ = p;
  }
  return _impl_.power_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::mutable_power() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_power();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Battery.power)
  return _msg;
}
inline void VehicleState_Battery::set_allocated_power(::PROTOBUF_NAMESPACE_ID::DoubleValue* power) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.power_);
  }
  if (power) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power));
    if (message_arena != submessage_arena) {
      power = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.power_ = power;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Battery.power)
}

// .google.protobuf.DoubleValue temperature = 4;
inline bool VehicleState_Battery::_internal_has_temperature() const {
  return this != internal_default_instance() && _impl_.temperature_ != nullptr;
}
inline bool VehicleState_Battery::has_temperature() const {
  return _internal_has_temperature();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::_internal_temperature() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::temperature() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Battery.temperature)
  return _internal_temperature();
}
inline void VehicleState_Battery::unsafe_arena_set_allocated_temperature(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* temperature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.temperature_);
  }
  _impl_.temperature_ = temperature;
  if (temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Battery.temperature)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::release_temperature() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.temperature_;
  _impl_.temperature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::unsafe_arena_release_temperature() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Battery.temperature)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.temperature_;
  _impl_.temperature_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::_internal_mutable_temperature() {
  
  if (_impl_.temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.temperature_ = p;
  }
  return _impl_.temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::mutable_temperature() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_temperature();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Battery.temperature)
  return _msg;
}
inline void VehicleState_Battery::set_allocated_temperature(::PROTOBUF_NAMESPACE_ID::DoubleValue* temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.temperature_);
  }
  if (temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature));
    if (message_arena != submessage_arena) {
      temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Battery.temperature)
}

// .google.protobuf.DoubleValue soc = 5;
inline bool VehicleState_Battery::_internal_has_soc() const {
  return this != internal_default_instance() && _impl_.soc_ != nullptr;
}
inline bool VehicleState_Battery::has_soc() const {
  return _internal_has_soc();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::_internal_soc() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.soc_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::soc() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Battery.soc)
  return _internal_soc();
}
inline void VehicleState_Battery::unsafe_arena_set_allocated_soc(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* soc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.soc_);
  }
  _impl_.soc_ = soc;
  if (soc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Battery.soc)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::release_soc() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.soc_;
  _impl_.soc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::unsafe_arena_release_soc() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Battery.soc)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.soc_;
  _impl_.soc_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::_internal_mutable_soc() {
  
  if (_impl_.soc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.soc_ = p;
  }
  return _impl_.soc_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::mutable_soc() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_soc();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Battery.soc)
  return _msg;
}
inline void VehicleState_Battery::set_allocated_soc(::PROTOBUF_NAMESPACE_ID::DoubleValue* soc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.soc_);
  }
  if (soc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soc));
    if (message_arena != submessage_arena) {
      soc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.soc_ = soc;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Battery.soc)
}

// .google.protobuf.DoubleValue remain_capacity = 6;
inline bool VehicleState_Battery::_internal_has_remain_capacity() const {
  return this != internal_default_instance() && _impl_.remain_capacity_ != nullptr;
}
inline bool VehicleState_Battery::has_remain_capacity() const {
  return _internal_has_remain_capacity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::_internal_remain_capacity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.remain_capacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& VehicleState_Battery::remain_capacity() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.Battery.remain_capacity)
  return _internal_remain_capacity();
}
inline void VehicleState_Battery::unsafe_arena_set_allocated_remain_capacity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* remain_capacity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remain_capacity_);
  }
  _impl_.remain_capacity_ = remain_capacity;
  if (remain_capacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.Battery.remain_capacity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::release_remain_capacity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.remain_capacity_;
  _impl_.remain_capacity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::unsafe_arena_release_remain_capacity() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.Battery.remain_capacity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.remain_capacity_;
  _impl_.remain_capacity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::_internal_mutable_remain_capacity() {
  
  if (_impl_.remain_capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.remain_capacity_ = p;
  }
  return _impl_.remain_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* VehicleState_Battery::mutable_remain_capacity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_remain_capacity();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.Battery.remain_capacity)
  return _msg;
}
inline void VehicleState_Battery::set_allocated_remain_capacity(::PROTOBUF_NAMESPACE_ID::DoubleValue* remain_capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remain_capacity_);
  }
  if (remain_capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remain_capacity));
    if (message_arena != submessage_arena) {
      remain_capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remain_capacity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.remain_capacity_ = remain_capacity;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.Battery.remain_capacity)
}

// -------------------------------------------------------------------

// VehicleState

// .autonomous_proto.MessageInfo header = 1;
inline bool VehicleState::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool VehicleState::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& VehicleState::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& VehicleState::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.header)
  return _internal_header();
}
inline void VehicleState::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.header)
}
inline ::autonomous_proto::MessageInfo* VehicleState::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* VehicleState::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* VehicleState::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* VehicleState::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.header)
  return _msg;
}
inline void VehicleState::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.header)
}

// .autonomous_proto.VehicleState.Mode mode = 2;
inline bool VehicleState::_internal_has_mode() const {
  return this != internal_default_instance() && _impl_.mode_ != nullptr;
}
inline bool VehicleState::has_mode() const {
  return _internal_has_mode();
}
inline void VehicleState::clear_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
}
inline const ::autonomous_proto::VehicleState_Mode& VehicleState::_internal_mode() const {
  const ::autonomous_proto::VehicleState_Mode* p = _impl_.mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::VehicleState_Mode&>(
      ::autonomous_proto::_VehicleState_Mode_default_instance_);
}
inline const ::autonomous_proto::VehicleState_Mode& VehicleState::mode() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.mode)
  return _internal_mode();
}
inline void VehicleState::unsafe_arena_set_allocated_mode(
    ::autonomous_proto::VehicleState_Mode* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  _impl_.mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.mode)
}
inline ::autonomous_proto::VehicleState_Mode* VehicleState::release_mode() {
  
  ::autonomous_proto::VehicleState_Mode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::VehicleState_Mode* VehicleState::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.mode)
  
  ::autonomous_proto::VehicleState_Mode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
  return temp;
}
inline ::autonomous_proto::VehicleState_Mode* VehicleState::_internal_mutable_mode() {
  
  if (_impl_.mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::VehicleState_Mode>(GetArenaForAllocation());
    _impl_.mode_ = p;
  }
  return _impl_.mode_;
}
inline ::autonomous_proto::VehicleState_Mode* VehicleState::mutable_mode() {
  ::autonomous_proto::VehicleState_Mode* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.mode)
  return _msg;
}
inline void VehicleState::set_allocated_mode(::autonomous_proto::VehicleState_Mode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mode_;
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mode);
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.mode)
}

// .autonomous_proto.VehicleState.DriverOperation driver_operation = 3;
inline bool VehicleState::_internal_has_driver_operation() const {
  return this != internal_default_instance() && _impl_.driver_operation_ != nullptr;
}
inline bool VehicleState::has_driver_operation() const {
  return _internal_has_driver_operation();
}
inline void VehicleState::clear_driver_operation() {
  if (GetArenaForAllocation() == nullptr && _impl_.driver_operation_ != nullptr) {
    delete _impl_.driver_operation_;
  }
  _impl_.driver_operation_ = nullptr;
}
inline const ::autonomous_proto::VehicleState_DriverOperation& VehicleState::_internal_driver_operation() const {
  const ::autonomous_proto::VehicleState_DriverOperation* p = _impl_.driver_operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::VehicleState_DriverOperation&>(
      ::autonomous_proto::_VehicleState_DriverOperation_default_instance_);
}
inline const ::autonomous_proto::VehicleState_DriverOperation& VehicleState::driver_operation() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.driver_operation)
  return _internal_driver_operation();
}
inline void VehicleState::unsafe_arena_set_allocated_driver_operation(
    ::autonomous_proto::VehicleState_DriverOperation* driver_operation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.driver_operation_);
  }
  _impl_.driver_operation_ = driver_operation;
  if (driver_operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.driver_operation)
}
inline ::autonomous_proto::VehicleState_DriverOperation* VehicleState::release_driver_operation() {
  
  ::autonomous_proto::VehicleState_DriverOperation* temp = _impl_.driver_operation_;
  _impl_.driver_operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::VehicleState_DriverOperation* VehicleState::unsafe_arena_release_driver_operation() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.driver_operation)
  
  ::autonomous_proto::VehicleState_DriverOperation* temp = _impl_.driver_operation_;
  _impl_.driver_operation_ = nullptr;
  return temp;
}
inline ::autonomous_proto::VehicleState_DriverOperation* VehicleState::_internal_mutable_driver_operation() {
  
  if (_impl_.driver_operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::VehicleState_DriverOperation>(GetArenaForAllocation());
    _impl_.driver_operation_ = p;
  }
  return _impl_.driver_operation_;
}
inline ::autonomous_proto::VehicleState_DriverOperation* VehicleState::mutable_driver_operation() {
  ::autonomous_proto::VehicleState_DriverOperation* _msg = _internal_mutable_driver_operation();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.driver_operation)
  return _msg;
}
inline void VehicleState::set_allocated_driver_operation(::autonomous_proto::VehicleState_DriverOperation* driver_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.driver_operation_;
  }
  if (driver_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(driver_operation);
    if (message_arena != submessage_arena) {
      driver_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, driver_operation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.driver_operation_ = driver_operation;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.driver_operation)
}

// .google.protobuf.BoolValue park = 4;
inline bool VehicleState::_internal_has_park() const {
  return this != internal_default_instance() && _impl_.park_ != nullptr;
}
inline bool VehicleState::has_park() const {
  return _internal_has_park();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& VehicleState::_internal_park() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.park_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& VehicleState::park() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.park)
  return _internal_park();
}
inline void VehicleState::unsafe_arena_set_allocated_park(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* park) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.park_);
  }
  _impl_.park_ = park;
  if (park) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.VehicleState.park)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* VehicleState::release_park() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.park_;
  _impl_.park_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* VehicleState::unsafe_arena_release_park() {
  // @@protoc_insertion_point(field_release:autonomous_proto.VehicleState.park)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.park_;
  _impl_.park_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* VehicleState::_internal_mutable_park() {
  
  if (_impl_.park_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.park_ = p;
  }
  return _impl_.park_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* VehicleState::mutable_park() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_park();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.park)
  return _msg;
}
inline void VehicleState::set_allocated_park(::PROTOBUF_NAMESPACE_ID::BoolValue* park) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.park_);
  }
  if (park) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(park));
    if (message_arena != submessage_arena) {
      park = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, park, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.park_ = park;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.VehicleState.park)
}

// repeated double angle = 5;
inline int VehicleState::_internal_angle_size() const {
  return _impl_.angle_.size();
}
inline int VehicleState::angle_size() const {
  return _internal_angle_size();
}
inline void VehicleState::clear_angle() {
  _impl_.angle_.Clear();
}
inline double VehicleState::_internal_angle(int index) const {
  return _impl_.angle_.Get(index);
}
inline double VehicleState::angle(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.angle)
  return _internal_angle(index);
}
inline void VehicleState::set_angle(int index, double value) {
  _impl_.angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.angle)
}
inline void VehicleState::_internal_add_angle(double value) {
  _impl_.angle_.Add(value);
}
inline void VehicleState::add_angle(double value) {
  _internal_add_angle(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.angle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_angle() const {
  return _impl_.angle_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::angle() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.angle)
  return _internal_angle();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_angle() {
  return &_impl_.angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_angle() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.angle)
  return _internal_mutable_angle();
}

// repeated double angle_velocity = 6;
inline int VehicleState::_internal_angle_velocity_size() const {
  return _impl_.angle_velocity_.size();
}
inline int VehicleState::angle_velocity_size() const {
  return _internal_angle_velocity_size();
}
inline void VehicleState::clear_angle_velocity() {
  _impl_.angle_velocity_.Clear();
}
inline double VehicleState::_internal_angle_velocity(int index) const {
  return _impl_.angle_velocity_.Get(index);
}
inline double VehicleState::angle_velocity(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.angle_velocity)
  return _internal_angle_velocity(index);
}
inline void VehicleState::set_angle_velocity(int index, double value) {
  _impl_.angle_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.angle_velocity)
}
inline void VehicleState::_internal_add_angle_velocity(double value) {
  _impl_.angle_velocity_.Add(value);
}
inline void VehicleState::add_angle_velocity(double value) {
  _internal_add_angle_velocity(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.angle_velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_angle_velocity() const {
  return _impl_.angle_velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::angle_velocity() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.angle_velocity)
  return _internal_angle_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_angle_velocity() {
  return &_impl_.angle_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_angle_velocity() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.angle_velocity)
  return _internal_mutable_angle_velocity();
}

// repeated double v = 7;
inline int VehicleState::_internal_v_size() const {
  return _impl_.v_.size();
}
inline int VehicleState::v_size() const {
  return _internal_v_size();
}
inline void VehicleState::clear_v() {
  _impl_.v_.Clear();
}
inline double VehicleState::_internal_v(int index) const {
  return _impl_.v_.Get(index);
}
inline double VehicleState::v(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.v)
  return _internal_v(index);
}
inline void VehicleState::set_v(int index, double value) {
  _impl_.v_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.v)
}
inline void VehicleState::_internal_add_v(double value) {
  _impl_.v_.Add(value);
}
inline void VehicleState::add_v(double value) {
  _internal_add_v(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.v)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_v() const {
  return _impl_.v_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::v() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.v)
  return _internal_v();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_v() {
  return &_impl_.v_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.v)
  return _internal_mutable_v();
}

// repeated double acc = 8;
inline int VehicleState::_internal_acc_size() const {
  return _impl_.acc_.size();
}
inline int VehicleState::acc_size() const {
  return _internal_acc_size();
}
inline void VehicleState::clear_acc() {
  _impl_.acc_.Clear();
}
inline double VehicleState::_internal_acc(int index) const {
  return _impl_.acc_.Get(index);
}
inline double VehicleState::acc(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.acc)
  return _internal_acc(index);
}
inline void VehicleState::set_acc(int index, double value) {
  _impl_.acc_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.acc)
}
inline void VehicleState::_internal_add_acc(double value) {
  _impl_.acc_.Add(value);
}
inline void VehicleState::add_acc(double value) {
  _internal_add_acc(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.acc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_acc() const {
  return _impl_.acc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::acc() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.acc)
  return _internal_acc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_acc() {
  return &_impl_.acc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_acc() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.acc)
  return _internal_mutable_acc();
}

// repeated double throttle = 9;
inline int VehicleState::_internal_throttle_size() const {
  return _impl_.throttle_.size();
}
inline int VehicleState::throttle_size() const {
  return _internal_throttle_size();
}
inline void VehicleState::clear_throttle() {
  _impl_.throttle_.Clear();
}
inline double VehicleState::_internal_throttle(int index) const {
  return _impl_.throttle_.Get(index);
}
inline double VehicleState::throttle(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.throttle)
  return _internal_throttle(index);
}
inline void VehicleState::set_throttle(int index, double value) {
  _impl_.throttle_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.throttle)
}
inline void VehicleState::_internal_add_throttle(double value) {
  _impl_.throttle_.Add(value);
}
inline void VehicleState::add_throttle(double value) {
  _internal_add_throttle(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.throttle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_throttle() const {
  return _impl_.throttle_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::throttle() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.throttle)
  return _internal_throttle();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_throttle() {
  return &_impl_.throttle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_throttle() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.throttle)
  return _internal_mutable_throttle();
}

// repeated double brake = 10;
inline int VehicleState::_internal_brake_size() const {
  return _impl_.brake_.size();
}
inline int VehicleState::brake_size() const {
  return _internal_brake_size();
}
inline void VehicleState::clear_brake() {
  _impl_.brake_.Clear();
}
inline double VehicleState::_internal_brake(int index) const {
  return _impl_.brake_.Get(index);
}
inline double VehicleState::brake(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.brake)
  return _internal_brake(index);
}
inline void VehicleState::set_brake(int index, double value) {
  _impl_.brake_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.brake)
}
inline void VehicleState::_internal_add_brake(double value) {
  _impl_.brake_.Add(value);
}
inline void VehicleState::add_brake(double value) {
  _internal_add_brake(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.brake)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_brake() const {
  return _impl_.brake_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::brake() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.brake)
  return _internal_brake();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_brake() {
  return &_impl_.brake_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_brake() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.brake)
  return _internal_mutable_brake();
}

// repeated string errors = 11;
inline int VehicleState::_internal_errors_size() const {
  return _impl_.errors_.size();
}
inline int VehicleState::errors_size() const {
  return _internal_errors_size();
}
inline void VehicleState::clear_errors() {
  _impl_.errors_.Clear();
}
inline std::string* VehicleState::add_errors() {
  std::string* _s = _internal_add_errors();
  // @@protoc_insertion_point(field_add_mutable:autonomous_proto.VehicleState.errors)
  return _s;
}
inline const std::string& VehicleState::_internal_errors(int index) const {
  return _impl_.errors_.Get(index);
}
inline const std::string& VehicleState::errors(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.errors)
  return _internal_errors(index);
}
inline std::string* VehicleState::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.errors)
  return _impl_.errors_.Mutable(index);
}
inline void VehicleState::set_errors(int index, const std::string& value) {
  _impl_.errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.errors)
}
inline void VehicleState::set_errors(int index, std::string&& value) {
  _impl_.errors_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.errors)
}
inline void VehicleState::set_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autonomous_proto.VehicleState.errors)
}
inline void VehicleState::set_errors(int index, const char* value, size_t size) {
  _impl_.errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autonomous_proto.VehicleState.errors)
}
inline std::string* VehicleState::_internal_add_errors() {
  return _impl_.errors_.Add();
}
inline void VehicleState::add_errors(const std::string& value) {
  _impl_.errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.errors)
}
inline void VehicleState::add_errors(std::string&& value) {
  _impl_.errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.errors)
}
inline void VehicleState::add_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autonomous_proto.VehicleState.errors)
}
inline void VehicleState::add_errors(const char* value, size_t size) {
  _impl_.errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autonomous_proto.VehicleState.errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VehicleState::errors() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.errors)
  return _impl_.errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VehicleState::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.errors)
  return &_impl_.errors_;
}

// repeated .autonomous_proto.VehicleState.Gear gear = 12;
inline int VehicleState::_internal_gear_size() const {
  return _impl_.gear_.size();
}
inline int VehicleState::gear_size() const {
  return _internal_gear_size();
}
inline void VehicleState::clear_gear() {
  _impl_.gear_.Clear();
}
inline ::autonomous_proto::VehicleState_Gear* VehicleState::mutable_gear(int index) {
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.gear)
  return _impl_.gear_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Gear >*
VehicleState::mutable_gear() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.gear)
  return &_impl_.gear_;
}
inline const ::autonomous_proto::VehicleState_Gear& VehicleState::_internal_gear(int index) const {
  return _impl_.gear_.Get(index);
}
inline const ::autonomous_proto::VehicleState_Gear& VehicleState::gear(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.gear)
  return _internal_gear(index);
}
inline ::autonomous_proto::VehicleState_Gear* VehicleState::_internal_add_gear() {
  return _impl_.gear_.Add();
}
inline ::autonomous_proto::VehicleState_Gear* VehicleState::add_gear() {
  ::autonomous_proto::VehicleState_Gear* _add = _internal_add_gear();
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.gear)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Gear >&
VehicleState::gear() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.gear)
  return _impl_.gear_;
}

// repeated .autonomous_proto.VehicleState.Engine engine = 13;
inline int VehicleState::_internal_engine_size() const {
  return _impl_.engine_.size();
}
inline int VehicleState::engine_size() const {
  return _internal_engine_size();
}
inline void VehicleState::clear_engine() {
  _impl_.engine_.Clear();
}
inline ::autonomous_proto::VehicleState_Engine* VehicleState::mutable_engine(int index) {
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.engine)
  return _impl_.engine_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Engine >*
VehicleState::mutable_engine() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.engine)
  return &_impl_.engine_;
}
inline const ::autonomous_proto::VehicleState_Engine& VehicleState::_internal_engine(int index) const {
  return _impl_.engine_.Get(index);
}
inline const ::autonomous_proto::VehicleState_Engine& VehicleState::engine(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.engine)
  return _internal_engine(index);
}
inline ::autonomous_proto::VehicleState_Engine* VehicleState::_internal_add_engine() {
  return _impl_.engine_.Add();
}
inline ::autonomous_proto::VehicleState_Engine* VehicleState::add_engine() {
  ::autonomous_proto::VehicleState_Engine* _add = _internal_add_engine();
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.engine)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Engine >&
VehicleState::engine() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.engine)
  return _impl_.engine_;
}

// repeated .autonomous_proto.VehicleState.Battery battery = 14;
inline int VehicleState::_internal_battery_size() const {
  return _impl_.battery_.size();
}
inline int VehicleState::battery_size() const {
  return _internal_battery_size();
}
inline void VehicleState::clear_battery() {
  _impl_.battery_.Clear();
}
inline ::autonomous_proto::VehicleState_Battery* VehicleState::mutable_battery(int index) {
  // @@protoc_insertion_point(field_mutable:autonomous_proto.VehicleState.battery)
  return _impl_.battery_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Battery >*
VehicleState::mutable_battery() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.battery)
  return &_impl_.battery_;
}
inline const ::autonomous_proto::VehicleState_Battery& VehicleState::_internal_battery(int index) const {
  return _impl_.battery_.Get(index);
}
inline const ::autonomous_proto::VehicleState_Battery& VehicleState::battery(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.battery)
  return _internal_battery(index);
}
inline ::autonomous_proto::VehicleState_Battery* VehicleState::_internal_add_battery() {
  return _impl_.battery_.Add();
}
inline ::autonomous_proto::VehicleState_Battery* VehicleState::add_battery() {
  ::autonomous_proto::VehicleState_Battery* _add = _internal_add_battery();
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.battery)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::VehicleState_Battery >&
VehicleState::battery() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.battery)
  return _impl_.battery_;
}

// repeated double steer = 15;
inline int VehicleState::_internal_steer_size() const {
  return _impl_.steer_.size();
}
inline int VehicleState::steer_size() const {
  return _internal_steer_size();
}
inline void VehicleState::clear_steer() {
  _impl_.steer_.Clear();
}
inline double VehicleState::_internal_steer(int index) const {
  return _impl_.steer_.Get(index);
}
inline double VehicleState::steer(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.steer)
  return _internal_steer(index);
}
inline void VehicleState::set_steer(int index, double value) {
  _impl_.steer_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.steer)
}
inline void VehicleState::_internal_add_steer(double value) {
  _impl_.steer_.Add(value);
}
inline void VehicleState::add_steer(double value) {
  _internal_add_steer(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.steer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_steer() const {
  return _impl_.steer_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::steer() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.steer)
  return _internal_steer();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_steer() {
  return &_impl_.steer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_steer() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.steer)
  return _internal_mutable_steer();
}

// repeated double steer_speed = 16;
inline int VehicleState::_internal_steer_speed_size() const {
  return _impl_.steer_speed_.size();
}
inline int VehicleState::steer_speed_size() const {
  return _internal_steer_speed_size();
}
inline void VehicleState::clear_steer_speed() {
  _impl_.steer_speed_.Clear();
}
inline double VehicleState::_internal_steer_speed(int index) const {
  return _impl_.steer_speed_.Get(index);
}
inline double VehicleState::steer_speed(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.steer_speed)
  return _internal_steer_speed(index);
}
inline void VehicleState::set_steer_speed(int index, double value) {
  _impl_.steer_speed_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.steer_speed)
}
inline void VehicleState::_internal_add_steer_speed(double value) {
  _impl_.steer_speed_.Add(value);
}
inline void VehicleState::add_steer_speed(double value) {
  _internal_add_steer_speed(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.steer_speed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_steer_speed() const {
  return _impl_.steer_speed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::steer_speed() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.steer_speed)
  return _internal_steer_speed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_steer_speed() {
  return &_impl_.steer_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_steer_speed() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.steer_speed)
  return _internal_mutable_steer_speed();
}

// repeated double steer_torque = 17;
inline int VehicleState::_internal_steer_torque_size() const {
  return _impl_.steer_torque_.size();
}
inline int VehicleState::steer_torque_size() const {
  return _internal_steer_torque_size();
}
inline void VehicleState::clear_steer_torque() {
  _impl_.steer_torque_.Clear();
}
inline double VehicleState::_internal_steer_torque(int index) const {
  return _impl_.steer_torque_.Get(index);
}
inline double VehicleState::steer_torque(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.VehicleState.steer_torque)
  return _internal_steer_torque(index);
}
inline void VehicleState::set_steer_torque(int index, double value) {
  _impl_.steer_torque_.Set(index, value);
  // @@protoc_insertion_point(field_set:autonomous_proto.VehicleState.steer_torque)
}
inline void VehicleState::_internal_add_steer_torque(double value) {
  _impl_.steer_torque_.Add(value);
}
inline void VehicleState::add_steer_torque(double value) {
  _internal_add_steer_torque(value);
  // @@protoc_insertion_point(field_add:autonomous_proto.VehicleState.steer_torque)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::_internal_steer_torque() const {
  return _impl_.steer_torque_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleState::steer_torque() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.VehicleState.steer_torque)
  return _internal_steer_torque();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::_internal_mutable_steer_torque() {
  return &_impl_.steer_torque_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleState::mutable_steer_torque() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.VehicleState.steer_torque)
  return _internal_mutable_steer_torque();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autonomous_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autonomous_proto::VehicleState_Mode_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autonomous_proto::VehicleState_Mode_Enum>() {
  return ::autonomous_proto::VehicleState_Mode_Enum_descriptor();
}
template <> struct is_proto_enum< ::autonomous_proto::VehicleState_Gear_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autonomous_proto::VehicleState_Gear_Mode>() {
  return ::autonomous_proto::VehicleState_Gear_Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_5fstate_2eproto
