// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_state.proto

#include "vehicle_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autonomous_proto {
PROTOBUF_CONSTEXPR VehicleState_Mode::VehicleState_Mode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vehicle_)*/0
  , /*decltype(_impl_.steer_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.gear_)*/0
  , /*decltype(_impl_.throttle_)*/0
  , /*decltype(_impl_.brake_)*/0
  , /*decltype(_impl_.park_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleState_ModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleState_ModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleState_ModeDefaultTypeInternal() {}
  union {
    VehicleState_Mode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleState_ModeDefaultTypeInternal _VehicleState_Mode_default_instance_;
PROTOBUF_CONSTEXPR VehicleState_Gear::VehicleState_Gear(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.selection_)*/nullptr
  , /*decltype(_impl_.selection_ratio_)*/nullptr
  , /*decltype(_impl_.shifting_)*/nullptr
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleState_GearDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleState_GearDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleState_GearDefaultTypeInternal() {}
  union {
    VehicleState_Gear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleState_GearDefaultTypeInternal _VehicleState_Gear_default_instance_;
PROTOBUF_CONSTEXPR VehicleState_DriverOperation::VehicleState_DriverOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.steer_)*/nullptr
  , /*decltype(_impl_.steer_torque_)*/nullptr
  , /*decltype(_impl_.steer_speed_)*/nullptr
  , /*decltype(_impl_.v_)*/nullptr
  , /*decltype(_impl_.acc_)*/nullptr
  , /*decltype(_impl_.throttle_)*/nullptr
  , /*decltype(_impl_.brake_)*/nullptr
  , /*decltype(_impl_.gear_)*/nullptr
  , /*decltype(_impl_.throttle_pedal_)*/nullptr
  , /*decltype(_impl_.brake_pedal_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleState_DriverOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleState_DriverOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleState_DriverOperationDefaultTypeInternal() {}
  union {
    VehicleState_DriverOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleState_DriverOperationDefaultTypeInternal _VehicleState_DriverOperation_default_instance_;
PROTOBUF_CONSTEXPR VehicleState_Engine::VehicleState_Engine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpm_)*/nullptr
  , /*decltype(_impl_.rpm_demand_)*/nullptr
  , /*decltype(_impl_.torque_)*/nullptr
  , /*decltype(_impl_.torque_demand_)*/nullptr
  , /*decltype(_impl_.load_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleState_EngineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleState_EngineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleState_EngineDefaultTypeInternal() {}
  union {
    VehicleState_Engine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleState_EngineDefaultTypeInternal _VehicleState_Engine_default_instance_;
PROTOBUF_CONSTEXPR VehicleState_Battery::VehicleState_Battery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voltage_)*/nullptr
  , /*decltype(_impl_.current_)*/nullptr
  , /*decltype(_impl_.power_)*/nullptr
  , /*decltype(_impl_.temperature_)*/nullptr
  , /*decltype(_impl_.soc_)*/nullptr
  , /*decltype(_impl_.remain_capacity_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleState_BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleState_BatteryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleState_BatteryDefaultTypeInternal() {}
  union {
    VehicleState_Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleState_BatteryDefaultTypeInternal _VehicleState_Battery_default_instance_;
PROTOBUF_CONSTEXPR VehicleState::VehicleState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.angle_)*/{}
  , /*decltype(_impl_.angle_velocity_)*/{}
  , /*decltype(_impl_.v_)*/{}
  , /*decltype(_impl_.acc_)*/{}
  , /*decltype(_impl_.throttle_)*/{}
  , /*decltype(_impl_.brake_)*/{}
  , /*decltype(_impl_.errors_)*/{}
  , /*decltype(_impl_.gear_)*/{}
  , /*decltype(_impl_.engine_)*/{}
  , /*decltype(_impl_.battery_)*/{}
  , /*decltype(_impl_.steer_)*/{}
  , /*decltype(_impl_.steer_speed_)*/{}
  , /*decltype(_impl_.steer_torque_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.mode_)*/nullptr
  , /*decltype(_impl_.driver_operation_)*/nullptr
  , /*decltype(_impl_.park_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleStateDefaultTypeInternal() {}
  union {
    VehicleState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
}  // namespace autonomous_proto
static ::_pb::Metadata file_level_metadata_vehicle_5fstate_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_vehicle_5fstate_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fstate_2eproto = nullptr;

const uint32_t TableStruct_vehicle_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Mode, _impl_.vehicle_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Mode, _impl_.steer_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Mode, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Mode, _impl_.gear_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Mode, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Mode, _impl_.brake_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Mode, _impl_.park_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Gear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Gear, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Gear, _impl_.selection_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Gear, _impl_.selection_ratio_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Gear, _impl_.shifting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.steer_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.steer_torque_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.steer_speed_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.acc_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.brake_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.gear_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.throttle_pedal_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_DriverOperation, _impl_.brake_pedal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Engine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Engine, _impl_.rpm_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Engine, _impl_.rpm_demand_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Engine, _impl_.torque_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Engine, _impl_.torque_demand_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Engine, _impl_.load_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Battery, _impl_.voltage_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Battery, _impl_.current_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Battery, _impl_.power_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Battery, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Battery, _impl_.soc_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState_Battery, _impl_.remain_capacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.driver_operation_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.park_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.angle_velocity_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.acc_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.brake_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.errors_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.gear_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.engine_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.battery_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.steer_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.steer_speed_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::VehicleState, _impl_.steer_torque_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autonomous_proto::VehicleState_Mode)},
  { 13, -1, -1, sizeof(::autonomous_proto::VehicleState_Gear)},
  { 23, -1, -1, sizeof(::autonomous_proto::VehicleState_DriverOperation)},
  { 39, -1, -1, sizeof(::autonomous_proto::VehicleState_Engine)},
  { 50, -1, -1, sizeof(::autonomous_proto::VehicleState_Battery)},
  { 62, -1, -1, sizeof(::autonomous_proto::VehicleState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::autonomous_proto::_VehicleState_Mode_default_instance_._instance,
  &::autonomous_proto::_VehicleState_Gear_default_instance_._instance,
  &::autonomous_proto::_VehicleState_DriverOperation_default_instance_._instance,
  &::autonomous_proto::_VehicleState_Engine_default_instance_._instance,
  &::autonomous_proto::_VehicleState_Battery_default_instance_._instance,
  &::autonomous_proto::_VehicleState_default_instance_._instance,
};

const char descriptor_table_protodef_vehicle_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023vehicle_state.proto\022\020autonomous_proto\032"
  "\036google/protobuf/wrappers.proto\032\022message"
  "_info.proto\"\214\023\n\014VehicleState\022-\n\006header\030\001"
  " \001(\0132\035.autonomous_proto.MessageInfo\0221\n\004m"
  "ode\030\002 \001(\0132#.autonomous_proto.VehicleStat"
  "e.Mode\022H\n\020driver_operation\030\003 \001(\0132..auton"
  "omous_proto.VehicleState.DriverOperation"
  "\022(\n\004park\030\004 \001(\0132\032.google.protobuf.BoolVal"
  "ue\022\r\n\005angle\030\005 \003(\001\022\026\n\016angle_velocity\030\006 \003("
  "\001\022\t\n\001v\030\007 \003(\001\022\013\n\003acc\030\010 \003(\001\022\020\n\010throttle\030\t "
  "\003(\001\022\r\n\005brake\030\n \003(\001\022\016\n\006errors\030\013 \003(\t\0221\n\004ge"
  "ar\030\014 \003(\0132#.autonomous_proto.VehicleState"
  ".Gear\0225\n\006engine\030\r \003(\0132%.autonomous_proto"
  ".VehicleState.Engine\0227\n\007battery\030\016 \003(\0132&."
  "autonomous_proto.VehicleState.Battery\022\r\n"
  "\005steer\030\017 \003(\001\022\023\n\013steer_speed\030\020 \003(\001\022\024\n\014ste"
  "er_torque\030\021 \003(\001\032\200\004\n\004Mode\0229\n\007vehicle\030\001 \001("
  "\0162(.autonomous_proto.VehicleState.Mode.E"
  "num\0227\n\005steer\030\002 \001(\0162(.autonomous_proto.Ve"
  "hicleState.Mode.Enum\0227\n\005speed\030\003 \001(\0162(.au"
  "tonomous_proto.VehicleState.Mode.Enum\0226\n"
  "\004gear\030\004 \001(\0162(.autonomous_proto.VehicleSt"
  "ate.Mode.Enum\022:\n\010throttle\030\005 \001(\0162(.autono"
  "mous_proto.VehicleState.Mode.Enum\0227\n\005bra"
  "ke\030\006 \001(\0162(.autonomous_proto.VehicleState"
  ".Mode.Enum\0226\n\004park\030\007 \001(\0162(.autonomous_pr"
  "oto.VehicleState.Mode.Enum\"f\n\004Enum\022\013\n\007un"
  "known\020\000\022\016\n\nautonomous\020\001\022\022\n\016manual_drivin"
  "g\020\002\022\025\n\021remote_controller\020\003\022\026\n\tundefined\020"
  "\377\377\377\377\377\377\377\377\377\001\032\275\002\n\004Gear\0226\n\004mode\030\001 \001(\0162(.auto"
  "nomous_proto.VehicleState.Gear.Mode\022.\n\ts"
  "election\030\002 \001(\0132\033.google.protobuf.Int32Va"
  "lue\0225\n\017selection_ratio\030\003 \001(\0132\034.google.pr"
  "otobuf.DoubleValue\022,\n\010shifting\030\004 \001(\0132\032.g"
  "oogle.protobuf.BoolValue\"h\n\004Mode\022\013\n\007unkn"
  "own\020\000\022\005\n\001N\020\001\022\005\n\001D\020\002\022\005\n\001R\020\003\022\005\n\001P\020\004\022\010\n\004spi"
  "n\020\005\022\n\n\006r_spin\020\006\022\t\n\004halt\020\200\010\022\026\n\tundefined\020"
  "\377\377\377\377\377\377\377\377\377\001\032\362\003\n\017DriverOperation\022+\n\005steer\030"
  "\001 \001(\0132\034.google.protobuf.DoubleValue\0222\n\014s"
  "teer_torque\030\002 \001(\0132\034.google.protobuf.Doub"
  "leValue\0221\n\013steer_speed\030\003 \001(\0132\034.google.pr"
  "otobuf.DoubleValue\022\'\n\001v\030\004 \001(\0132\034.google.p"
  "rotobuf.DoubleValue\022)\n\003acc\030\005 \001(\0132\034.googl"
  "e.protobuf.DoubleValue\022.\n\010throttle\030\006 \001(\013"
  "2\034.google.protobuf.DoubleValue\022+\n\005brake\030"
  "\007 \001(\0132\034.google.protobuf.DoubleValue\0221\n\004g"
  "ear\030\010 \001(\0132#.autonomous_proto.VehicleStat"
  "e.Gear\0224\n\016throttle_pedal\030\t \001(\0132\034.google."
  "protobuf.DoubleValue\0221\n\013brake_pedal\030\n \001("
  "\0132\034.google.protobuf.DoubleValue\032\364\001\n\006Engi"
  "ne\022)\n\003rpm\030\001 \001(\0132\034.google.protobuf.Double"
  "Value\0220\n\nrpm_demand\030\002 \001(\0132\034.google.proto"
  "buf.DoubleValue\022,\n\006torque\030\003 \001(\0132\034.google"
  ".protobuf.DoubleValue\0223\n\rtorque_demand\030\004"
  " \001(\0132\034.google.protobuf.DoubleValue\022*\n\004lo"
  "ad\030\005 \001(\0132\034.google.protobuf.DoubleValue\032\251"
  "\002\n\007Battery\022-\n\007voltage\030\001 \001(\0132\034.google.pro"
  "tobuf.DoubleValue\022-\n\007current\030\002 \001(\0132\034.goo"
  "gle.protobuf.DoubleValue\022+\n\005power\030\003 \001(\0132"
  "\034.google.protobuf.DoubleValue\0221\n\013tempera"
  "ture\030\004 \001(\0132\034.google.protobuf.DoubleValue"
  "\022)\n\003soc\030\005 \001(\0132\034.google.protobuf.DoubleVa"
  "lue\0225\n\017remain_capacity\030\006 \001(\0132\034.google.pr"
  "otobuf.DoubleValueb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_vehicle_5fstate_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_message_5finfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_vehicle_5fstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vehicle_5fstate_2eproto = {
    false, false, 2546, descriptor_table_protodef_vehicle_5fstate_2eproto,
    "vehicle_state.proto",
    &descriptor_table_vehicle_5fstate_2eproto_once, descriptor_table_vehicle_5fstate_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_vehicle_5fstate_2eproto::offsets,
    file_level_metadata_vehicle_5fstate_2eproto, file_level_enum_descriptors_vehicle_5fstate_2eproto,
    file_level_service_descriptors_vehicle_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vehicle_5fstate_2eproto_getter() {
  return &descriptor_table_vehicle_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vehicle_5fstate_2eproto(&descriptor_table_vehicle_5fstate_2eproto);
namespace autonomous_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleState_Mode_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5fstate_2eproto);
  return file_level_enum_descriptors_vehicle_5fstate_2eproto[0];
}
bool VehicleState_Mode_Enum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehicleState_Mode_Enum VehicleState_Mode::unknown;
constexpr VehicleState_Mode_Enum VehicleState_Mode::autonomous;
constexpr VehicleState_Mode_Enum VehicleState_Mode::manual_driving;
constexpr VehicleState_Mode_Enum VehicleState_Mode::remote_controller;
constexpr VehicleState_Mode_Enum VehicleState_Mode::undefined;
constexpr VehicleState_Mode_Enum VehicleState_Mode::Enum_MIN;
constexpr VehicleState_Mode_Enum VehicleState_Mode::Enum_MAX;
constexpr int VehicleState_Mode::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleState_Gear_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5fstate_2eproto);
  return file_level_enum_descriptors_vehicle_5fstate_2eproto[1];
}
bool VehicleState_Gear_Mode_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 1024:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehicleState_Gear_Mode VehicleState_Gear::unknown;
constexpr VehicleState_Gear_Mode VehicleState_Gear::N;
constexpr VehicleState_Gear_Mode VehicleState_Gear::D;
constexpr VehicleState_Gear_Mode VehicleState_Gear::R;
constexpr VehicleState_Gear_Mode VehicleState_Gear::P;
constexpr VehicleState_Gear_Mode VehicleState_Gear::spin;
constexpr VehicleState_Gear_Mode VehicleState_Gear::r_spin;
constexpr VehicleState_Gear_Mode VehicleState_Gear::halt;
constexpr VehicleState_Gear_Mode VehicleState_Gear::undefined;
constexpr VehicleState_Gear_Mode VehicleState_Gear::Mode_MIN;
constexpr VehicleState_Gear_Mode VehicleState_Gear::Mode_MAX;
constexpr int VehicleState_Gear::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class VehicleState_Mode::_Internal {
 public:
};

VehicleState_Mode::VehicleState_Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.VehicleState.Mode)
}
VehicleState_Mode::VehicleState_Mode(const VehicleState_Mode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleState_Mode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vehicle_){}
    , decltype(_impl_.steer_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.gear_){}
    , decltype(_impl_.throttle_){}
    , decltype(_impl_.brake_){}
    , decltype(_impl_.park_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_, &from._impl_.vehicle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.park_) -
    reinterpret_cast<char*>(&_impl_.vehicle_)) + sizeof(_impl_.park_));
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.VehicleState.Mode)
}

inline void VehicleState_Mode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vehicle_){0}
    , decltype(_impl_.steer_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.gear_){0}
    , decltype(_impl_.throttle_){0}
    , decltype(_impl_.brake_){0}
    , decltype(_impl_.park_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleState_Mode::~VehicleState_Mode() {
  // @@protoc_insertion_point(destructor:autonomous_proto.VehicleState.Mode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleState_Mode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleState_Mode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleState_Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.VehicleState.Mode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vehicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.park_) -
      reinterpret_cast<char*>(&_impl_.vehicle_)) + sizeof(_impl_.park_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleState_Mode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autonomous_proto.VehicleState.Mode.Enum vehicle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehicle(static_cast<::autonomous_proto::VehicleState_Mode_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.Mode.Enum steer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_steer(static_cast<::autonomous_proto::VehicleState_Mode_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.Mode.Enum speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_speed(static_cast<::autonomous_proto::VehicleState_Mode_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.Mode.Enum gear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gear(static_cast<::autonomous_proto::VehicleState_Mode_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.Mode.Enum throttle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_throttle(static_cast<::autonomous_proto::VehicleState_Mode_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.Mode.Enum brake = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_brake(static_cast<::autonomous_proto::VehicleState_Mode_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.Mode.Enum park = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_park(static_cast<::autonomous_proto::VehicleState_Mode_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleState_Mode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.VehicleState.Mode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autonomous_proto.VehicleState.Mode.Enum vehicle = 1;
  if (this->_internal_vehicle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_vehicle(), target);
  }

  // .autonomous_proto.VehicleState.Mode.Enum steer = 2;
  if (this->_internal_steer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_steer(), target);
  }

  // .autonomous_proto.VehicleState.Mode.Enum speed = 3;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_speed(), target);
  }

  // .autonomous_proto.VehicleState.Mode.Enum gear = 4;
  if (this->_internal_gear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_gear(), target);
  }

  // .autonomous_proto.VehicleState.Mode.Enum throttle = 5;
  if (this->_internal_throttle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_throttle(), target);
  }

  // .autonomous_proto.VehicleState.Mode.Enum brake = 6;
  if (this->_internal_brake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_brake(), target);
  }

  // .autonomous_proto.VehicleState.Mode.Enum park = 7;
  if (this->_internal_park() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_park(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.VehicleState.Mode)
  return target;
}

size_t VehicleState_Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.VehicleState.Mode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autonomous_proto.VehicleState.Mode.Enum vehicle = 1;
  if (this->_internal_vehicle() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vehicle());
  }

  // .autonomous_proto.VehicleState.Mode.Enum steer = 2;
  if (this->_internal_steer() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_steer());
  }

  // .autonomous_proto.VehicleState.Mode.Enum speed = 3;
  if (this->_internal_speed() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_speed());
  }

  // .autonomous_proto.VehicleState.Mode.Enum gear = 4;
  if (this->_internal_gear() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gear());
  }

  // .autonomous_proto.VehicleState.Mode.Enum throttle = 5;
  if (this->_internal_throttle() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_throttle());
  }

  // .autonomous_proto.VehicleState.Mode.Enum brake = 6;
  if (this->_internal_brake() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_brake());
  }

  // .autonomous_proto.VehicleState.Mode.Enum park = 7;
  if (this->_internal_park() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_park());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleState_Mode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleState_Mode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleState_Mode::GetClassData() const { return &_class_data_; }


void VehicleState_Mode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleState_Mode*>(&to_msg);
  auto& from = static_cast<const VehicleState_Mode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.VehicleState.Mode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vehicle() != 0) {
    _this->_internal_set_vehicle(from._internal_vehicle());
  }
  if (from._internal_steer() != 0) {
    _this->_internal_set_steer(from._internal_steer());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_gear() != 0) {
    _this->_internal_set_gear(from._internal_gear());
  }
  if (from._internal_throttle() != 0) {
    _this->_internal_set_throttle(from._internal_throttle());
  }
  if (from._internal_brake() != 0) {
    _this->_internal_set_brake(from._internal_brake());
  }
  if (from._internal_park() != 0) {
    _this->_internal_set_park(from._internal_park());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleState_Mode::CopyFrom(const VehicleState_Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.VehicleState.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState_Mode::IsInitialized() const {
  return true;
}

void VehicleState_Mode::InternalSwap(VehicleState_Mode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleState_Mode, _impl_.park_)
      + sizeof(VehicleState_Mode::_impl_.park_)
      - PROTOBUF_FIELD_OFFSET(VehicleState_Mode, _impl_.vehicle_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState_Mode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fstate_2eproto_getter, &descriptor_table_vehicle_5fstate_2eproto_once,
      file_level_metadata_vehicle_5fstate_2eproto[0]);
}

// ===================================================================

class VehicleState_Gear::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& selection(const VehicleState_Gear* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& selection_ratio(const VehicleState_Gear* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& shifting(const VehicleState_Gear* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Int32Value&
VehicleState_Gear::_Internal::selection(const VehicleState_Gear* msg) {
  return *msg->_impl_.selection_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Gear::_Internal::selection_ratio(const VehicleState_Gear* msg) {
  return *msg->_impl_.selection_ratio_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
VehicleState_Gear::_Internal::shifting(const VehicleState_Gear* msg) {
  return *msg->_impl_.shifting_;
}
void VehicleState_Gear::clear_selection() {
  if (GetArenaForAllocation() == nullptr && _impl_.selection_ != nullptr) {
    delete _impl_.selection_;
  }
  _impl_.selection_ = nullptr;
}
void VehicleState_Gear::clear_selection_ratio() {
  if (GetArenaForAllocation() == nullptr && _impl_.selection_ratio_ != nullptr) {
    delete _impl_.selection_ratio_;
  }
  _impl_.selection_ratio_ = nullptr;
}
void VehicleState_Gear::clear_shifting() {
  if (GetArenaForAllocation() == nullptr && _impl_.shifting_ != nullptr) {
    delete _impl_.shifting_;
  }
  _impl_.shifting_ = nullptr;
}
VehicleState_Gear::VehicleState_Gear(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.VehicleState.Gear)
}
VehicleState_Gear::VehicleState_Gear(const VehicleState_Gear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleState_Gear* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.selection_){nullptr}
    , decltype(_impl_.selection_ratio_){nullptr}
    , decltype(_impl_.shifting_){nullptr}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selection()) {
    _this->_impl_.selection_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.selection_);
  }
  if (from._internal_has_selection_ratio()) {
    _this->_impl_.selection_ratio_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.selection_ratio_);
  }
  if (from._internal_has_shifting()) {
    _this->_impl_.shifting_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.shifting_);
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.VehicleState.Gear)
}

inline void VehicleState_Gear::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.selection_){nullptr}
    , decltype(_impl_.selection_ratio_){nullptr}
    , decltype(_impl_.shifting_){nullptr}
    , decltype(_impl_.mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleState_Gear::~VehicleState_Gear() {
  // @@protoc_insertion_point(destructor:autonomous_proto.VehicleState.Gear)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleState_Gear::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.selection_;
  if (this != internal_default_instance()) delete _impl_.selection_ratio_;
  if (this != internal_default_instance()) delete _impl_.shifting_;
}

void VehicleState_Gear::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleState_Gear::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.VehicleState.Gear)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.selection_ != nullptr) {
    delete _impl_.selection_;
  }
  _impl_.selection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.selection_ratio_ != nullptr) {
    delete _impl_.selection_ratio_;
  }
  _impl_.selection_ratio_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shifting_ != nullptr) {
    delete _impl_.shifting_;
  }
  _impl_.shifting_ = nullptr;
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleState_Gear::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autonomous_proto.VehicleState.Gear.Mode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::autonomous_proto::VehicleState_Gear_Mode>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue selection_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_ratio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue shifting = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shifting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleState_Gear::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.VehicleState.Gear)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autonomous_proto.VehicleState.Gear.Mode mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // .google.protobuf.Int32Value selection = 2;
  if (this->_internal_has_selection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::selection(this),
        _Internal::selection(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue selection_ratio = 3;
  if (this->_internal_has_selection_ratio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::selection_ratio(this),
        _Internal::selection_ratio(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue shifting = 4;
  if (this->_internal_has_shifting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::shifting(this),
        _Internal::shifting(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.VehicleState.Gear)
  return target;
}

size_t VehicleState_Gear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.VehicleState.Gear)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int32Value selection = 2;
  if (this->_internal_has_selection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selection_);
  }

  // .google.protobuf.DoubleValue selection_ratio = 3;
  if (this->_internal_has_selection_ratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selection_ratio_);
  }

  // .google.protobuf.BoolValue shifting = 4;
  if (this->_internal_has_shifting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shifting_);
  }

  // .autonomous_proto.VehicleState.Gear.Mode mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleState_Gear::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleState_Gear::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleState_Gear::GetClassData() const { return &_class_data_; }


void VehicleState_Gear::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleState_Gear*>(&to_msg);
  auto& from = static_cast<const VehicleState_Gear&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.VehicleState.Gear)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selection()) {
    _this->_internal_mutable_selection()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_selection());
  }
  if (from._internal_has_selection_ratio()) {
    _this->_internal_mutable_selection_ratio()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_selection_ratio());
  }
  if (from._internal_has_shifting()) {
    _this->_internal_mutable_shifting()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
        from._internal_shifting());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleState_Gear::CopyFrom(const VehicleState_Gear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.VehicleState.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState_Gear::IsInitialized() const {
  return true;
}

void VehicleState_Gear::InternalSwap(VehicleState_Gear* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleState_Gear, _impl_.mode_)
      + sizeof(VehicleState_Gear::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(VehicleState_Gear, _impl_.selection_)>(
          reinterpret_cast<char*>(&_impl_.selection_),
          reinterpret_cast<char*>(&other->_impl_.selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState_Gear::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fstate_2eproto_getter, &descriptor_table_vehicle_5fstate_2eproto_once,
      file_level_metadata_vehicle_5fstate_2eproto[1]);
}

// ===================================================================

class VehicleState_DriverOperation::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& steer(const VehicleState_DriverOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& steer_torque(const VehicleState_DriverOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& steer_speed(const VehicleState_DriverOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& v(const VehicleState_DriverOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& acc(const VehicleState_DriverOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& throttle(const VehicleState_DriverOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& brake(const VehicleState_DriverOperation* msg);
  static const ::autonomous_proto::VehicleState_Gear& gear(const VehicleState_DriverOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& throttle_pedal(const VehicleState_DriverOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& brake_pedal(const VehicleState_DriverOperation* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::steer(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.steer_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::steer_torque(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.steer_torque_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::steer_speed(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.steer_speed_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::v(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.v_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::acc(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.acc_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::throttle(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.throttle_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::brake(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.brake_;
}
const ::autonomous_proto::VehicleState_Gear&
VehicleState_DriverOperation::_Internal::gear(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.gear_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::throttle_pedal(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.throttle_pedal_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_DriverOperation::_Internal::brake_pedal(const VehicleState_DriverOperation* msg) {
  return *msg->_impl_.brake_pedal_;
}
void VehicleState_DriverOperation::clear_steer() {
  if (GetArenaForAllocation() == nullptr && _impl_.steer_ != nullptr) {
    delete _impl_.steer_;
  }
  _impl_.steer_ = nullptr;
}
void VehicleState_DriverOperation::clear_steer_torque() {
  if (GetArenaForAllocation() == nullptr && _impl_.steer_torque_ != nullptr) {
    delete _impl_.steer_torque_;
  }
  _impl_.steer_torque_ = nullptr;
}
void VehicleState_DriverOperation::clear_steer_speed() {
  if (GetArenaForAllocation() == nullptr && _impl_.steer_speed_ != nullptr) {
    delete _impl_.steer_speed_;
  }
  _impl_.steer_speed_ = nullptr;
}
void VehicleState_DriverOperation::clear_v() {
  if (GetArenaForAllocation() == nullptr && _impl_.v_ != nullptr) {
    delete _impl_.v_;
  }
  _impl_.v_ = nullptr;
}
void VehicleState_DriverOperation::clear_acc() {
  if (GetArenaForAllocation() == nullptr && _impl_.acc_ != nullptr) {
    delete _impl_.acc_;
  }
  _impl_.acc_ = nullptr;
}
void VehicleState_DriverOperation::clear_throttle() {
  if (GetArenaForAllocation() == nullptr && _impl_.throttle_ != nullptr) {
    delete _impl_.throttle_;
  }
  _impl_.throttle_ = nullptr;
}
void VehicleState_DriverOperation::clear_brake() {
  if (GetArenaForAllocation() == nullptr && _impl_.brake_ != nullptr) {
    delete _impl_.brake_;
  }
  _impl_.brake_ = nullptr;
}
void VehicleState_DriverOperation::clear_throttle_pedal() {
  if (GetArenaForAllocation() == nullptr && _impl_.throttle_pedal_ != nullptr) {
    delete _impl_.throttle_pedal_;
  }
  _impl_.throttle_pedal_ = nullptr;
}
void VehicleState_DriverOperation::clear_brake_pedal() {
  if (GetArenaForAllocation() == nullptr && _impl_.brake_pedal_ != nullptr) {
    delete _impl_.brake_pedal_;
  }
  _impl_.brake_pedal_ = nullptr;
}
VehicleState_DriverOperation::VehicleState_DriverOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.VehicleState.DriverOperation)
}
VehicleState_DriverOperation::VehicleState_DriverOperation(const VehicleState_DriverOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleState_DriverOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.steer_){nullptr}
    , decltype(_impl_.steer_torque_){nullptr}
    , decltype(_impl_.steer_speed_){nullptr}
    , decltype(_impl_.v_){nullptr}
    , decltype(_impl_.acc_){nullptr}
    , decltype(_impl_.throttle_){nullptr}
    , decltype(_impl_.brake_){nullptr}
    , decltype(_impl_.gear_){nullptr}
    , decltype(_impl_.throttle_pedal_){nullptr}
    , decltype(_impl_.brake_pedal_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_steer()) {
    _this->_impl_.steer_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.steer_);
  }
  if (from._internal_has_steer_torque()) {
    _this->_impl_.steer_torque_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.steer_torque_);
  }
  if (from._internal_has_steer_speed()) {
    _this->_impl_.steer_speed_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.steer_speed_);
  }
  if (from._internal_has_v()) {
    _this->_impl_.v_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.v_);
  }
  if (from._internal_has_acc()) {
    _this->_impl_.acc_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.acc_);
  }
  if (from._internal_has_throttle()) {
    _this->_impl_.throttle_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.throttle_);
  }
  if (from._internal_has_brake()) {
    _this->_impl_.brake_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.brake_);
  }
  if (from._internal_has_gear()) {
    _this->_impl_.gear_ = new ::autonomous_proto::VehicleState_Gear(*from._impl_.gear_);
  }
  if (from._internal_has_throttle_pedal()) {
    _this->_impl_.throttle_pedal_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.throttle_pedal_);
  }
  if (from._internal_has_brake_pedal()) {
    _this->_impl_.brake_pedal_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.brake_pedal_);
  }
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.VehicleState.DriverOperation)
}

inline void VehicleState_DriverOperation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.steer_){nullptr}
    , decltype(_impl_.steer_torque_){nullptr}
    , decltype(_impl_.steer_speed_){nullptr}
    , decltype(_impl_.v_){nullptr}
    , decltype(_impl_.acc_){nullptr}
    , decltype(_impl_.throttle_){nullptr}
    , decltype(_impl_.brake_){nullptr}
    , decltype(_impl_.gear_){nullptr}
    , decltype(_impl_.throttle_pedal_){nullptr}
    , decltype(_impl_.brake_pedal_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleState_DriverOperation::~VehicleState_DriverOperation() {
  // @@protoc_insertion_point(destructor:autonomous_proto.VehicleState.DriverOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleState_DriverOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.steer_;
  if (this != internal_default_instance()) delete _impl_.steer_torque_;
  if (this != internal_default_instance()) delete _impl_.steer_speed_;
  if (this != internal_default_instance()) delete _impl_.v_;
  if (this != internal_default_instance()) delete _impl_.acc_;
  if (this != internal_default_instance()) delete _impl_.throttle_;
  if (this != internal_default_instance()) delete _impl_.brake_;
  if (this != internal_default_instance()) delete _impl_.gear_;
  if (this != internal_default_instance()) delete _impl_.throttle_pedal_;
  if (this != internal_default_instance()) delete _impl_.brake_pedal_;
}

void VehicleState_DriverOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleState_DriverOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.VehicleState.DriverOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.steer_ != nullptr) {
    delete _impl_.steer_;
  }
  _impl_.steer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.steer_torque_ != nullptr) {
    delete _impl_.steer_torque_;
  }
  _impl_.steer_torque_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.steer_speed_ != nullptr) {
    delete _impl_.steer_speed_;
  }
  _impl_.steer_speed_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.v_ != nullptr) {
    delete _impl_.v_;
  }
  _impl_.v_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.acc_ != nullptr) {
    delete _impl_.acc_;
  }
  _impl_.acc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.throttle_ != nullptr) {
    delete _impl_.throttle_;
  }
  _impl_.throttle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brake_ != nullptr) {
    delete _impl_.brake_;
  }
  _impl_.brake_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gear_ != nullptr) {
    delete _impl_.gear_;
  }
  _impl_.gear_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.throttle_pedal_ != nullptr) {
    delete _impl_.throttle_pedal_;
  }
  _impl_.throttle_pedal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brake_pedal_ != nullptr) {
    delete _impl_.brake_pedal_;
  }
  _impl_.brake_pedal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleState_DriverOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue steer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue steer_torque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_torque(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue steer_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_speed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue v = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_v(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue acc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue throttle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue brake = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.Gear gear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue throttle_pedal = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_pedal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue brake_pedal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_pedal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleState_DriverOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.VehicleState.DriverOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue steer = 1;
  if (this->_internal_has_steer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::steer(this),
        _Internal::steer(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue steer_torque = 2;
  if (this->_internal_has_steer_torque()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::steer_torque(this),
        _Internal::steer_torque(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue steer_speed = 3;
  if (this->_internal_has_steer_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::steer_speed(this),
        _Internal::steer_speed(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue v = 4;
  if (this->_internal_has_v()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::v(this),
        _Internal::v(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue acc = 5;
  if (this->_internal_has_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::acc(this),
        _Internal::acc(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue throttle = 6;
  if (this->_internal_has_throttle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::throttle(this),
        _Internal::throttle(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue brake = 7;
  if (this->_internal_has_brake()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::brake(this),
        _Internal::brake(this).GetCachedSize(), target, stream);
  }

  // .autonomous_proto.VehicleState.Gear gear = 8;
  if (this->_internal_has_gear()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::gear(this),
        _Internal::gear(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue throttle_pedal = 9;
  if (this->_internal_has_throttle_pedal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::throttle_pedal(this),
        _Internal::throttle_pedal(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue brake_pedal = 10;
  if (this->_internal_has_brake_pedal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::brake_pedal(this),
        _Internal::brake_pedal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.VehicleState.DriverOperation)
  return target;
}

size_t VehicleState_DriverOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.VehicleState.DriverOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue steer = 1;
  if (this->_internal_has_steer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.steer_);
  }

  // .google.protobuf.DoubleValue steer_torque = 2;
  if (this->_internal_has_steer_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.steer_torque_);
  }

  // .google.protobuf.DoubleValue steer_speed = 3;
  if (this->_internal_has_steer_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.steer_speed_);
  }

  // .google.protobuf.DoubleValue v = 4;
  if (this->_internal_has_v()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.v_);
  }

  // .google.protobuf.DoubleValue acc = 5;
  if (this->_internal_has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acc_);
  }

  // .google.protobuf.DoubleValue throttle = 6;
  if (this->_internal_has_throttle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.throttle_);
  }

  // .google.protobuf.DoubleValue brake = 7;
  if (this->_internal_has_brake()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brake_);
  }

  // .autonomous_proto.VehicleState.Gear gear = 8;
  if (this->_internal_has_gear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gear_);
  }

  // .google.protobuf.DoubleValue throttle_pedal = 9;
  if (this->_internal_has_throttle_pedal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.throttle_pedal_);
  }

  // .google.protobuf.DoubleValue brake_pedal = 10;
  if (this->_internal_has_brake_pedal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brake_pedal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleState_DriverOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleState_DriverOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleState_DriverOperation::GetClassData() const { return &_class_data_; }


void VehicleState_DriverOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleState_DriverOperation*>(&to_msg);
  auto& from = static_cast<const VehicleState_DriverOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.VehicleState.DriverOperation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steer()) {
    _this->_internal_mutable_steer()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_steer());
  }
  if (from._internal_has_steer_torque()) {
    _this->_internal_mutable_steer_torque()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_steer_torque());
  }
  if (from._internal_has_steer_speed()) {
    _this->_internal_mutable_steer_speed()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_steer_speed());
  }
  if (from._internal_has_v()) {
    _this->_internal_mutable_v()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_v());
  }
  if (from._internal_has_acc()) {
    _this->_internal_mutable_acc()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_acc());
  }
  if (from._internal_has_throttle()) {
    _this->_internal_mutable_throttle()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_throttle());
  }
  if (from._internal_has_brake()) {
    _this->_internal_mutable_brake()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_brake());
  }
  if (from._internal_has_gear()) {
    _this->_internal_mutable_gear()->::autonomous_proto::VehicleState_Gear::MergeFrom(
        from._internal_gear());
  }
  if (from._internal_has_throttle_pedal()) {
    _this->_internal_mutable_throttle_pedal()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_throttle_pedal());
  }
  if (from._internal_has_brake_pedal()) {
    _this->_internal_mutable_brake_pedal()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_brake_pedal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleState_DriverOperation::CopyFrom(const VehicleState_DriverOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.VehicleState.DriverOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState_DriverOperation::IsInitialized() const {
  return true;
}

void VehicleState_DriverOperation::InternalSwap(VehicleState_DriverOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleState_DriverOperation, _impl_.brake_pedal_)
      + sizeof(VehicleState_DriverOperation::_impl_.brake_pedal_)
      - PROTOBUF_FIELD_OFFSET(VehicleState_DriverOperation, _impl_.steer_)>(
          reinterpret_cast<char*>(&_impl_.steer_),
          reinterpret_cast<char*>(&other->_impl_.steer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState_DriverOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fstate_2eproto_getter, &descriptor_table_vehicle_5fstate_2eproto_once,
      file_level_metadata_vehicle_5fstate_2eproto[2]);
}

// ===================================================================

class VehicleState_Engine::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& rpm(const VehicleState_Engine* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& rpm_demand(const VehicleState_Engine* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& torque(const VehicleState_Engine* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& torque_demand(const VehicleState_Engine* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& load(const VehicleState_Engine* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Engine::_Internal::rpm(const VehicleState_Engine* msg) {
  return *msg->_impl_.rpm_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Engine::_Internal::rpm_demand(const VehicleState_Engine* msg) {
  return *msg->_impl_.rpm_demand_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Engine::_Internal::torque(const VehicleState_Engine* msg) {
  return *msg->_impl_.torque_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Engine::_Internal::torque_demand(const VehicleState_Engine* msg) {
  return *msg->_impl_.torque_demand_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Engine::_Internal::load(const VehicleState_Engine* msg) {
  return *msg->_impl_.load_;
}
void VehicleState_Engine::clear_rpm() {
  if (GetArenaForAllocation() == nullptr && _impl_.rpm_ != nullptr) {
    delete _impl_.rpm_;
  }
  _impl_.rpm_ = nullptr;
}
void VehicleState_Engine::clear_rpm_demand() {
  if (GetArenaForAllocation() == nullptr && _impl_.rpm_demand_ != nullptr) {
    delete _impl_.rpm_demand_;
  }
  _impl_.rpm_demand_ = nullptr;
}
void VehicleState_Engine::clear_torque() {
  if (GetArenaForAllocation() == nullptr && _impl_.torque_ != nullptr) {
    delete _impl_.torque_;
  }
  _impl_.torque_ = nullptr;
}
void VehicleState_Engine::clear_torque_demand() {
  if (GetArenaForAllocation() == nullptr && _impl_.torque_demand_ != nullptr) {
    delete _impl_.torque_demand_;
  }
  _impl_.torque_demand_ = nullptr;
}
void VehicleState_Engine::clear_load() {
  if (GetArenaForAllocation() == nullptr && _impl_.load_ != nullptr) {
    delete _impl_.load_;
  }
  _impl_.load_ = nullptr;
}
VehicleState_Engine::VehicleState_Engine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.VehicleState.Engine)
}
VehicleState_Engine::VehicleState_Engine(const VehicleState_Engine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleState_Engine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpm_){nullptr}
    , decltype(_impl_.rpm_demand_){nullptr}
    , decltype(_impl_.torque_){nullptr}
    , decltype(_impl_.torque_demand_){nullptr}
    , decltype(_impl_.load_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rpm()) {
    _this->_impl_.rpm_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.rpm_);
  }
  if (from._internal_has_rpm_demand()) {
    _this->_impl_.rpm_demand_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.rpm_demand_);
  }
  if (from._internal_has_torque()) {
    _this->_impl_.torque_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.torque_);
  }
  if (from._internal_has_torque_demand()) {
    _this->_impl_.torque_demand_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.torque_demand_);
  }
  if (from._internal_has_load()) {
    _this->_impl_.load_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.load_);
  }
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.VehicleState.Engine)
}

inline void VehicleState_Engine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rpm_){nullptr}
    , decltype(_impl_.rpm_demand_){nullptr}
    , decltype(_impl_.torque_){nullptr}
    , decltype(_impl_.torque_demand_){nullptr}
    , decltype(_impl_.load_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleState_Engine::~VehicleState_Engine() {
  // @@protoc_insertion_point(destructor:autonomous_proto.VehicleState.Engine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleState_Engine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rpm_;
  if (this != internal_default_instance()) delete _impl_.rpm_demand_;
  if (this != internal_default_instance()) delete _impl_.torque_;
  if (this != internal_default_instance()) delete _impl_.torque_demand_;
  if (this != internal_default_instance()) delete _impl_.load_;
}

void VehicleState_Engine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleState_Engine::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.VehicleState.Engine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rpm_ != nullptr) {
    delete _impl_.rpm_;
  }
  _impl_.rpm_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rpm_demand_ != nullptr) {
    delete _impl_.rpm_demand_;
  }
  _impl_.rpm_demand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.torque_ != nullptr) {
    delete _impl_.torque_;
  }
  _impl_.torque_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.torque_demand_ != nullptr) {
    delete _impl_.torque_demand_;
  }
  _impl_.torque_demand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.load_ != nullptr) {
    delete _impl_.load_;
  }
  _impl_.load_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleState_Engine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue rpm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue rpm_demand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpm_demand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue torque = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue torque_demand = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque_demand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue load = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_load(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleState_Engine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.VehicleState.Engine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue rpm = 1;
  if (this->_internal_has_rpm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rpm(this),
        _Internal::rpm(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue rpm_demand = 2;
  if (this->_internal_has_rpm_demand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rpm_demand(this),
        _Internal::rpm_demand(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue torque = 3;
  if (this->_internal_has_torque()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::torque(this),
        _Internal::torque(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue torque_demand = 4;
  if (this->_internal_has_torque_demand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::torque_demand(this),
        _Internal::torque_demand(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue load = 5;
  if (this->_internal_has_load()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::load(this),
        _Internal::load(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.VehicleState.Engine)
  return target;
}

size_t VehicleState_Engine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.VehicleState.Engine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue rpm = 1;
  if (this->_internal_has_rpm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rpm_);
  }

  // .google.protobuf.DoubleValue rpm_demand = 2;
  if (this->_internal_has_rpm_demand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rpm_demand_);
  }

  // .google.protobuf.DoubleValue torque = 3;
  if (this->_internal_has_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.torque_);
  }

  // .google.protobuf.DoubleValue torque_demand = 4;
  if (this->_internal_has_torque_demand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.torque_demand_);
  }

  // .google.protobuf.DoubleValue load = 5;
  if (this->_internal_has_load()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.load_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleState_Engine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleState_Engine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleState_Engine::GetClassData() const { return &_class_data_; }


void VehicleState_Engine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleState_Engine*>(&to_msg);
  auto& from = static_cast<const VehicleState_Engine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.VehicleState.Engine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rpm()) {
    _this->_internal_mutable_rpm()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_rpm());
  }
  if (from._internal_has_rpm_demand()) {
    _this->_internal_mutable_rpm_demand()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_rpm_demand());
  }
  if (from._internal_has_torque()) {
    _this->_internal_mutable_torque()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_torque());
  }
  if (from._internal_has_torque_demand()) {
    _this->_internal_mutable_torque_demand()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_torque_demand());
  }
  if (from._internal_has_load()) {
    _this->_internal_mutable_load()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_load());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleState_Engine::CopyFrom(const VehicleState_Engine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.VehicleState.Engine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState_Engine::IsInitialized() const {
  return true;
}

void VehicleState_Engine::InternalSwap(VehicleState_Engine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleState_Engine, _impl_.load_)
      + sizeof(VehicleState_Engine::_impl_.load_)
      - PROTOBUF_FIELD_OFFSET(VehicleState_Engine, _impl_.rpm_)>(
          reinterpret_cast<char*>(&_impl_.rpm_),
          reinterpret_cast<char*>(&other->_impl_.rpm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState_Engine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fstate_2eproto_getter, &descriptor_table_vehicle_5fstate_2eproto_once,
      file_level_metadata_vehicle_5fstate_2eproto[3]);
}

// ===================================================================

class VehicleState_Battery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& voltage(const VehicleState_Battery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& current(const VehicleState_Battery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& power(const VehicleState_Battery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& temperature(const VehicleState_Battery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& soc(const VehicleState_Battery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& remain_capacity(const VehicleState_Battery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Battery::_Internal::voltage(const VehicleState_Battery* msg) {
  return *msg->_impl_.voltage_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Battery::_Internal::current(const VehicleState_Battery* msg) {
  return *msg->_impl_.current_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Battery::_Internal::power(const VehicleState_Battery* msg) {
  return *msg->_impl_.power_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Battery::_Internal::temperature(const VehicleState_Battery* msg) {
  return *msg->_impl_.temperature_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Battery::_Internal::soc(const VehicleState_Battery* msg) {
  return *msg->_impl_.soc_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
VehicleState_Battery::_Internal::remain_capacity(const VehicleState_Battery* msg) {
  return *msg->_impl_.remain_capacity_;
}
void VehicleState_Battery::clear_voltage() {
  if (GetArenaForAllocation() == nullptr && _impl_.voltage_ != nullptr) {
    delete _impl_.voltage_;
  }
  _impl_.voltage_ = nullptr;
}
void VehicleState_Battery::clear_current() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_ != nullptr) {
    delete _impl_.current_;
  }
  _impl_.current_ = nullptr;
}
void VehicleState_Battery::clear_power() {
  if (GetArenaForAllocation() == nullptr && _impl_.power_ != nullptr) {
    delete _impl_.power_;
  }
  _impl_.power_ = nullptr;
}
void VehicleState_Battery::clear_temperature() {
  if (GetArenaForAllocation() == nullptr && _impl_.temperature_ != nullptr) {
    delete _impl_.temperature_;
  }
  _impl_.temperature_ = nullptr;
}
void VehicleState_Battery::clear_soc() {
  if (GetArenaForAllocation() == nullptr && _impl_.soc_ != nullptr) {
    delete _impl_.soc_;
  }
  _impl_.soc_ = nullptr;
}
void VehicleState_Battery::clear_remain_capacity() {
  if (GetArenaForAllocation() == nullptr && _impl_.remain_capacity_ != nullptr) {
    delete _impl_.remain_capacity_;
  }
  _impl_.remain_capacity_ = nullptr;
}
VehicleState_Battery::VehicleState_Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.VehicleState.Battery)
}
VehicleState_Battery::VehicleState_Battery(const VehicleState_Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleState_Battery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voltage_){nullptr}
    , decltype(_impl_.current_){nullptr}
    , decltype(_impl_.power_){nullptr}
    , decltype(_impl_.temperature_){nullptr}
    , decltype(_impl_.soc_){nullptr}
    , decltype(_impl_.remain_capacity_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_voltage()) {
    _this->_impl_.voltage_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.voltage_);
  }
  if (from._internal_has_current()) {
    _this->_impl_.current_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.current_);
  }
  if (from._internal_has_power()) {
    _this->_impl_.power_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.power_);
  }
  if (from._internal_has_temperature()) {
    _this->_impl_.temperature_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.temperature_);
  }
  if (from._internal_has_soc()) {
    _this->_impl_.soc_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.soc_);
  }
  if (from._internal_has_remain_capacity()) {
    _this->_impl_.remain_capacity_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.remain_capacity_);
  }
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.VehicleState.Battery)
}

inline void VehicleState_Battery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.voltage_){nullptr}
    , decltype(_impl_.current_){nullptr}
    , decltype(_impl_.power_){nullptr}
    , decltype(_impl_.temperature_){nullptr}
    , decltype(_impl_.soc_){nullptr}
    , decltype(_impl_.remain_capacity_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleState_Battery::~VehicleState_Battery() {
  // @@protoc_insertion_point(destructor:autonomous_proto.VehicleState.Battery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleState_Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.voltage_;
  if (this != internal_default_instance()) delete _impl_.current_;
  if (this != internal_default_instance()) delete _impl_.power_;
  if (this != internal_default_instance()) delete _impl_.temperature_;
  if (this != internal_default_instance()) delete _impl_.soc_;
  if (this != internal_default_instance()) delete _impl_.remain_capacity_;
}

void VehicleState_Battery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleState_Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.VehicleState.Battery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.voltage_ != nullptr) {
    delete _impl_.voltage_;
  }
  _impl_.voltage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_ != nullptr) {
    delete _impl_.current_;
  }
  _impl_.current_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.power_ != nullptr) {
    delete _impl_.power_;
  }
  _impl_.power_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.temperature_ != nullptr) {
    delete _impl_.temperature_;
  }
  _impl_.temperature_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.soc_ != nullptr) {
    delete _impl_.soc_;
  }
  _impl_.soc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remain_capacity_ != nullptr) {
    delete _impl_.remain_capacity_;
  }
  _impl_.remain_capacity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleState_Battery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_current(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_power(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue soc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_soc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue remain_capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_remain_capacity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleState_Battery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.VehicleState.Battery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue voltage = 1;
  if (this->_internal_has_voltage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::voltage(this),
        _Internal::voltage(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue current = 2;
  if (this->_internal_has_current()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::current(this),
        _Internal::current(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue power = 3;
  if (this->_internal_has_power()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::power(this),
        _Internal::power(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue temperature = 4;
  if (this->_internal_has_temperature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::temperature(this),
        _Internal::temperature(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue soc = 5;
  if (this->_internal_has_soc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::soc(this),
        _Internal::soc(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue remain_capacity = 6;
  if (this->_internal_has_remain_capacity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::remain_capacity(this),
        _Internal::remain_capacity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.VehicleState.Battery)
  return target;
}

size_t VehicleState_Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.VehicleState.Battery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue voltage = 1;
  if (this->_internal_has_voltage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.voltage_);
  }

  // .google.protobuf.DoubleValue current = 2;
  if (this->_internal_has_current()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_);
  }

  // .google.protobuf.DoubleValue power = 3;
  if (this->_internal_has_power()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.power_);
  }

  // .google.protobuf.DoubleValue temperature = 4;
  if (this->_internal_has_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.temperature_);
  }

  // .google.protobuf.DoubleValue soc = 5;
  if (this->_internal_has_soc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.soc_);
  }

  // .google.protobuf.DoubleValue remain_capacity = 6;
  if (this->_internal_has_remain_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remain_capacity_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleState_Battery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleState_Battery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleState_Battery::GetClassData() const { return &_class_data_; }


void VehicleState_Battery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleState_Battery*>(&to_msg);
  auto& from = static_cast<const VehicleState_Battery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.VehicleState.Battery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_voltage()) {
    _this->_internal_mutable_voltage()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_voltage());
  }
  if (from._internal_has_current()) {
    _this->_internal_mutable_current()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_current());
  }
  if (from._internal_has_power()) {
    _this->_internal_mutable_power()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_power());
  }
  if (from._internal_has_temperature()) {
    _this->_internal_mutable_temperature()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_temperature());
  }
  if (from._internal_has_soc()) {
    _this->_internal_mutable_soc()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_soc());
  }
  if (from._internal_has_remain_capacity()) {
    _this->_internal_mutable_remain_capacity()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_remain_capacity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleState_Battery::CopyFrom(const VehicleState_Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.VehicleState.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState_Battery::IsInitialized() const {
  return true;
}

void VehicleState_Battery::InternalSwap(VehicleState_Battery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleState_Battery, _impl_.remain_capacity_)
      + sizeof(VehicleState_Battery::_impl_.remain_capacity_)
      - PROTOBUF_FIELD_OFFSET(VehicleState_Battery, _impl_.voltage_)>(
          reinterpret_cast<char*>(&_impl_.voltage_),
          reinterpret_cast<char*>(&other->_impl_.voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState_Battery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fstate_2eproto_getter, &descriptor_table_vehicle_5fstate_2eproto_once,
      file_level_metadata_vehicle_5fstate_2eproto[4]);
}

// ===================================================================

class VehicleState::_Internal {
 public:
  static const ::autonomous_proto::MessageInfo& header(const VehicleState* msg);
  static const ::autonomous_proto::VehicleState_Mode& mode(const VehicleState* msg);
  static const ::autonomous_proto::VehicleState_DriverOperation& driver_operation(const VehicleState* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& park(const VehicleState* msg);
};

const ::autonomous_proto::MessageInfo&
VehicleState::_Internal::header(const VehicleState* msg) {
  return *msg->_impl_.header_;
}
const ::autonomous_proto::VehicleState_Mode&
VehicleState::_Internal::mode(const VehicleState* msg) {
  return *msg->_impl_.mode_;
}
const ::autonomous_proto::VehicleState_DriverOperation&
VehicleState::_Internal::driver_operation(const VehicleState* msg) {
  return *msg->_impl_.driver_operation_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
VehicleState::_Internal::park(const VehicleState* msg) {
  return *msg->_impl_.park_;
}
void VehicleState::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void VehicleState::clear_park() {
  if (GetArenaForAllocation() == nullptr && _impl_.park_ != nullptr) {
    delete _impl_.park_;
  }
  _impl_.park_ = nullptr;
}
VehicleState::VehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.VehicleState)
}
VehicleState::VehicleState(const VehicleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.angle_){from._impl_.angle_}
    , decltype(_impl_.angle_velocity_){from._impl_.angle_velocity_}
    , decltype(_impl_.v_){from._impl_.v_}
    , decltype(_impl_.acc_){from._impl_.acc_}
    , decltype(_impl_.throttle_){from._impl_.throttle_}
    , decltype(_impl_.brake_){from._impl_.brake_}
    , decltype(_impl_.errors_){from._impl_.errors_}
    , decltype(_impl_.gear_){from._impl_.gear_}
    , decltype(_impl_.engine_){from._impl_.engine_}
    , decltype(_impl_.battery_){from._impl_.battery_}
    , decltype(_impl_.steer_){from._impl_.steer_}
    , decltype(_impl_.steer_speed_){from._impl_.steer_speed_}
    , decltype(_impl_.steer_torque_){from._impl_.steer_torque_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.mode_){nullptr}
    , decltype(_impl_.driver_operation_){nullptr}
    , decltype(_impl_.park_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::autonomous_proto::MessageInfo(*from._impl_.header_);
  }
  if (from._internal_has_mode()) {
    _this->_impl_.mode_ = new ::autonomous_proto::VehicleState_Mode(*from._impl_.mode_);
  }
  if (from._internal_has_driver_operation()) {
    _this->_impl_.driver_operation_ = new ::autonomous_proto::VehicleState_DriverOperation(*from._impl_.driver_operation_);
  }
  if (from._internal_has_park()) {
    _this->_impl_.park_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.park_);
  }
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.VehicleState)
}

inline void VehicleState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.angle_){arena}
    , decltype(_impl_.angle_velocity_){arena}
    , decltype(_impl_.v_){arena}
    , decltype(_impl_.acc_){arena}
    , decltype(_impl_.throttle_){arena}
    , decltype(_impl_.brake_){arena}
    , decltype(_impl_.errors_){arena}
    , decltype(_impl_.gear_){arena}
    , decltype(_impl_.engine_){arena}
    , decltype(_impl_.battery_){arena}
    , decltype(_impl_.steer_){arena}
    , decltype(_impl_.steer_speed_){arena}
    , decltype(_impl_.steer_torque_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.mode_){nullptr}
    , decltype(_impl_.driver_operation_){nullptr}
    , decltype(_impl_.park_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:autonomous_proto.VehicleState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.angle_.~RepeatedField();
  _impl_.angle_velocity_.~RepeatedField();
  _impl_.v_.~RepeatedField();
  _impl_.acc_.~RepeatedField();
  _impl_.throttle_.~RepeatedField();
  _impl_.brake_.~RepeatedField();
  _impl_.errors_.~RepeatedPtrField();
  _impl_.gear_.~RepeatedPtrField();
  _impl_.engine_.~RepeatedPtrField();
  _impl_.battery_.~RepeatedPtrField();
  _impl_.steer_.~RepeatedField();
  _impl_.steer_speed_.~RepeatedField();
  _impl_.steer_torque_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.mode_;
  if (this != internal_default_instance()) delete _impl_.driver_operation_;
  if (this != internal_default_instance()) delete _impl_.park_;
}

void VehicleState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.VehicleState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.angle_.Clear();
  _impl_.angle_velocity_.Clear();
  _impl_.v_.Clear();
  _impl_.acc_.Clear();
  _impl_.throttle_.Clear();
  _impl_.brake_.Clear();
  _impl_.errors_.Clear();
  _impl_.gear_.Clear();
  _impl_.engine_.Clear();
  _impl_.battery_.Clear();
  _impl_.steer_.Clear();
  _impl_.steer_speed_.Clear();
  _impl_.steer_torque_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.driver_operation_ != nullptr) {
    delete _impl_.driver_operation_;
  }
  _impl_.driver_operation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.park_ != nullptr) {
    delete _impl_.park_;
  }
  _impl_.park_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autonomous_proto.MessageInfo header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.Mode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.VehicleState.DriverOperation driver_operation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_driver_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue park = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_park(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_angle(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_angle(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double angle_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_angle_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_angle_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double v = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double acc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_acc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_acc(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double throttle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_throttle(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 73) {
          _internal_add_throttle(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double brake = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_brake(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 81) {
          _internal_add_brake(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string errors = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_errors();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "autonomous_proto.VehicleState.errors"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .autonomous_proto.VehicleState.Gear gear = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gear(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .autonomous_proto.VehicleState.Engine engine = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_engine(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .autonomous_proto.VehicleState.Battery battery = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battery(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double steer = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_steer(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 121) {
          _internal_add_steer(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double steer_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_steer_speed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 129) {
          _internal_add_steer_speed(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double steer_torque = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_steer_torque(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 137) {
          _internal_add_steer_torque(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.VehicleState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autonomous_proto.MessageInfo header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .autonomous_proto.VehicleState.Mode mode = 2;
  if (this->_internal_has_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mode(this),
        _Internal::mode(this).GetCachedSize(), target, stream);
  }

  // .autonomous_proto.VehicleState.DriverOperation driver_operation = 3;
  if (this->_internal_has_driver_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::driver_operation(this),
        _Internal::driver_operation(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue park = 4;
  if (this->_internal_has_park()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::park(this),
        _Internal::park(this).GetCachedSize(), target, stream);
  }

  // repeated double angle = 5;
  if (this->_internal_angle_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_angle(), target);
  }

  // repeated double angle_velocity = 6;
  if (this->_internal_angle_velocity_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_angle_velocity(), target);
  }

  // repeated double v = 7;
  if (this->_internal_v_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_v(), target);
  }

  // repeated double acc = 8;
  if (this->_internal_acc_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_acc(), target);
  }

  // repeated double throttle = 9;
  if (this->_internal_throttle_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_throttle(), target);
  }

  // repeated double brake = 10;
  if (this->_internal_brake_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_brake(), target);
  }

  // repeated string errors = 11;
  for (int i = 0, n = this->_internal_errors_size(); i < n; i++) {
    const auto& s = this->_internal_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autonomous_proto.VehicleState.errors");
    target = stream->WriteString(11, s, target);
  }

  // repeated .autonomous_proto.VehicleState.Gear gear = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gear_size()); i < n; i++) {
    const auto& repfield = this->_internal_gear(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .autonomous_proto.VehicleState.Engine engine = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_engine_size()); i < n; i++) {
    const auto& repfield = this->_internal_engine(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .autonomous_proto.VehicleState.Battery battery = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_battery_size()); i < n; i++) {
    const auto& repfield = this->_internal_battery(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double steer = 15;
  if (this->_internal_steer_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_steer(), target);
  }

  // repeated double steer_speed = 16;
  if (this->_internal_steer_speed_size() > 0) {
    target = stream->WriteFixedPacked(16, _internal_steer_speed(), target);
  }

  // repeated double steer_torque = 17;
  if (this->_internal_steer_torque_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_steer_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.VehicleState)
  return target;
}

size_t VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.VehicleState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double angle = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angle_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double angle_velocity = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angle_velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double v = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_v_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double acc = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_acc_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double throttle = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_throttle_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double brake = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_brake_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string errors = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.errors_.size());
  for (int i = 0, n = _impl_.errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.errors_.Get(i));
  }

  // repeated .autonomous_proto.VehicleState.Gear gear = 12;
  total_size += 1UL * this->_internal_gear_size();
  for (const auto& msg : this->_impl_.gear_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .autonomous_proto.VehicleState.Engine engine = 13;
  total_size += 1UL * this->_internal_engine_size();
  for (const auto& msg : this->_impl_.engine_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .autonomous_proto.VehicleState.Battery battery = 14;
  total_size += 1UL * this->_internal_battery_size();
  for (const auto& msg : this->_impl_.battery_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double steer = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steer_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double steer_speed = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steer_speed_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double steer_torque = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steer_torque_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .autonomous_proto.MessageInfo header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .autonomous_proto.VehicleState.Mode mode = 2;
  if (this->_internal_has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mode_);
  }

  // .autonomous_proto.VehicleState.DriverOperation driver_operation = 3;
  if (this->_internal_has_driver_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.driver_operation_);
  }

  // .google.protobuf.BoolValue park = 4;
  if (this->_internal_has_park()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.park_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleState::GetClassData() const { return &_class_data_; }


void VehicleState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleState*>(&to_msg);
  auto& from = static_cast<const VehicleState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.VehicleState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.angle_.MergeFrom(from._impl_.angle_);
  _this->_impl_.angle_velocity_.MergeFrom(from._impl_.angle_velocity_);
  _this->_impl_.v_.MergeFrom(from._impl_.v_);
  _this->_impl_.acc_.MergeFrom(from._impl_.acc_);
  _this->_impl_.throttle_.MergeFrom(from._impl_.throttle_);
  _this->_impl_.brake_.MergeFrom(from._impl_.brake_);
  _this->_impl_.errors_.MergeFrom(from._impl_.errors_);
  _this->_impl_.gear_.MergeFrom(from._impl_.gear_);
  _this->_impl_.engine_.MergeFrom(from._impl_.engine_);
  _this->_impl_.battery_.MergeFrom(from._impl_.battery_);
  _this->_impl_.steer_.MergeFrom(from._impl_.steer_);
  _this->_impl_.steer_speed_.MergeFrom(from._impl_.steer_speed_);
  _this->_impl_.steer_torque_.MergeFrom(from._impl_.steer_torque_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::autonomous_proto::MessageInfo::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_mode()) {
    _this->_internal_mutable_mode()->::autonomous_proto::VehicleState_Mode::MergeFrom(
        from._internal_mode());
  }
  if (from._internal_has_driver_operation()) {
    _this->_internal_mutable_driver_operation()->::autonomous_proto::VehicleState_DriverOperation::MergeFrom(
        from._internal_driver_operation());
  }
  if (from._internal_has_park()) {
    _this->_internal_mutable_park()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
        from._internal_park());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  return true;
}

void VehicleState::InternalSwap(VehicleState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.angle_.InternalSwap(&other->_impl_.angle_);
  _impl_.angle_velocity_.InternalSwap(&other->_impl_.angle_velocity_);
  _impl_.v_.InternalSwap(&other->_impl_.v_);
  _impl_.acc_.InternalSwap(&other->_impl_.acc_);
  _impl_.throttle_.InternalSwap(&other->_impl_.throttle_);
  _impl_.brake_.InternalSwap(&other->_impl_.brake_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  _impl_.gear_.InternalSwap(&other->_impl_.gear_);
  _impl_.engine_.InternalSwap(&other->_impl_.engine_);
  _impl_.battery_.InternalSwap(&other->_impl_.battery_);
  _impl_.steer_.InternalSwap(&other->_impl_.steer_);
  _impl_.steer_speed_.InternalSwap(&other->_impl_.steer_speed_);
  _impl_.steer_torque_.InternalSwap(&other->_impl_.steer_torque_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.park_)
      + sizeof(VehicleState::_impl_.park_)
      - PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fstate_2eproto_getter, &descriptor_table_vehicle_5fstate_2eproto_once,
      file_level_metadata_vehicle_5fstate_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace autonomous_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autonomous_proto::VehicleState_Mode*
Arena::CreateMaybeMessage< ::autonomous_proto::VehicleState_Mode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::VehicleState_Mode >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::VehicleState_Gear*
Arena::CreateMaybeMessage< ::autonomous_proto::VehicleState_Gear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::VehicleState_Gear >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::VehicleState_DriverOperation*
Arena::CreateMaybeMessage< ::autonomous_proto::VehicleState_DriverOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::VehicleState_DriverOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::VehicleState_Engine*
Arena::CreateMaybeMessage< ::autonomous_proto::VehicleState_Engine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::VehicleState_Engine >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::VehicleState_Battery*
Arena::CreateMaybeMessage< ::autonomous_proto::VehicleState_Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::VehicleState_Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::VehicleState*
Arena::CreateMaybeMessage< ::autonomous_proto::VehicleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::VehicleState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
