// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#include "control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autonomous_proto {
PROTOBUF_CONSTEXPR Control_Mode::Control_Mode(
    ::_pbi::ConstantInitialized) {}
struct Control_ModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Control_ModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Control_ModeDefaultTypeInternal() {}
  union {
    Control_Mode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Control_ModeDefaultTypeInternal _Control_Mode_default_instance_;
PROTOBUF_CONSTEXPR Control_Direction::Control_Direction(
    ::_pbi::ConstantInitialized) {}
struct Control_DirectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Control_DirectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Control_DirectionDefaultTypeInternal() {}
  union {
    Control_Direction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Control_DirectionDefaultTypeInternal _Control_Direction_default_instance_;
PROTOBUF_CONSTEXPR Control_Priority::Control_Priority(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mode_)*/nullptr
  , /*decltype(_impl_.direction_)*/nullptr
  , /*decltype(_impl_.k_)*/nullptr
  , /*decltype(_impl_.kv_)*/nullptr
  , /*decltype(_impl_.v_)*/nullptr
  , /*decltype(_impl_.acc_)*/nullptr
  , /*decltype(_impl_.throttle_)*/nullptr
  , /*decltype(_impl_.brake_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Control_PriorityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Control_PriorityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Control_PriorityDefaultTypeInternal() {}
  union {
    Control_Priority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Control_PriorityDefaultTypeInternal _Control_Priority_default_instance_;
PROTOBUF_CONSTEXPR Control::Control(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.direction_)*/{}
  , /*decltype(_impl_._direction_cached_byte_size_)*/{0}
  , /*decltype(_impl_.k_)*/{}
  , /*decltype(_impl_.kv_)*/{}
  , /*decltype(_impl_.v_)*/{}
  , /*decltype(_impl_.acc_)*/{}
  , /*decltype(_impl_.throttle_)*/{}
  , /*decltype(_impl_.brake_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.priority_)*/nullptr
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlDefaultTypeInternal() {}
  union {
    Control _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlDefaultTypeInternal _Control_default_instance_;
PROTOBUF_CONSTEXPR ControlLimits::ControlLimits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.v_max_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlLimitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlLimitsDefaultTypeInternal() {}
  union {
    ControlLimits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlLimitsDefaultTypeInternal _ControlLimits_default_instance_;
}  // namespace autonomous_proto
static ::_pb::Metadata file_level_metadata_control_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_control_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_control_2eproto = nullptr;

const uint32_t TableStruct_control_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _impl_.kv_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _impl_.acc_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control_Priority, _impl_.brake_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.kv_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.acc_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.brake_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::Control, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::ControlLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::ControlLimits, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::autonomous_proto::ControlLimits, _impl_.v_max_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autonomous_proto::Control_Mode)},
  { 6, -1, -1, sizeof(::autonomous_proto::Control_Direction)},
  { 12, -1, -1, sizeof(::autonomous_proto::Control_Priority)},
  { 26, -1, -1, sizeof(::autonomous_proto::Control)},
  { 42, -1, -1, sizeof(::autonomous_proto::ControlLimits)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::autonomous_proto::_Control_Mode_default_instance_._instance,
  &::autonomous_proto::_Control_Direction_default_instance_._instance,
  &::autonomous_proto::_Control_Priority_default_instance_._instance,
  &::autonomous_proto::_Control_default_instance_._instance,
  &::autonomous_proto::_ControlLimits_default_instance_._instance,
};

const char descriptor_table_protodef_control_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcontrol.proto\022\020autonomous_proto\032\036googl"
  "e/protobuf/wrappers.proto\032\022message_info."
  "proto\"\246\006\n\007Control\022-\n\006header\030\001 \001(\0132\035.auto"
  "nomous_proto.MessageInfo\0222\n\004mode\030\002 \001(\0162$"
  ".autonomous_proto.Control.Mode.Value\022<\n\t"
  "direction\030\003 \003(\0162).autonomous_proto.Contr"
  "ol.Direction.Value\022\t\n\001k\030\004 \003(\001\022\n\n\002kv\030\005 \003("
  "\001\022\t\n\001v\030\006 \003(\001\022\013\n\003acc\030\007 \003(\001\022\020\n\010throttle\030\010 "
  "\003(\001\022\r\n\005brake\030\t \003(\001\0224\n\010priority\030\n \001(\0132\".a"
  "utonomous_proto.Control.Priority\0329\n\004Mode"
  "\"1\n\005Value\022\013\n\007unknown\020\000\022\016\n\nautonomous\020\001\022\013"
  "\n\007standby\020\002\032S\n\tDirection\"F\n\005Value\022\013\n\007unk"
  "nown\020\000\022\013\n\007forward\020\001\022\025\n\010backward\020\377\377\377\377\377\377\377\377"
  "\377\001\022\014\n\007neutral\020\200\010\032\343\002\n\010Priority\022)\n\004mode\030\001 "
  "\001(\0132\033.google.protobuf.Int32Value\022.\n\tdire"
  "ction\030\002 \001(\0132\033.google.protobuf.Int32Value"
  "\022&\n\001k\030\003 \001(\0132\033.google.protobuf.Int32Value"
  "\022\'\n\002kv\030\004 \001(\0132\033.google.protobuf.Int32Valu"
  "e\022&\n\001v\030\005 \001(\0132\033.google.protobuf.Int32Valu"
  "e\022(\n\003acc\030\006 \001(\0132\033.google.protobuf.Int32Va"
  "lue\022-\n\010throttle\030\007 \001(\0132\033.google.protobuf."
  "Int32Value\022*\n\005brake\030\010 \001(\0132\033.google.proto"
  "buf.Int32Value\"k\n\rControlLimits\022-\n\006heade"
  "r\030\001 \001(\0132\035.autonomous_proto.MessageInfo\022+"
  "\n\005v_max\030\002 \001(\0132\034.google.protobuf.DoubleVa"
  "lueb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_control_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_message_5finfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_control_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_control_2eproto = {
    false, false, 1011, descriptor_table_protodef_control_2eproto,
    "control.proto",
    &descriptor_table_control_2eproto_once, descriptor_table_control_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_control_2eproto::offsets,
    file_level_metadata_control_2eproto, file_level_enum_descriptors_control_2eproto,
    file_level_service_descriptors_control_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_control_2eproto_getter() {
  return &descriptor_table_control_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_control_2eproto(&descriptor_table_control_2eproto);
namespace autonomous_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_Mode_Value_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[0];
}
bool Control_Mode_Value_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Control_Mode_Value Control_Mode::unknown;
constexpr Control_Mode_Value Control_Mode::autonomous;
constexpr Control_Mode_Value Control_Mode::standby;
constexpr Control_Mode_Value Control_Mode::Value_MIN;
constexpr Control_Mode_Value Control_Mode::Value_MAX;
constexpr int Control_Mode::Value_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_Direction_Value_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[1];
}
bool Control_Direction_Value_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 1024:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Control_Direction_Value Control_Direction::unknown;
constexpr Control_Direction_Value Control_Direction::forward;
constexpr Control_Direction_Value Control_Direction::backward;
constexpr Control_Direction_Value Control_Direction::neutral;
constexpr Control_Direction_Value Control_Direction::Value_MIN;
constexpr Control_Direction_Value Control_Direction::Value_MAX;
constexpr int Control_Direction::Value_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Control_Mode::_Internal {
 public:
};

Control_Mode::Control_Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.Control.Mode)
}
Control_Mode::Control_Mode(const Control_Mode& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Control_Mode* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.Control.Mode)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_Mode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_Mode::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Control_Mode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[0]);
}

// ===================================================================

class Control_Direction::_Internal {
 public:
};

Control_Direction::Control_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.Control.Direction)
}
Control_Direction::Control_Direction(const Control_Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Control_Direction* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.Control.Direction)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_Direction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_Direction::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Control_Direction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[1]);
}

// ===================================================================

class Control_Priority::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& mode(const Control_Priority* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& direction(const Control_Priority* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& k(const Control_Priority* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& kv(const Control_Priority* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& v(const Control_Priority* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& acc(const Control_Priority* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& throttle(const Control_Priority* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& brake(const Control_Priority* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Control_Priority::_Internal::mode(const Control_Priority* msg) {
  return *msg->_impl_.mode_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Control_Priority::_Internal::direction(const Control_Priority* msg) {
  return *msg->_impl_.direction_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Control_Priority::_Internal::k(const Control_Priority* msg) {
  return *msg->_impl_.k_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Control_Priority::_Internal::kv(const Control_Priority* msg) {
  return *msg->_impl_.kv_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Control_Priority::_Internal::v(const Control_Priority* msg) {
  return *msg->_impl_.v_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Control_Priority::_Internal::acc(const Control_Priority* msg) {
  return *msg->_impl_.acc_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Control_Priority::_Internal::throttle(const Control_Priority* msg) {
  return *msg->_impl_.throttle_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Control_Priority::_Internal::brake(const Control_Priority* msg) {
  return *msg->_impl_.brake_;
}
void Control_Priority::clear_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
}
void Control_Priority::clear_direction() {
  if (GetArenaForAllocation() == nullptr && _impl_.direction_ != nullptr) {
    delete _impl_.direction_;
  }
  _impl_.direction_ = nullptr;
}
void Control_Priority::clear_k() {
  if (GetArenaForAllocation() == nullptr && _impl_.k_ != nullptr) {
    delete _impl_.k_;
  }
  _impl_.k_ = nullptr;
}
void Control_Priority::clear_kv() {
  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
}
void Control_Priority::clear_v() {
  if (GetArenaForAllocation() == nullptr && _impl_.v_ != nullptr) {
    delete _impl_.v_;
  }
  _impl_.v_ = nullptr;
}
void Control_Priority::clear_acc() {
  if (GetArenaForAllocation() == nullptr && _impl_.acc_ != nullptr) {
    delete _impl_.acc_;
  }
  _impl_.acc_ = nullptr;
}
void Control_Priority::clear_throttle() {
  if (GetArenaForAllocation() == nullptr && _impl_.throttle_ != nullptr) {
    delete _impl_.throttle_;
  }
  _impl_.throttle_ = nullptr;
}
void Control_Priority::clear_brake() {
  if (GetArenaForAllocation() == nullptr && _impl_.brake_ != nullptr) {
    delete _impl_.brake_;
  }
  _impl_.brake_ = nullptr;
}
Control_Priority::Control_Priority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.Control.Priority)
}
Control_Priority::Control_Priority(const Control_Priority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Control_Priority* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.k_){nullptr}
    , decltype(_impl_.kv_){nullptr}
    , decltype(_impl_.v_){nullptr}
    , decltype(_impl_.acc_){nullptr}
    , decltype(_impl_.throttle_){nullptr}
    , decltype(_impl_.brake_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mode()) {
    _this->_impl_.mode_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.mode_);
  }
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.direction_);
  }
  if (from._internal_has_k()) {
    _this->_impl_.k_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.k_);
  }
  if (from._internal_has_kv()) {
    _this->_impl_.kv_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.kv_);
  }
  if (from._internal_has_v()) {
    _this->_impl_.v_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.v_);
  }
  if (from._internal_has_acc()) {
    _this->_impl_.acc_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.acc_);
  }
  if (from._internal_has_throttle()) {
    _this->_impl_.throttle_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.throttle_);
  }
  if (from._internal_has_brake()) {
    _this->_impl_.brake_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.brake_);
  }
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.Control.Priority)
}

inline void Control_Priority::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.k_){nullptr}
    , decltype(_impl_.kv_){nullptr}
    , decltype(_impl_.v_){nullptr}
    , decltype(_impl_.acc_){nullptr}
    , decltype(_impl_.throttle_){nullptr}
    , decltype(_impl_.brake_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Control_Priority::~Control_Priority() {
  // @@protoc_insertion_point(destructor:autonomous_proto.Control.Priority)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Control_Priority::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mode_;
  if (this != internal_default_instance()) delete _impl_.direction_;
  if (this != internal_default_instance()) delete _impl_.k_;
  if (this != internal_default_instance()) delete _impl_.kv_;
  if (this != internal_default_instance()) delete _impl_.v_;
  if (this != internal_default_instance()) delete _impl_.acc_;
  if (this != internal_default_instance()) delete _impl_.throttle_;
  if (this != internal_default_instance()) delete _impl_.brake_;
}

void Control_Priority::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Control_Priority::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.Control.Priority)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.direction_ != nullptr) {
    delete _impl_.direction_;
  }
  _impl_.direction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.k_ != nullptr) {
    delete _impl_.k_;
  }
  _impl_.k_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.v_ != nullptr) {
    delete _impl_.v_;
  }
  _impl_.v_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.acc_ != nullptr) {
    delete _impl_.acc_;
  }
  _impl_.acc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.throttle_ != nullptr) {
    delete _impl_.throttle_;
  }
  _impl_.throttle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brake_ != nullptr) {
    delete _impl_.brake_;
  }
  _impl_.brake_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control_Priority::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Int32Value mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_k(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value kv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_v(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value acc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value throttle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value brake = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Control_Priority::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.Control.Priority)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value mode = 1;
  if (this->_internal_has_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mode(this),
        _Internal::mode(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value direction = 2;
  if (this->_internal_has_direction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value k = 3;
  if (this->_internal_has_k()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::k(this),
        _Internal::k(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value kv = 4;
  if (this->_internal_has_kv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::kv(this),
        _Internal::kv(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value v = 5;
  if (this->_internal_has_v()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::v(this),
        _Internal::v(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value acc = 6;
  if (this->_internal_has_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::acc(this),
        _Internal::acc(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value throttle = 7;
  if (this->_internal_has_throttle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::throttle(this),
        _Internal::throttle(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value brake = 8;
  if (this->_internal_has_brake()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::brake(this),
        _Internal::brake(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.Control.Priority)
  return target;
}

size_t Control_Priority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.Control.Priority)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int32Value mode = 1;
  if (this->_internal_has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mode_);
  }

  // .google.protobuf.Int32Value direction = 2;
  if (this->_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);
  }

  // .google.protobuf.Int32Value k = 3;
  if (this->_internal_has_k()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.k_);
  }

  // .google.protobuf.Int32Value kv = 4;
  if (this->_internal_has_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kv_);
  }

  // .google.protobuf.Int32Value v = 5;
  if (this->_internal_has_v()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.v_);
  }

  // .google.protobuf.Int32Value acc = 6;
  if (this->_internal_has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acc_);
  }

  // .google.protobuf.Int32Value throttle = 7;
  if (this->_internal_has_throttle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.throttle_);
  }

  // .google.protobuf.Int32Value brake = 8;
  if (this->_internal_has_brake()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brake_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_Priority::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Control_Priority::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_Priority::GetClassData() const { return &_class_data_; }


void Control_Priority::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Control_Priority*>(&to_msg);
  auto& from = static_cast<const Control_Priority&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.Control.Priority)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mode()) {
    _this->_internal_mutable_mode()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_mode());
  }
  if (from._internal_has_direction()) {
    _this->_internal_mutable_direction()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_direction());
  }
  if (from._internal_has_k()) {
    _this->_internal_mutable_k()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_k());
  }
  if (from._internal_has_kv()) {
    _this->_internal_mutable_kv()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_kv());
  }
  if (from._internal_has_v()) {
    _this->_internal_mutable_v()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_v());
  }
  if (from._internal_has_acc()) {
    _this->_internal_mutable_acc()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_acc());
  }
  if (from._internal_has_throttle()) {
    _this->_internal_mutable_throttle()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_throttle());
  }
  if (from._internal_has_brake()) {
    _this->_internal_mutable_brake()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_brake());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control_Priority::CopyFrom(const Control_Priority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.Control.Priority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_Priority::IsInitialized() const {
  return true;
}

void Control_Priority::InternalSwap(Control_Priority* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control_Priority, _impl_.brake_)
      + sizeof(Control_Priority::_impl_.brake_)
      - PROTOBUF_FIELD_OFFSET(Control_Priority, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_Priority::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[2]);
}

// ===================================================================

class Control::_Internal {
 public:
  static const ::autonomous_proto::MessageInfo& header(const Control* msg);
  static const ::autonomous_proto::Control_Priority& priority(const Control* msg);
};

const ::autonomous_proto::MessageInfo&
Control::_Internal::header(const Control* msg) {
  return *msg->_impl_.header_;
}
const ::autonomous_proto::Control_Priority&
Control::_Internal::priority(const Control* msg) {
  return *msg->_impl_.priority_;
}
void Control::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
Control::Control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.Control)
}
Control::Control(const Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Control* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.direction_){from._impl_.direction_}
    , /*decltype(_impl_._direction_cached_byte_size_)*/{0}
    , decltype(_impl_.k_){from._impl_.k_}
    , decltype(_impl_.kv_){from._impl_.kv_}
    , decltype(_impl_.v_){from._impl_.v_}
    , decltype(_impl_.acc_){from._impl_.acc_}
    , decltype(_impl_.throttle_){from._impl_.throttle_}
    , decltype(_impl_.brake_){from._impl_.brake_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.priority_){nullptr}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::autonomous_proto::MessageInfo(*from._impl_.header_);
  }
  if (from._internal_has_priority()) {
    _this->_impl_.priority_ = new ::autonomous_proto::Control_Priority(*from._impl_.priority_);
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.Control)
}

inline void Control::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.direction_){arena}
    , /*decltype(_impl_._direction_cached_byte_size_)*/{0}
    , decltype(_impl_.k_){arena}
    , decltype(_impl_.kv_){arena}
    , decltype(_impl_.v_){arena}
    , decltype(_impl_.acc_){arena}
    , decltype(_impl_.throttle_){arena}
    , decltype(_impl_.brake_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.priority_){nullptr}
    , decltype(_impl_.mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:autonomous_proto.Control)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Control::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.direction_.~RepeatedField();
  _impl_.k_.~RepeatedField();
  _impl_.kv_.~RepeatedField();
  _impl_.v_.~RepeatedField();
  _impl_.acc_.~RepeatedField();
  _impl_.throttle_.~RepeatedField();
  _impl_.brake_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.priority_;
}

void Control::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.Control)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.direction_.Clear();
  _impl_.k_.Clear();
  _impl_.kv_.Clear();
  _impl_.v_.Clear();
  _impl_.acc_.Clear();
  _impl_.throttle_.Clear();
  _impl_.brake_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.priority_ != nullptr) {
    delete _impl_.priority_;
  }
  _impl_.priority_ = nullptr;
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autonomous_proto.MessageInfo header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.Control.Mode.Value mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::autonomous_proto::Control_Mode_Value>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .autonomous_proto.Control.Direction.Value direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_direction(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_direction(static_cast<::autonomous_proto::Control_Direction_Value>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated double k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_k(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_k(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double kv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_kv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_kv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double v = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double acc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_acc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_acc(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double throttle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_throttle(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_throttle(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double brake = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_brake(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 73) {
          _internal_add_brake(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autonomous_proto.Control.Priority priority = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Control::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.Control)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autonomous_proto.MessageInfo header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .autonomous_proto.Control.Mode.Value mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // repeated .autonomous_proto.Control.Direction.Value direction = 3;
  {
    int byte_size = _impl_._direction_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, _impl_.direction_, byte_size, target);
    }
  }

  // repeated double k = 4;
  if (this->_internal_k_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_k(), target);
  }

  // repeated double kv = 5;
  if (this->_internal_kv_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_kv(), target);
  }

  // repeated double v = 6;
  if (this->_internal_v_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_v(), target);
  }

  // repeated double acc = 7;
  if (this->_internal_acc_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_acc(), target);
  }

  // repeated double throttle = 8;
  if (this->_internal_throttle_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_throttle(), target);
  }

  // repeated double brake = 9;
  if (this->_internal_brake_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_brake(), target);
  }

  // .autonomous_proto.Control.Priority priority = 10;
  if (this->_internal_has_priority()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::priority(this),
        _Internal::priority(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.Control)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autonomous_proto.Control.Direction.Value direction = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_direction_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_direction(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._direction_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double k = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_k_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double kv = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_kv_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double v = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_v_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double acc = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_acc_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double throttle = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_throttle_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double brake = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_brake_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .autonomous_proto.MessageInfo header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .autonomous_proto.Control.Priority priority = 10;
  if (this->_internal_has_priority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.priority_);
  }

  // .autonomous_proto.Control.Mode.Value mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Control::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control::GetClassData() const { return &_class_data_; }


void Control::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Control*>(&to_msg);
  auto& from = static_cast<const Control&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.Control)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.direction_.MergeFrom(from._impl_.direction_);
  _this->_impl_.k_.MergeFrom(from._impl_.k_);
  _this->_impl_.kv_.MergeFrom(from._impl_.kv_);
  _this->_impl_.v_.MergeFrom(from._impl_.v_);
  _this->_impl_.acc_.MergeFrom(from._impl_.acc_);
  _this->_impl_.throttle_.MergeFrom(from._impl_.throttle_);
  _this->_impl_.brake_.MergeFrom(from._impl_.brake_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::autonomous_proto::MessageInfo::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_priority()) {
    _this->_internal_mutable_priority()->::autonomous_proto::Control_Priority::MergeFrom(
        from._internal_priority());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::InternalSwap(Control* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.direction_.InternalSwap(&other->_impl_.direction_);
  _impl_.k_.InternalSwap(&other->_impl_.k_);
  _impl_.kv_.InternalSwap(&other->_impl_.kv_);
  _impl_.v_.InternalSwap(&other->_impl_.v_);
  _impl_.acc_.InternalSwap(&other->_impl_.acc_);
  _impl_.throttle_.InternalSwap(&other->_impl_.throttle_);
  _impl_.brake_.InternalSwap(&other->_impl_.brake_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control, _impl_.mode_)
      + sizeof(Control::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(Control, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[3]);
}

// ===================================================================

class ControlLimits::_Internal {
 public:
  static const ::autonomous_proto::MessageInfo& header(const ControlLimits* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& v_max(const ControlLimits* msg);
};

const ::autonomous_proto::MessageInfo&
ControlLimits::_Internal::header(const ControlLimits* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
ControlLimits::_Internal::v_max(const ControlLimits* msg) {
  return *msg->_impl_.v_max_;
}
void ControlLimits::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void ControlLimits::clear_v_max() {
  if (GetArenaForAllocation() == nullptr && _impl_.v_max_ != nullptr) {
    delete _impl_.v_max_;
  }
  _impl_.v_max_ = nullptr;
}
ControlLimits::ControlLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:autonomous_proto.ControlLimits)
}
ControlLimits::ControlLimits(const ControlLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlLimits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.v_max_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::autonomous_proto::MessageInfo(*from._impl_.header_);
  }
  if (from._internal_has_v_max()) {
    _this->_impl_.v_max_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.v_max_);
  }
  // @@protoc_insertion_point(copy_constructor:autonomous_proto.ControlLimits)
}

inline void ControlLimits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.v_max_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlLimits::~ControlLimits() {
  // @@protoc_insertion_point(destructor:autonomous_proto.ControlLimits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlLimits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.v_max_;
}

void ControlLimits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:autonomous_proto.ControlLimits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.v_max_ != nullptr) {
    delete _impl_.v_max_;
  }
  _impl_.v_max_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlLimits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autonomous_proto.MessageInfo header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue v_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlLimits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomous_proto.ControlLimits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autonomous_proto.MessageInfo header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue v_max = 2;
  if (this->_internal_has_v_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::v_max(this),
        _Internal::v_max(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomous_proto.ControlLimits)
  return target;
}

size_t ControlLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autonomous_proto.ControlLimits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autonomous_proto.MessageInfo header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .google.protobuf.DoubleValue v_max = 2;
  if (this->_internal_has_v_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.v_max_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlLimits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlLimits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlLimits::GetClassData() const { return &_class_data_; }


void ControlLimits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlLimits*>(&to_msg);
  auto& from = static_cast<const ControlLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:autonomous_proto.ControlLimits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::autonomous_proto::MessageInfo::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_v_max()) {
    _this->_internal_mutable_v_max()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_v_max());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlLimits::CopyFrom(const ControlLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autonomous_proto.ControlLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlLimits::IsInitialized() const {
  return true;
}

void ControlLimits::InternalSwap(ControlLimits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlLimits, _impl_.v_max_)
      + sizeof(ControlLimits::_impl_.v_max_)
      - PROTOBUF_FIELD_OFFSET(ControlLimits, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlLimits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace autonomous_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autonomous_proto::Control_Mode*
Arena::CreateMaybeMessage< ::autonomous_proto::Control_Mode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::Control_Mode >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::Control_Direction*
Arena::CreateMaybeMessage< ::autonomous_proto::Control_Direction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::Control_Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::Control_Priority*
Arena::CreateMaybeMessage< ::autonomous_proto::Control_Priority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::Control_Priority >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::Control*
Arena::CreateMaybeMessage< ::autonomous_proto::Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::Control >(arena);
}
template<> PROTOBUF_NOINLINE ::autonomous_proto::ControlLimits*
Arena::CreateMaybeMessage< ::autonomous_proto::ControlLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autonomous_proto::ControlLimits >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
