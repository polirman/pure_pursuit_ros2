// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local_path.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_local_5fpath_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_local_5fpath_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "message_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_local_5fpath_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_local_5fpath_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_local_5fpath_2eproto;
namespace autonomous_proto {
class LocalPath;
struct LocalPathDefaultTypeInternal;
extern LocalPathDefaultTypeInternal _LocalPath_default_instance_;
class LocalPath_Direction;
struct LocalPath_DirectionDefaultTypeInternal;
extern LocalPath_DirectionDefaultTypeInternal _LocalPath_Direction_default_instance_;
class LocalPath_Point;
struct LocalPath_PointDefaultTypeInternal;
extern LocalPath_PointDefaultTypeInternal _LocalPath_Point_default_instance_;
}  // namespace autonomous_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::autonomous_proto::LocalPath* Arena::CreateMaybeMessage<::autonomous_proto::LocalPath>(Arena*);
template<> ::autonomous_proto::LocalPath_Direction* Arena::CreateMaybeMessage<::autonomous_proto::LocalPath_Direction>(Arena*);
template<> ::autonomous_proto::LocalPath_Point* Arena::CreateMaybeMessage<::autonomous_proto::LocalPath_Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autonomous_proto {

enum LocalPath_Direction_Value : int {
  LocalPath_Direction_Value_unknown = 0,
  LocalPath_Direction_Value_forward = 1,
  LocalPath_Direction_Value_backward = -1,
  LocalPath_Direction_Value_LocalPath_Direction_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LocalPath_Direction_Value_LocalPath_Direction_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LocalPath_Direction_Value_IsValid(int value);
constexpr LocalPath_Direction_Value LocalPath_Direction_Value_Value_MIN = LocalPath_Direction_Value_backward;
constexpr LocalPath_Direction_Value LocalPath_Direction_Value_Value_MAX = LocalPath_Direction_Value_forward;
constexpr int LocalPath_Direction_Value_Value_ARRAYSIZE = LocalPath_Direction_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalPath_Direction_Value_descriptor();
template<typename T>
inline const std::string& LocalPath_Direction_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalPath_Direction_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalPath_Direction_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalPath_Direction_Value_descriptor(), enum_t_value);
}
inline bool LocalPath_Direction_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LocalPath_Direction_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalPath_Direction_Value>(
    LocalPath_Direction_Value_descriptor(), name, value);
}
// ===================================================================

class LocalPath_Direction final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:autonomous_proto.LocalPath.Direction) */ {
 public:
  inline LocalPath_Direction() : LocalPath_Direction(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LocalPath_Direction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalPath_Direction(const LocalPath_Direction& from);
  LocalPath_Direction(LocalPath_Direction&& from) noexcept
    : LocalPath_Direction() {
    *this = ::std::move(from);
  }

  inline LocalPath_Direction& operator=(const LocalPath_Direction& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPath_Direction& operator=(LocalPath_Direction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalPath_Direction& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalPath_Direction* internal_default_instance() {
    return reinterpret_cast<const LocalPath_Direction*>(
               &_LocalPath_Direction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalPath_Direction& a, LocalPath_Direction& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPath_Direction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalPath_Direction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalPath_Direction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalPath_Direction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LocalPath_Direction& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LocalPath_Direction& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.LocalPath.Direction";
  }
  protected:
  explicit LocalPath_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocalPath_Direction_Value Value;
  static constexpr Value unknown =
    LocalPath_Direction_Value_unknown;
  static constexpr Value forward =
    LocalPath_Direction_Value_forward;
  static constexpr Value backward =
    LocalPath_Direction_Value_backward;
  static inline bool Value_IsValid(int value) {
    return LocalPath_Direction_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    LocalPath_Direction_Value_Value_MIN;
  static constexpr Value Value_MAX =
    LocalPath_Direction_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    LocalPath_Direction_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return LocalPath_Direction_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return LocalPath_Direction_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return LocalPath_Direction_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:autonomous_proto.LocalPath.Direction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_local_5fpath_2eproto;
};
// -------------------------------------------------------------------

class LocalPath_Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.LocalPath.Point) */ {
 public:
  inline LocalPath_Point() : LocalPath_Point(nullptr) {}
  ~LocalPath_Point() override;
  explicit PROTOBUF_CONSTEXPR LocalPath_Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalPath_Point(const LocalPath_Point& from);
  LocalPath_Point(LocalPath_Point&& from) noexcept
    : LocalPath_Point() {
    *this = ::std::move(from);
  }

  inline LocalPath_Point& operator=(const LocalPath_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPath_Point& operator=(LocalPath_Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalPath_Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalPath_Point* internal_default_instance() {
    return reinterpret_cast<const LocalPath_Point*>(
               &_LocalPath_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalPath_Point& a, LocalPath_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPath_Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalPath_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalPath_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalPath_Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalPath_Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalPath_Point& from) {
    LocalPath_Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPath_Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.LocalPath.Point";
  }
  protected:
  explicit LocalPath_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kAltFieldNumber = 3,
  };
  // .google.protobuf.DoubleValue lat = 1;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& lat() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_lat();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_lat();
  void set_allocated_lat(::PROTOBUF_NAMESPACE_ID::DoubleValue* lat);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_lat() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_lat();
  public:
  void unsafe_arena_set_allocated_lat(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* lat);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_lat();

  // .google.protobuf.DoubleValue lon = 2;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& lon() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_lon();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_lon();
  void set_allocated_lon(::PROTOBUF_NAMESPACE_ID::DoubleValue* lon);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_lon() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_lon();
  public:
  void unsafe_arena_set_allocated_lon(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* lon);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_lon();

  // .google.protobuf.DoubleValue alt = 3;
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& alt() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_alt();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_alt();
  void set_allocated_alt(::PROTOBUF_NAMESPACE_ID::DoubleValue* alt);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_alt() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_alt();
  public:
  void unsafe_arena_set_allocated_alt(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* alt);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_alt();

  // @@protoc_insertion_point(class_scope:autonomous_proto.LocalPath.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* lat_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* lon_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* alt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_local_5fpath_2eproto;
};
// -------------------------------------------------------------------

class LocalPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.LocalPath) */ {
 public:
  inline LocalPath() : LocalPath(nullptr) {}
  ~LocalPath() override;
  explicit PROTOBUF_CONSTEXPR LocalPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalPath(const LocalPath& from);
  LocalPath(LocalPath&& from) noexcept
    : LocalPath() {
    *this = ::std::move(from);
  }

  inline LocalPath& operator=(const LocalPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPath& operator=(LocalPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalPath* internal_default_instance() {
    return reinterpret_cast<const LocalPath*>(
               &_LocalPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalPath& a, LocalPath& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalPath& from) {
    LocalPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.LocalPath";
  }
  protected:
  explicit LocalPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocalPath_Direction Direction;
  typedef LocalPath_Point Point;

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // repeated .autonomous_proto.LocalPath.Point points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::autonomous_proto::LocalPath_Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::LocalPath_Point >*
      mutable_points();
  private:
  const ::autonomous_proto::LocalPath_Point& _internal_points(int index) const;
  ::autonomous_proto::LocalPath_Point* _internal_add_points();
  public:
  const ::autonomous_proto::LocalPath_Point& points(int index) const;
  ::autonomous_proto::LocalPath_Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::LocalPath_Point >&
      points() const;

  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .autonomous_proto.LocalPath.Direction.Value direction = 2;
  void clear_direction();
  ::autonomous_proto::LocalPath_Direction_Value direction() const;
  void set_direction(::autonomous_proto::LocalPath_Direction_Value value);
  private:
  ::autonomous_proto::LocalPath_Direction_Value _internal_direction() const;
  void _internal_set_direction(::autonomous_proto::LocalPath_Direction_Value value);
  public:

  // @@protoc_insertion_point(class_scope:autonomous_proto.LocalPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::LocalPath_Point > points_;
    ::autonomous_proto::MessageInfo* header_;
    int direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_local_5fpath_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalPath_Direction

// -------------------------------------------------------------------

// LocalPath_Point

// .google.protobuf.DoubleValue lat = 1;
inline bool LocalPath_Point::_internal_has_lat() const {
  return this != internal_default_instance() && _impl_.lat_ != nullptr;
}
inline bool LocalPath_Point::has_lat() const {
  return _internal_has_lat();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& LocalPath_Point::_internal_lat() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.lat_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& LocalPath_Point::lat() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.LocalPath.Point.lat)
  return _internal_lat();
}
inline void LocalPath_Point::unsafe_arena_set_allocated_lat(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* lat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lat_);
  }
  _impl_.lat_ = lat;
  if (lat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.LocalPath.Point.lat)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::release_lat() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.lat_;
  _impl_.lat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::unsafe_arena_release_lat() {
  // @@protoc_insertion_point(field_release:autonomous_proto.LocalPath.Point.lat)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.lat_;
  _impl_.lat_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::_internal_mutable_lat() {
  
  if (_impl_.lat_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.lat_ = p;
  }
  return _impl_.lat_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::mutable_lat() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_lat();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.LocalPath.Point.lat)
  return _msg;
}
inline void LocalPath_Point::set_allocated_lat(::PROTOBUF_NAMESPACE_ID::DoubleValue* lat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lat_);
  }
  if (lat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat));
    if (message_arena != submessage_arena) {
      lat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lat_ = lat;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.LocalPath.Point.lat)
}

// .google.protobuf.DoubleValue lon = 2;
inline bool LocalPath_Point::_internal_has_lon() const {
  return this != internal_default_instance() && _impl_.lon_ != nullptr;
}
inline bool LocalPath_Point::has_lon() const {
  return _internal_has_lon();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& LocalPath_Point::_internal_lon() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.lon_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& LocalPath_Point::lon() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.LocalPath.Point.lon)
  return _internal_lon();
}
inline void LocalPath_Point::unsafe_arena_set_allocated_lon(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* lon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lon_);
  }
  _impl_.lon_ = lon;
  if (lon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.LocalPath.Point.lon)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::release_lon() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.lon_;
  _impl_.lon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::unsafe_arena_release_lon() {
  // @@protoc_insertion_point(field_release:autonomous_proto.LocalPath.Point.lon)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.lon_;
  _impl_.lon_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::_internal_mutable_lon() {
  
  if (_impl_.lon_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.lon_ = p;
  }
  return _impl_.lon_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::mutable_lon() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_lon();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.LocalPath.Point.lon)
  return _msg;
}
inline void LocalPath_Point::set_allocated_lon(::PROTOBUF_NAMESPACE_ID::DoubleValue* lon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lon_);
  }
  if (lon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon));
    if (message_arena != submessage_arena) {
      lon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lon, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lon_ = lon;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.LocalPath.Point.lon)
}

// .google.protobuf.DoubleValue alt = 3;
inline bool LocalPath_Point::_internal_has_alt() const {
  return this != internal_default_instance() && _impl_.alt_ != nullptr;
}
inline bool LocalPath_Point::has_alt() const {
  return _internal_has_alt();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& LocalPath_Point::_internal_alt() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.alt_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& LocalPath_Point::alt() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.LocalPath.Point.alt)
  return _internal_alt();
}
inline void LocalPath_Point::unsafe_arena_set_allocated_alt(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* alt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alt_);
  }
  _impl_.alt_ = alt;
  if (alt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.LocalPath.Point.alt)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::release_alt() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.alt_;
  _impl_.alt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::unsafe_arena_release_alt() {
  // @@protoc_insertion_point(field_release:autonomous_proto.LocalPath.Point.alt)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.alt_;
  _impl_.alt_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::_internal_mutable_alt() {
  
  if (_impl_.alt_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.alt_ = p;
  }
  return _impl_.alt_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* LocalPath_Point::mutable_alt() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_alt();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.LocalPath.Point.alt)
  return _msg;
}
inline void LocalPath_Point::set_allocated_alt(::PROTOBUF_NAMESPACE_ID::DoubleValue* alt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alt_);
  }
  if (alt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alt));
    if (message_arena != submessage_arena) {
      alt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.alt_ = alt;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.LocalPath.Point.alt)
}

// -------------------------------------------------------------------

// LocalPath

// .autonomous_proto.MessageInfo header = 1;
inline bool LocalPath::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool LocalPath::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& LocalPath::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& LocalPath::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.LocalPath.header)
  return _internal_header();
}
inline void LocalPath::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.LocalPath.header)
}
inline ::autonomous_proto::MessageInfo* LocalPath::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* LocalPath::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.LocalPath.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* LocalPath::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* LocalPath::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.LocalPath.header)
  return _msg;
}
inline void LocalPath::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.LocalPath.header)
}

// .autonomous_proto.LocalPath.Direction.Value direction = 2;
inline void LocalPath::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::autonomous_proto::LocalPath_Direction_Value LocalPath::_internal_direction() const {
  return static_cast< ::autonomous_proto::LocalPath_Direction_Value >(_impl_.direction_);
}
inline ::autonomous_proto::LocalPath_Direction_Value LocalPath::direction() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.LocalPath.direction)
  return _internal_direction();
}
inline void LocalPath::_internal_set_direction(::autonomous_proto::LocalPath_Direction_Value value) {
  
  _impl_.direction_ = value;
}
inline void LocalPath::set_direction(::autonomous_proto::LocalPath_Direction_Value value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:autonomous_proto.LocalPath.direction)
}

// repeated .autonomous_proto.LocalPath.Point points = 3;
inline int LocalPath::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int LocalPath::points_size() const {
  return _internal_points_size();
}
inline void LocalPath::clear_points() {
  _impl_.points_.Clear();
}
inline ::autonomous_proto::LocalPath_Point* LocalPath::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:autonomous_proto.LocalPath.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::LocalPath_Point >*
LocalPath::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:autonomous_proto.LocalPath.points)
  return &_impl_.points_;
}
inline const ::autonomous_proto::LocalPath_Point& LocalPath::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::autonomous_proto::LocalPath_Point& LocalPath::points(int index) const {
  // @@protoc_insertion_point(field_get:autonomous_proto.LocalPath.points)
  return _internal_points(index);
}
inline ::autonomous_proto::LocalPath_Point* LocalPath::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::autonomous_proto::LocalPath_Point* LocalPath::add_points() {
  ::autonomous_proto::LocalPath_Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:autonomous_proto.LocalPath.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autonomous_proto::LocalPath_Point >&
LocalPath::points() const {
  // @@protoc_insertion_point(field_list:autonomous_proto.LocalPath.points)
  return _impl_.points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autonomous_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autonomous_proto::LocalPath_Direction_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autonomous_proto::LocalPath_Direction_Value>() {
  return ::autonomous_proto::LocalPath_Direction_Value_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_local_5fpath_2eproto
