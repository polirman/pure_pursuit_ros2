// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_communication_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_communication_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_communication_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_5fcommand_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_5fcommand_2eproto;
namespace autonomous_proto {
class CommunicationCommand;
struct CommunicationCommandDefaultTypeInternal;
extern CommunicationCommandDefaultTypeInternal _CommunicationCommand_default_instance_;
class CommunicationCommand_Command;
struct CommunicationCommand_CommandDefaultTypeInternal;
extern CommunicationCommand_CommandDefaultTypeInternal _CommunicationCommand_Command_default_instance_;
class CommunicationCommand_Markers;
struct CommunicationCommand_MarkersDefaultTypeInternal;
extern CommunicationCommand_MarkersDefaultTypeInternal _CommunicationCommand_Markers_default_instance_;
class CommunicationCommand_Response;
struct CommunicationCommand_ResponseDefaultTypeInternal;
extern CommunicationCommand_ResponseDefaultTypeInternal _CommunicationCommand_Response_default_instance_;
}  // namespace autonomous_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::autonomous_proto::CommunicationCommand* Arena::CreateMaybeMessage<::autonomous_proto::CommunicationCommand>(Arena*);
template<> ::autonomous_proto::CommunicationCommand_Command* Arena::CreateMaybeMessage<::autonomous_proto::CommunicationCommand_Command>(Arena*);
template<> ::autonomous_proto::CommunicationCommand_Markers* Arena::CreateMaybeMessage<::autonomous_proto::CommunicationCommand_Markers>(Arena*);
template<> ::autonomous_proto::CommunicationCommand_Response* Arena::CreateMaybeMessage<::autonomous_proto::CommunicationCommand_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autonomous_proto {

// ===================================================================

class CommunicationCommand_Markers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.CommunicationCommand.Markers) */ {
 public:
  inline CommunicationCommand_Markers() : CommunicationCommand_Markers(nullptr) {}
  ~CommunicationCommand_Markers() override;
  explicit PROTOBUF_CONSTEXPR CommunicationCommand_Markers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommunicationCommand_Markers(const CommunicationCommand_Markers& from);
  CommunicationCommand_Markers(CommunicationCommand_Markers&& from) noexcept
    : CommunicationCommand_Markers() {
    *this = ::std::move(from);
  }

  inline CommunicationCommand_Markers& operator=(const CommunicationCommand_Markers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationCommand_Markers& operator=(CommunicationCommand_Markers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunicationCommand_Markers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunicationCommand_Markers* internal_default_instance() {
    return reinterpret_cast<const CommunicationCommand_Markers*>(
               &_CommunicationCommand_Markers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommunicationCommand_Markers& a, CommunicationCommand_Markers& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationCommand_Markers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationCommand_Markers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunicationCommand_Markers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommunicationCommand_Markers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommunicationCommand_Markers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommunicationCommand_Markers& from) {
    CommunicationCommand_Markers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationCommand_Markers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.CommunicationCommand.Markers";
  }
  protected:
  explicit CommunicationCommand_Markers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcuSendOnFieldNumber = 1,
    kAutoEnableFieldNumber = 2,
    kSteerEnableFieldNumber = 3,
    kSpeedEnableFieldNumber = 4,
    kGearEnableFieldNumber = 5,
    kThrottleEnableFieldNumber = 6,
    kBrakeEnableFieldNumber = 7,
    kParkEnableFieldNumber = 8,
  };
  // .google.protobuf.BoolValue ecu_send_on = 1;
  bool has_ecu_send_on() const;
  private:
  bool _internal_has_ecu_send_on() const;
  public:
  void clear_ecu_send_on();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& ecu_send_on() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_ecu_send_on();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_ecu_send_on();
  void set_allocated_ecu_send_on(::PROTOBUF_NAMESPACE_ID::BoolValue* ecu_send_on);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_ecu_send_on() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_ecu_send_on();
  public:
  void unsafe_arena_set_allocated_ecu_send_on(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* ecu_send_on);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_ecu_send_on();

  // .google.protobuf.BoolValue auto_enable = 2;
  bool has_auto_enable() const;
  private:
  bool _internal_has_auto_enable() const;
  public:
  void clear_auto_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& auto_enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_auto_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_auto_enable();
  void set_allocated_auto_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* auto_enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_auto_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_auto_enable();
  public:
  void unsafe_arena_set_allocated_auto_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* auto_enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_auto_enable();

  // .google.protobuf.BoolValue steer_enable = 3;
  bool has_steer_enable() const;
  private:
  bool _internal_has_steer_enable() const;
  public:
  void clear_steer_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& steer_enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_steer_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_steer_enable();
  void set_allocated_steer_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* steer_enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_steer_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_steer_enable();
  public:
  void unsafe_arena_set_allocated_steer_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* steer_enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_steer_enable();

  // .google.protobuf.BoolValue speed_enable = 4;
  bool has_speed_enable() const;
  private:
  bool _internal_has_speed_enable() const;
  public:
  void clear_speed_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& speed_enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_speed_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_speed_enable();
  void set_allocated_speed_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* speed_enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_speed_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_speed_enable();
  public:
  void unsafe_arena_set_allocated_speed_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* speed_enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_speed_enable();

  // .google.protobuf.BoolValue gear_enable = 5;
  bool has_gear_enable() const;
  private:
  bool _internal_has_gear_enable() const;
  public:
  void clear_gear_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& gear_enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_gear_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_gear_enable();
  void set_allocated_gear_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* gear_enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_gear_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_gear_enable();
  public:
  void unsafe_arena_set_allocated_gear_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* gear_enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_gear_enable();

  // .google.protobuf.BoolValue throttle_enable = 6;
  bool has_throttle_enable() const;
  private:
  bool _internal_has_throttle_enable() const;
  public:
  void clear_throttle_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& throttle_enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_throttle_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_throttle_enable();
  void set_allocated_throttle_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* throttle_enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_throttle_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_throttle_enable();
  public:
  void unsafe_arena_set_allocated_throttle_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* throttle_enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_throttle_enable();

  // .google.protobuf.BoolValue brake_enable = 7;
  bool has_brake_enable() const;
  private:
  bool _internal_has_brake_enable() const;
  public:
  void clear_brake_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& brake_enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_brake_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_brake_enable();
  void set_allocated_brake_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* brake_enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_brake_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_brake_enable();
  public:
  void unsafe_arena_set_allocated_brake_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* brake_enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_brake_enable();

  // .google.protobuf.BoolValue park_enable = 8;
  bool has_park_enable() const;
  private:
  bool _internal_has_park_enable() const;
  public:
  void clear_park_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& park_enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_park_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_park_enable();
  void set_allocated_park_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* park_enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_park_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_park_enable();
  public:
  void unsafe_arena_set_allocated_park_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* park_enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_park_enable();

  // @@protoc_insertion_point(class_scope:autonomous_proto.CommunicationCommand.Markers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::BoolValue* ecu_send_on_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* auto_enable_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* steer_enable_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* speed_enable_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* gear_enable_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* throttle_enable_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* brake_enable_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* park_enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class CommunicationCommand_Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.CommunicationCommand.Command) */ {
 public:
  inline CommunicationCommand_Command() : CommunicationCommand_Command(nullptr) {}
  ~CommunicationCommand_Command() override;
  explicit PROTOBUF_CONSTEXPR CommunicationCommand_Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommunicationCommand_Command(const CommunicationCommand_Command& from);
  CommunicationCommand_Command(CommunicationCommand_Command&& from) noexcept
    : CommunicationCommand_Command() {
    *this = ::std::move(from);
  }

  inline CommunicationCommand_Command& operator=(const CommunicationCommand_Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationCommand_Command& operator=(CommunicationCommand_Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunicationCommand_Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunicationCommand_Command* internal_default_instance() {
    return reinterpret_cast<const CommunicationCommand_Command*>(
               &_CommunicationCommand_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommunicationCommand_Command& a, CommunicationCommand_Command& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationCommand_Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationCommand_Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunicationCommand_Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommunicationCommand_Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommunicationCommand_Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommunicationCommand_Command& from) {
    CommunicationCommand_Command::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationCommand_Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.CommunicationCommand.Command";
  }
  protected:
  explicit CommunicationCommand_Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkersFieldNumber = 1,
  };
  // .autonomous_proto.CommunicationCommand.Markers markers = 1;
  bool has_markers() const;
  private:
  bool _internal_has_markers() const;
  public:
  void clear_markers();
  const ::autonomous_proto::CommunicationCommand_Markers& markers() const;
  PROTOBUF_NODISCARD ::autonomous_proto::CommunicationCommand_Markers* release_markers();
  ::autonomous_proto::CommunicationCommand_Markers* mutable_markers();
  void set_allocated_markers(::autonomous_proto::CommunicationCommand_Markers* markers);
  private:
  const ::autonomous_proto::CommunicationCommand_Markers& _internal_markers() const;
  ::autonomous_proto::CommunicationCommand_Markers* _internal_mutable_markers();
  public:
  void unsafe_arena_set_allocated_markers(
      ::autonomous_proto::CommunicationCommand_Markers* markers);
  ::autonomous_proto::CommunicationCommand_Markers* unsafe_arena_release_markers();

  // @@protoc_insertion_point(class_scope:autonomous_proto.CommunicationCommand.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::CommunicationCommand_Markers* markers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class CommunicationCommand_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.CommunicationCommand.Response) */ {
 public:
  inline CommunicationCommand_Response() : CommunicationCommand_Response(nullptr) {}
  ~CommunicationCommand_Response() override;
  explicit PROTOBUF_CONSTEXPR CommunicationCommand_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommunicationCommand_Response(const CommunicationCommand_Response& from);
  CommunicationCommand_Response(CommunicationCommand_Response&& from) noexcept
    : CommunicationCommand_Response() {
    *this = ::std::move(from);
  }

  inline CommunicationCommand_Response& operator=(const CommunicationCommand_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationCommand_Response& operator=(CommunicationCommand_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunicationCommand_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunicationCommand_Response* internal_default_instance() {
    return reinterpret_cast<const CommunicationCommand_Response*>(
               &_CommunicationCommand_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommunicationCommand_Response& a, CommunicationCommand_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationCommand_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationCommand_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunicationCommand_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommunicationCommand_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommunicationCommand_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommunicationCommand_Response& from) {
    CommunicationCommand_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationCommand_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.CommunicationCommand.Response";
  }
  protected:
  explicit CommunicationCommand_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkersFieldNumber = 1,
  };
  // .autonomous_proto.CommunicationCommand.Markers markers = 1;
  bool has_markers() const;
  private:
  bool _internal_has_markers() const;
  public:
  void clear_markers();
  const ::autonomous_proto::CommunicationCommand_Markers& markers() const;
  PROTOBUF_NODISCARD ::autonomous_proto::CommunicationCommand_Markers* release_markers();
  ::autonomous_proto::CommunicationCommand_Markers* mutable_markers();
  void set_allocated_markers(::autonomous_proto::CommunicationCommand_Markers* markers);
  private:
  const ::autonomous_proto::CommunicationCommand_Markers& _internal_markers() const;
  ::autonomous_proto::CommunicationCommand_Markers* _internal_mutable_markers();
  public:
  void unsafe_arena_set_allocated_markers(
      ::autonomous_proto::CommunicationCommand_Markers* markers);
  ::autonomous_proto::CommunicationCommand_Markers* unsafe_arena_release_markers();

  // @@protoc_insertion_point(class_scope:autonomous_proto.CommunicationCommand.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::CommunicationCommand_Markers* markers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class CommunicationCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.CommunicationCommand) */ {
 public:
  inline CommunicationCommand() : CommunicationCommand(nullptr) {}
  ~CommunicationCommand() override;
  explicit PROTOBUF_CONSTEXPR CommunicationCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommunicationCommand(const CommunicationCommand& from);
  CommunicationCommand(CommunicationCommand&& from) noexcept
    : CommunicationCommand() {
    *this = ::std::move(from);
  }

  inline CommunicationCommand& operator=(const CommunicationCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationCommand& operator=(CommunicationCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunicationCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunicationCommand* internal_default_instance() {
    return reinterpret_cast<const CommunicationCommand*>(
               &_CommunicationCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommunicationCommand& a, CommunicationCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunicationCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommunicationCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommunicationCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommunicationCommand& from) {
    CommunicationCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.CommunicationCommand";
  }
  protected:
  explicit CommunicationCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommunicationCommand_Markers Markers;
  typedef CommunicationCommand_Command Command;
  typedef CommunicationCommand_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .autonomous_proto.CommunicationCommand.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::autonomous_proto::CommunicationCommand_Command& command() const;
  PROTOBUF_NODISCARD ::autonomous_proto::CommunicationCommand_Command* release_command();
  ::autonomous_proto::CommunicationCommand_Command* mutable_command();
  void set_allocated_command(::autonomous_proto::CommunicationCommand_Command* command);
  private:
  const ::autonomous_proto::CommunicationCommand_Command& _internal_command() const;
  ::autonomous_proto::CommunicationCommand_Command* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::autonomous_proto::CommunicationCommand_Command* command);
  ::autonomous_proto::CommunicationCommand_Command* unsafe_arena_release_command();

  // .autonomous_proto.CommunicationCommand.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::autonomous_proto::CommunicationCommand_Response& response() const;
  PROTOBUF_NODISCARD ::autonomous_proto::CommunicationCommand_Response* release_response();
  ::autonomous_proto::CommunicationCommand_Response* mutable_response();
  void set_allocated_response(::autonomous_proto::CommunicationCommand_Response* response);
  private:
  const ::autonomous_proto::CommunicationCommand_Response& _internal_response() const;
  ::autonomous_proto::CommunicationCommand_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::autonomous_proto::CommunicationCommand_Response* response);
  ::autonomous_proto::CommunicationCommand_Response* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:autonomous_proto.CommunicationCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::CommunicationCommand_Command* command_;
    ::autonomous_proto::CommunicationCommand_Response* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommunicationCommand_Markers

// .google.protobuf.BoolValue ecu_send_on = 1;
inline bool CommunicationCommand_Markers::_internal_has_ecu_send_on() const {
  return this != internal_default_instance() && _impl_.ecu_send_on_ != nullptr;
}
inline bool CommunicationCommand_Markers::has_ecu_send_on() const {
  return _internal_has_ecu_send_on();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::_internal_ecu_send_on() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.ecu_send_on_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::ecu_send_on() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Markers.ecu_send_on)
  return _internal_ecu_send_on();
}
inline void CommunicationCommand_Markers::unsafe_arena_set_allocated_ecu_send_on(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* ecu_send_on) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ecu_send_on_);
  }
  _impl_.ecu_send_on_ = ecu_send_on;
  if (ecu_send_on) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Markers.ecu_send_on)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::release_ecu_send_on() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.ecu_send_on_;
  _impl_.ecu_send_on_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::unsafe_arena_release_ecu_send_on() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Markers.ecu_send_on)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.ecu_send_on_;
  _impl_.ecu_send_on_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::_internal_mutable_ecu_send_on() {
  
  if (_impl_.ecu_send_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.ecu_send_on_ = p;
  }
  return _impl_.ecu_send_on_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::mutable_ecu_send_on() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_ecu_send_on();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Markers.ecu_send_on)
  return _msg;
}
inline void CommunicationCommand_Markers::set_allocated_ecu_send_on(::PROTOBUF_NAMESPACE_ID::BoolValue* ecu_send_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ecu_send_on_);
  }
  if (ecu_send_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ecu_send_on));
    if (message_arena != submessage_arena) {
      ecu_send_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecu_send_on, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ecu_send_on_ = ecu_send_on;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Markers.ecu_send_on)
}

// .google.protobuf.BoolValue auto_enable = 2;
inline bool CommunicationCommand_Markers::_internal_has_auto_enable() const {
  return this != internal_default_instance() && _impl_.auto_enable_ != nullptr;
}
inline bool CommunicationCommand_Markers::has_auto_enable() const {
  return _internal_has_auto_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::_internal_auto_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.auto_enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::auto_enable() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Markers.auto_enable)
  return _internal_auto_enable();
}
inline void CommunicationCommand_Markers::unsafe_arena_set_allocated_auto_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* auto_enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_enable_);
  }
  _impl_.auto_enable_ = auto_enable;
  if (auto_enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Markers.auto_enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::release_auto_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.auto_enable_;
  _impl_.auto_enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::unsafe_arena_release_auto_enable() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Markers.auto_enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.auto_enable_;
  _impl_.auto_enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::_internal_mutable_auto_enable() {
  
  if (_impl_.auto_enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.auto_enable_ = p;
  }
  return _impl_.auto_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::mutable_auto_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_auto_enable();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Markers.auto_enable)
  return _msg;
}
inline void CommunicationCommand_Markers::set_allocated_auto_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* auto_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_enable_);
  }
  if (auto_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_enable));
    if (message_arena != submessage_arena) {
      auto_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_enable, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.auto_enable_ = auto_enable;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Markers.auto_enable)
}

// .google.protobuf.BoolValue steer_enable = 3;
inline bool CommunicationCommand_Markers::_internal_has_steer_enable() const {
  return this != internal_default_instance() && _impl_.steer_enable_ != nullptr;
}
inline bool CommunicationCommand_Markers::has_steer_enable() const {
  return _internal_has_steer_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::_internal_steer_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.steer_enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::steer_enable() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Markers.steer_enable)
  return _internal_steer_enable();
}
inline void CommunicationCommand_Markers::unsafe_arena_set_allocated_steer_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* steer_enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_enable_);
  }
  _impl_.steer_enable_ = steer_enable;
  if (steer_enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Markers.steer_enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::release_steer_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.steer_enable_;
  _impl_.steer_enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::unsafe_arena_release_steer_enable() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Markers.steer_enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.steer_enable_;
  _impl_.steer_enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::_internal_mutable_steer_enable() {
  
  if (_impl_.steer_enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.steer_enable_ = p;
  }
  return _impl_.steer_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::mutable_steer_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_steer_enable();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Markers.steer_enable)
  return _msg;
}
inline void CommunicationCommand_Markers::set_allocated_steer_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* steer_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_enable_);
  }
  if (steer_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_enable));
    if (message_arena != submessage_arena) {
      steer_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_enable, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.steer_enable_ = steer_enable;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Markers.steer_enable)
}

// .google.protobuf.BoolValue speed_enable = 4;
inline bool CommunicationCommand_Markers::_internal_has_speed_enable() const {
  return this != internal_default_instance() && _impl_.speed_enable_ != nullptr;
}
inline bool CommunicationCommand_Markers::has_speed_enable() const {
  return _internal_has_speed_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::_internal_speed_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.speed_enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::speed_enable() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Markers.speed_enable)
  return _internal_speed_enable();
}
inline void CommunicationCommand_Markers::unsafe_arena_set_allocated_speed_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* speed_enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_enable_);
  }
  _impl_.speed_enable_ = speed_enable;
  if (speed_enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Markers.speed_enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::release_speed_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.speed_enable_;
  _impl_.speed_enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::unsafe_arena_release_speed_enable() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Markers.speed_enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.speed_enable_;
  _impl_.speed_enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::_internal_mutable_speed_enable() {
  
  if (_impl_.speed_enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.speed_enable_ = p;
  }
  return _impl_.speed_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::mutable_speed_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_speed_enable();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Markers.speed_enable)
  return _msg;
}
inline void CommunicationCommand_Markers::set_allocated_speed_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* speed_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_enable_);
  }
  if (speed_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_enable));
    if (message_arena != submessage_arena) {
      speed_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_enable, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_enable_ = speed_enable;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Markers.speed_enable)
}

// .google.protobuf.BoolValue gear_enable = 5;
inline bool CommunicationCommand_Markers::_internal_has_gear_enable() const {
  return this != internal_default_instance() && _impl_.gear_enable_ != nullptr;
}
inline bool CommunicationCommand_Markers::has_gear_enable() const {
  return _internal_has_gear_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::_internal_gear_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.gear_enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::gear_enable() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Markers.gear_enable)
  return _internal_gear_enable();
}
inline void CommunicationCommand_Markers::unsafe_arena_set_allocated_gear_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* gear_enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gear_enable_);
  }
  _impl_.gear_enable_ = gear_enable;
  if (gear_enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Markers.gear_enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::release_gear_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.gear_enable_;
  _impl_.gear_enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::unsafe_arena_release_gear_enable() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Markers.gear_enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.gear_enable_;
  _impl_.gear_enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::_internal_mutable_gear_enable() {
  
  if (_impl_.gear_enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.gear_enable_ = p;
  }
  return _impl_.gear_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::mutable_gear_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_gear_enable();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Markers.gear_enable)
  return _msg;
}
inline void CommunicationCommand_Markers::set_allocated_gear_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* gear_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gear_enable_);
  }
  if (gear_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gear_enable));
    if (message_arena != submessage_arena) {
      gear_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gear_enable, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gear_enable_ = gear_enable;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Markers.gear_enable)
}

// .google.protobuf.BoolValue throttle_enable = 6;
inline bool CommunicationCommand_Markers::_internal_has_throttle_enable() const {
  return this != internal_default_instance() && _impl_.throttle_enable_ != nullptr;
}
inline bool CommunicationCommand_Markers::has_throttle_enable() const {
  return _internal_has_throttle_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::_internal_throttle_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.throttle_enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::throttle_enable() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Markers.throttle_enable)
  return _internal_throttle_enable();
}
inline void CommunicationCommand_Markers::unsafe_arena_set_allocated_throttle_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* throttle_enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_enable_);
  }
  _impl_.throttle_enable_ = throttle_enable;
  if (throttle_enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Markers.throttle_enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::release_throttle_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.throttle_enable_;
  _impl_.throttle_enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::unsafe_arena_release_throttle_enable() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Markers.throttle_enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.throttle_enable_;
  _impl_.throttle_enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::_internal_mutable_throttle_enable() {
  
  if (_impl_.throttle_enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.throttle_enable_ = p;
  }
  return _impl_.throttle_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::mutable_throttle_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_throttle_enable();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Markers.throttle_enable)
  return _msg;
}
inline void CommunicationCommand_Markers::set_allocated_throttle_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* throttle_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_enable_);
  }
  if (throttle_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle_enable));
    if (message_arena != submessage_arena) {
      throttle_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_enable, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.throttle_enable_ = throttle_enable;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Markers.throttle_enable)
}

// .google.protobuf.BoolValue brake_enable = 7;
inline bool CommunicationCommand_Markers::_internal_has_brake_enable() const {
  return this != internal_default_instance() && _impl_.brake_enable_ != nullptr;
}
inline bool CommunicationCommand_Markers::has_brake_enable() const {
  return _internal_has_brake_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::_internal_brake_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.brake_enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::brake_enable() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Markers.brake_enable)
  return _internal_brake_enable();
}
inline void CommunicationCommand_Markers::unsafe_arena_set_allocated_brake_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* brake_enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_enable_);
  }
  _impl_.brake_enable_ = brake_enable;
  if (brake_enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Markers.brake_enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::release_brake_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.brake_enable_;
  _impl_.brake_enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::unsafe_arena_release_brake_enable() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Markers.brake_enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.brake_enable_;
  _impl_.brake_enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::_internal_mutable_brake_enable() {
  
  if (_impl_.brake_enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.brake_enable_ = p;
  }
  return _impl_.brake_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::mutable_brake_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_brake_enable();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Markers.brake_enable)
  return _msg;
}
inline void CommunicationCommand_Markers::set_allocated_brake_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* brake_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_enable_);
  }
  if (brake_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brake_enable));
    if (message_arena != submessage_arena) {
      brake_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_enable, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brake_enable_ = brake_enable;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Markers.brake_enable)
}

// .google.protobuf.BoolValue park_enable = 8;
inline bool CommunicationCommand_Markers::_internal_has_park_enable() const {
  return this != internal_default_instance() && _impl_.park_enable_ != nullptr;
}
inline bool CommunicationCommand_Markers::has_park_enable() const {
  return _internal_has_park_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::_internal_park_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.park_enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CommunicationCommand_Markers::park_enable() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Markers.park_enable)
  return _internal_park_enable();
}
inline void CommunicationCommand_Markers::unsafe_arena_set_allocated_park_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* park_enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.park_enable_);
  }
  _impl_.park_enable_ = park_enable;
  if (park_enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Markers.park_enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::release_park_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.park_enable_;
  _impl_.park_enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::unsafe_arena_release_park_enable() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Markers.park_enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.park_enable_;
  _impl_.park_enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::_internal_mutable_park_enable() {
  
  if (_impl_.park_enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.park_enable_ = p;
  }
  return _impl_.park_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CommunicationCommand_Markers::mutable_park_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_park_enable();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Markers.park_enable)
  return _msg;
}
inline void CommunicationCommand_Markers::set_allocated_park_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* park_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.park_enable_);
  }
  if (park_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(park_enable));
    if (message_arena != submessage_arena) {
      park_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, park_enable, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.park_enable_ = park_enable;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Markers.park_enable)
}

// -------------------------------------------------------------------

// CommunicationCommand_Command

// .autonomous_proto.CommunicationCommand.Markers markers = 1;
inline bool CommunicationCommand_Command::_internal_has_markers() const {
  return this != internal_default_instance() && _impl_.markers_ != nullptr;
}
inline bool CommunicationCommand_Command::has_markers() const {
  return _internal_has_markers();
}
inline void CommunicationCommand_Command::clear_markers() {
  if (GetArenaForAllocation() == nullptr && _impl_.markers_ != nullptr) {
    delete _impl_.markers_;
  }
  _impl_.markers_ = nullptr;
}
inline const ::autonomous_proto::CommunicationCommand_Markers& CommunicationCommand_Command::_internal_markers() const {
  const ::autonomous_proto::CommunicationCommand_Markers* p = _impl_.markers_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::CommunicationCommand_Markers&>(
      ::autonomous_proto::_CommunicationCommand_Markers_default_instance_);
}
inline const ::autonomous_proto::CommunicationCommand_Markers& CommunicationCommand_Command::markers() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Command.markers)
  return _internal_markers();
}
inline void CommunicationCommand_Command::unsafe_arena_set_allocated_markers(
    ::autonomous_proto::CommunicationCommand_Markers* markers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.markers_);
  }
  _impl_.markers_ = markers;
  if (markers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Command.markers)
}
inline ::autonomous_proto::CommunicationCommand_Markers* CommunicationCommand_Command::release_markers() {
  
  ::autonomous_proto::CommunicationCommand_Markers* temp = _impl_.markers_;
  _impl_.markers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::CommunicationCommand_Markers* CommunicationCommand_Command::unsafe_arena_release_markers() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Command.markers)
  
  ::autonomous_proto::CommunicationCommand_Markers* temp = _impl_.markers_;
  _impl_.markers_ = nullptr;
  return temp;
}
inline ::autonomous_proto::CommunicationCommand_Markers* CommunicationCommand_Command::_internal_mutable_markers() {
  
  if (_impl_.markers_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::CommunicationCommand_Markers>(GetArenaForAllocation());
    _impl_.markers_ = p;
  }
  return _impl_.markers_;
}
inline ::autonomous_proto::CommunicationCommand_Markers* CommunicationCommand_Command::mutable_markers() {
  ::autonomous_proto::CommunicationCommand_Markers* _msg = _internal_mutable_markers();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Command.markers)
  return _msg;
}
inline void CommunicationCommand_Command::set_allocated_markers(::autonomous_proto::CommunicationCommand_Markers* markers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.markers_;
  }
  if (markers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(markers);
    if (message_arena != submessage_arena) {
      markers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, markers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.markers_ = markers;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Command.markers)
}

// -------------------------------------------------------------------

// CommunicationCommand_Response

// .autonomous_proto.CommunicationCommand.Markers markers = 1;
inline bool CommunicationCommand_Response::_internal_has_markers() const {
  return this != internal_default_instance() && _impl_.markers_ != nullptr;
}
inline bool CommunicationCommand_Response::has_markers() const {
  return _internal_has_markers();
}
inline void CommunicationCommand_Response::clear_markers() {
  if (GetArenaForAllocation() == nullptr && _impl_.markers_ != nullptr) {
    delete _impl_.markers_;
  }
  _impl_.markers_ = nullptr;
}
inline const ::autonomous_proto::CommunicationCommand_Markers& CommunicationCommand_Response::_internal_markers() const {
  const ::autonomous_proto::CommunicationCommand_Markers* p = _impl_.markers_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::CommunicationCommand_Markers&>(
      ::autonomous_proto::_CommunicationCommand_Markers_default_instance_);
}
inline const ::autonomous_proto::CommunicationCommand_Markers& CommunicationCommand_Response::markers() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.Response.markers)
  return _internal_markers();
}
inline void CommunicationCommand_Response::unsafe_arena_set_allocated_markers(
    ::autonomous_proto::CommunicationCommand_Markers* markers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.markers_);
  }
  _impl_.markers_ = markers;
  if (markers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.Response.markers)
}
inline ::autonomous_proto::CommunicationCommand_Markers* CommunicationCommand_Response::release_markers() {
  
  ::autonomous_proto::CommunicationCommand_Markers* temp = _impl_.markers_;
  _impl_.markers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::CommunicationCommand_Markers* CommunicationCommand_Response::unsafe_arena_release_markers() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.Response.markers)
  
  ::autonomous_proto::CommunicationCommand_Markers* temp = _impl_.markers_;
  _impl_.markers_ = nullptr;
  return temp;
}
inline ::autonomous_proto::CommunicationCommand_Markers* CommunicationCommand_Response::_internal_mutable_markers() {
  
  if (_impl_.markers_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::CommunicationCommand_Markers>(GetArenaForAllocation());
    _impl_.markers_ = p;
  }
  return _impl_.markers_;
}
inline ::autonomous_proto::CommunicationCommand_Markers* CommunicationCommand_Response::mutable_markers() {
  ::autonomous_proto::CommunicationCommand_Markers* _msg = _internal_mutable_markers();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.Response.markers)
  return _msg;
}
inline void CommunicationCommand_Response::set_allocated_markers(::autonomous_proto::CommunicationCommand_Markers* markers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.markers_;
  }
  if (markers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(markers);
    if (message_arena != submessage_arena) {
      markers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, markers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.markers_ = markers;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.Response.markers)
}

// -------------------------------------------------------------------

// CommunicationCommand

// .autonomous_proto.CommunicationCommand.Command command = 1;
inline bool CommunicationCommand::_internal_has_command() const {
  return this != internal_default_instance() && _impl_.command_ != nullptr;
}
inline bool CommunicationCommand::has_command() const {
  return _internal_has_command();
}
inline void CommunicationCommand::clear_command() {
  if (GetArenaForAllocation() == nullptr && _impl_.command_ != nullptr) {
    delete _impl_.command_;
  }
  _impl_.command_ = nullptr;
}
inline const ::autonomous_proto::CommunicationCommand_Command& CommunicationCommand::_internal_command() const {
  const ::autonomous_proto::CommunicationCommand_Command* p = _impl_.command_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::CommunicationCommand_Command&>(
      ::autonomous_proto::_CommunicationCommand_Command_default_instance_);
}
inline const ::autonomous_proto::CommunicationCommand_Command& CommunicationCommand::command() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.command)
  return _internal_command();
}
inline void CommunicationCommand::unsafe_arena_set_allocated_command(
    ::autonomous_proto::CommunicationCommand_Command* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_);
  }
  _impl_.command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.command)
}
inline ::autonomous_proto::CommunicationCommand_Command* CommunicationCommand::release_command() {
  
  ::autonomous_proto::CommunicationCommand_Command* temp = _impl_.command_;
  _impl_.command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::CommunicationCommand_Command* CommunicationCommand::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.command)
  
  ::autonomous_proto::CommunicationCommand_Command* temp = _impl_.command_;
  _impl_.command_ = nullptr;
  return temp;
}
inline ::autonomous_proto::CommunicationCommand_Command* CommunicationCommand::_internal_mutable_command() {
  
  if (_impl_.command_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::CommunicationCommand_Command>(GetArenaForAllocation());
    _impl_.command_ = p;
  }
  return _impl_.command_;
}
inline ::autonomous_proto::CommunicationCommand_Command* CommunicationCommand::mutable_command() {
  ::autonomous_proto::CommunicationCommand_Command* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.command)
  return _msg;
}
inline void CommunicationCommand::set_allocated_command(::autonomous_proto::CommunicationCommand_Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.command_ = command;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.command)
}

// .autonomous_proto.CommunicationCommand.Response response = 2;
inline bool CommunicationCommand::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool CommunicationCommand::has_response() const {
  return _internal_has_response();
}
inline void CommunicationCommand::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
inline const ::autonomous_proto::CommunicationCommand_Response& CommunicationCommand::_internal_response() const {
  const ::autonomous_proto::CommunicationCommand_Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::CommunicationCommand_Response&>(
      ::autonomous_proto::_CommunicationCommand_Response_default_instance_);
}
inline const ::autonomous_proto::CommunicationCommand_Response& CommunicationCommand::response() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.CommunicationCommand.response)
  return _internal_response();
}
inline void CommunicationCommand::unsafe_arena_set_allocated_response(
    ::autonomous_proto::CommunicationCommand_Response* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.CommunicationCommand.response)
}
inline ::autonomous_proto::CommunicationCommand_Response* CommunicationCommand::release_response() {
  
  ::autonomous_proto::CommunicationCommand_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::CommunicationCommand_Response* CommunicationCommand::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:autonomous_proto.CommunicationCommand.response)
  
  ::autonomous_proto::CommunicationCommand_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::autonomous_proto::CommunicationCommand_Response* CommunicationCommand::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::CommunicationCommand_Response>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::autonomous_proto::CommunicationCommand_Response* CommunicationCommand::mutable_response() {
  ::autonomous_proto::CommunicationCommand_Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.CommunicationCommand.response)
  return _msg;
}
inline void CommunicationCommand::set_allocated_response(::autonomous_proto::CommunicationCommand_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.CommunicationCommand.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autonomous_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_communication_5fcommand_2eproto
