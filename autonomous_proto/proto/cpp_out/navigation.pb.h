// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navigation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_navigation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_navigation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "message_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_navigation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_navigation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_navigation_2eproto;
namespace autonomous_proto {
class Navigation;
struct NavigationDefaultTypeInternal;
extern NavigationDefaultTypeInternal _Navigation_default_instance_;
class Navigation_Acceleration;
struct Navigation_AccelerationDefaultTypeInternal;
extern Navigation_AccelerationDefaultTypeInternal _Navigation_Acceleration_default_instance_;
class Navigation_AngularAcceleration;
struct Navigation_AngularAccelerationDefaultTypeInternal;
extern Navigation_AngularAccelerationDefaultTypeInternal _Navigation_AngularAcceleration_default_instance_;
class Navigation_AngularVelocity;
struct Navigation_AngularVelocityDefaultTypeInternal;
extern Navigation_AngularVelocityDefaultTypeInternal _Navigation_AngularVelocity_default_instance_;
class Navigation_Orientation;
struct Navigation_OrientationDefaultTypeInternal;
extern Navigation_OrientationDefaultTypeInternal _Navigation_Orientation_default_instance_;
class Navigation_Position;
struct Navigation_PositionDefaultTypeInternal;
extern Navigation_PositionDefaultTypeInternal _Navigation_Position_default_instance_;
class Navigation_Velocity;
struct Navigation_VelocityDefaultTypeInternal;
extern Navigation_VelocityDefaultTypeInternal _Navigation_Velocity_default_instance_;
}  // namespace autonomous_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::autonomous_proto::Navigation* Arena::CreateMaybeMessage<::autonomous_proto::Navigation>(Arena*);
template<> ::autonomous_proto::Navigation_Acceleration* Arena::CreateMaybeMessage<::autonomous_proto::Navigation_Acceleration>(Arena*);
template<> ::autonomous_proto::Navigation_AngularAcceleration* Arena::CreateMaybeMessage<::autonomous_proto::Navigation_AngularAcceleration>(Arena*);
template<> ::autonomous_proto::Navigation_AngularVelocity* Arena::CreateMaybeMessage<::autonomous_proto::Navigation_AngularVelocity>(Arena*);
template<> ::autonomous_proto::Navigation_Orientation* Arena::CreateMaybeMessage<::autonomous_proto::Navigation_Orientation>(Arena*);
template<> ::autonomous_proto::Navigation_Position* Arena::CreateMaybeMessage<::autonomous_proto::Navigation_Position>(Arena*);
template<> ::autonomous_proto::Navigation_Velocity* Arena::CreateMaybeMessage<::autonomous_proto::Navigation_Velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autonomous_proto {

// ===================================================================

class Navigation_Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Navigation.Position) */ {
 public:
  inline Navigation_Position() : Navigation_Position(nullptr) {}
  ~Navigation_Position() override;
  explicit PROTOBUF_CONSTEXPR Navigation_Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigation_Position(const Navigation_Position& from);
  Navigation_Position(Navigation_Position&& from) noexcept
    : Navigation_Position() {
    *this = ::std::move(from);
  }

  inline Navigation_Position& operator=(const Navigation_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigation_Position& operator=(Navigation_Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Navigation_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigation_Position* internal_default_instance() {
    return reinterpret_cast<const Navigation_Position*>(
               &_Navigation_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Navigation_Position& a, Navigation_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Navigation_Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigation_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Navigation_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Navigation_Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Navigation_Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Navigation_Position& from) {
    Navigation_Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navigation_Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Navigation.Position";
  }
  protected:
  explicit Navigation_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLatFieldNumber = 2,
    kLonFieldNumber = 3,
    kAltFieldNumber = 4,
  };
  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .google.protobuf.DoubleValue lat = 2;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& lat() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_lat();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_lat();
  void set_allocated_lat(::PROTOBUF_NAMESPACE_ID::DoubleValue* lat);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_lat() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_lat();
  public:
  void unsafe_arena_set_allocated_lat(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* lat);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_lat();

  // .google.protobuf.DoubleValue lon = 3;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& lon() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_lon();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_lon();
  void set_allocated_lon(::PROTOBUF_NAMESPACE_ID::DoubleValue* lon);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_lon() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_lon();
  public:
  void unsafe_arena_set_allocated_lon(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* lon);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_lon();

  // .google.protobuf.DoubleValue alt = 4;
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& alt() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_alt();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_alt();
  void set_allocated_alt(::PROTOBUF_NAMESPACE_ID::DoubleValue* alt);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_alt() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_alt();
  public:
  void unsafe_arena_set_allocated_alt(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* alt);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_alt();

  // @@protoc_insertion_point(class_scope:autonomous_proto.Navigation.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::MessageInfo* header_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* lat_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* lon_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* alt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_navigation_2eproto;
};
// -------------------------------------------------------------------

class Navigation_Orientation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Navigation.Orientation) */ {
 public:
  inline Navigation_Orientation() : Navigation_Orientation(nullptr) {}
  ~Navigation_Orientation() override;
  explicit PROTOBUF_CONSTEXPR Navigation_Orientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigation_Orientation(const Navigation_Orientation& from);
  Navigation_Orientation(Navigation_Orientation&& from) noexcept
    : Navigation_Orientation() {
    *this = ::std::move(from);
  }

  inline Navigation_Orientation& operator=(const Navigation_Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigation_Orientation& operator=(Navigation_Orientation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Navigation_Orientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigation_Orientation* internal_default_instance() {
    return reinterpret_cast<const Navigation_Orientation*>(
               &_Navigation_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Navigation_Orientation& a, Navigation_Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Navigation_Orientation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigation_Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Navigation_Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Navigation_Orientation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Navigation_Orientation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Navigation_Orientation& from) {
    Navigation_Orientation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navigation_Orientation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Navigation.Orientation";
  }
  protected:
  explicit Navigation_Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRollFieldNumber = 2,
    kPitchFieldNumber = 3,
    kYawFieldNumber = 4,
  };
  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .google.protobuf.DoubleValue roll = 2;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& roll() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_roll();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_roll();
  void set_allocated_roll(::PROTOBUF_NAMESPACE_ID::DoubleValue* roll);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_roll() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_roll();
  public:
  void unsafe_arena_set_allocated_roll(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_roll();

  // .google.protobuf.DoubleValue pitch = 3;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& pitch() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_pitch();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_pitch();
  void set_allocated_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_pitch() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_pitch();
  public:
  void unsafe_arena_set_allocated_pitch(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_pitch();

  // .google.protobuf.DoubleValue yaw = 4;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_yaw();
  void set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_yaw();
  public:
  void unsafe_arena_set_allocated_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_yaw();

  // @@protoc_insertion_point(class_scope:autonomous_proto.Navigation.Orientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::MessageInfo* header_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_navigation_2eproto;
};
// -------------------------------------------------------------------

class Navigation_Velocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Navigation.Velocity) */ {
 public:
  inline Navigation_Velocity() : Navigation_Velocity(nullptr) {}
  ~Navigation_Velocity() override;
  explicit PROTOBUF_CONSTEXPR Navigation_Velocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigation_Velocity(const Navigation_Velocity& from);
  Navigation_Velocity(Navigation_Velocity&& from) noexcept
    : Navigation_Velocity() {
    *this = ::std::move(from);
  }

  inline Navigation_Velocity& operator=(const Navigation_Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigation_Velocity& operator=(Navigation_Velocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Navigation_Velocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigation_Velocity* internal_default_instance() {
    return reinterpret_cast<const Navigation_Velocity*>(
               &_Navigation_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Navigation_Velocity& a, Navigation_Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Navigation_Velocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigation_Velocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Navigation_Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Navigation_Velocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Navigation_Velocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Navigation_Velocity& from) {
    Navigation_Velocity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navigation_Velocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Navigation.Velocity";
  }
  protected:
  explicit Navigation_Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kEFieldNumber = 2,
    kNFieldNumber = 3,
    kUFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
  };
  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .google.protobuf.DoubleValue e = 2;
  bool has_e() const;
  private:
  bool _internal_has_e() const;
  public:
  void clear_e();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& e() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_e();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_e();
  void set_allocated_e(::PROTOBUF_NAMESPACE_ID::DoubleValue* e);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_e() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_e();
  public:
  void unsafe_arena_set_allocated_e(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* e);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_e();

  // .google.protobuf.DoubleValue n = 3;
  bool has_n() const;
  private:
  bool _internal_has_n() const;
  public:
  void clear_n();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& n() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_n();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_n();
  void set_allocated_n(::PROTOBUF_NAMESPACE_ID::DoubleValue* n);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_n() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_n();
  public:
  void unsafe_arena_set_allocated_n(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* n);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_n();

  // .google.protobuf.DoubleValue u = 4;
  bool has_u() const;
  private:
  bool _internal_has_u() const;
  public:
  void clear_u();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& u() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_u();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_u();
  void set_allocated_u(::PROTOBUF_NAMESPACE_ID::DoubleValue* u);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_u() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_u();
  public:
  void unsafe_arena_set_allocated_u(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* u);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_u();

  // .google.protobuf.DoubleValue x = 5;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& x() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_x();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_x();
  void set_allocated_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* x);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_x() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* x);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_x();

  // .google.protobuf.DoubleValue y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& y() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_y();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_y();
  void set_allocated_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* y);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_y() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* y);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_y();

  // .google.protobuf.DoubleValue z = 7;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& z() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_z();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_z();
  void set_allocated_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_z() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_z();

  // @@protoc_insertion_point(class_scope:autonomous_proto.Navigation.Velocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::MessageInfo* header_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* e_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* n_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* u_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* x_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* y_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_navigation_2eproto;
};
// -------------------------------------------------------------------

class Navigation_AngularVelocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Navigation.AngularVelocity) */ {
 public:
  inline Navigation_AngularVelocity() : Navigation_AngularVelocity(nullptr) {}
  ~Navigation_AngularVelocity() override;
  explicit PROTOBUF_CONSTEXPR Navigation_AngularVelocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigation_AngularVelocity(const Navigation_AngularVelocity& from);
  Navigation_AngularVelocity(Navigation_AngularVelocity&& from) noexcept
    : Navigation_AngularVelocity() {
    *this = ::std::move(from);
  }

  inline Navigation_AngularVelocity& operator=(const Navigation_AngularVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigation_AngularVelocity& operator=(Navigation_AngularVelocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Navigation_AngularVelocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigation_AngularVelocity* internal_default_instance() {
    return reinterpret_cast<const Navigation_AngularVelocity*>(
               &_Navigation_AngularVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Navigation_AngularVelocity& a, Navigation_AngularVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Navigation_AngularVelocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigation_AngularVelocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Navigation_AngularVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Navigation_AngularVelocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Navigation_AngularVelocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Navigation_AngularVelocity& from) {
    Navigation_AngularVelocity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navigation_AngularVelocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Navigation.AngularVelocity";
  }
  protected:
  explicit Navigation_AngularVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kEFieldNumber = 2,
    kNFieldNumber = 3,
    kUFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
  };
  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .google.protobuf.DoubleValue e = 2;
  bool has_e() const;
  private:
  bool _internal_has_e() const;
  public:
  void clear_e();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& e() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_e();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_e();
  void set_allocated_e(::PROTOBUF_NAMESPACE_ID::DoubleValue* e);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_e() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_e();
  public:
  void unsafe_arena_set_allocated_e(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* e);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_e();

  // .google.protobuf.DoubleValue n = 3;
  bool has_n() const;
  private:
  bool _internal_has_n() const;
  public:
  void clear_n();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& n() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_n();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_n();
  void set_allocated_n(::PROTOBUF_NAMESPACE_ID::DoubleValue* n);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_n() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_n();
  public:
  void unsafe_arena_set_allocated_n(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* n);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_n();

  // .google.protobuf.DoubleValue u = 4;
  bool has_u() const;
  private:
  bool _internal_has_u() const;
  public:
  void clear_u();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& u() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_u();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_u();
  void set_allocated_u(::PROTOBUF_NAMESPACE_ID::DoubleValue* u);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_u() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_u();
  public:
  void unsafe_arena_set_allocated_u(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* u);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_u();

  // .google.protobuf.DoubleValue x = 5;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& x() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_x();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_x();
  void set_allocated_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* x);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_x() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* x);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_x();

  // .google.protobuf.DoubleValue y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& y() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_y();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_y();
  void set_allocated_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* y);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_y() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* y);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_y();

  // .google.protobuf.DoubleValue z = 7;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& z() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_z();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_z();
  void set_allocated_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_z() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_z();

  // @@protoc_insertion_point(class_scope:autonomous_proto.Navigation.AngularVelocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::MessageInfo* header_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* e_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* n_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* u_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* x_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* y_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_navigation_2eproto;
};
// -------------------------------------------------------------------

class Navigation_Acceleration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Navigation.Acceleration) */ {
 public:
  inline Navigation_Acceleration() : Navigation_Acceleration(nullptr) {}
  ~Navigation_Acceleration() override;
  explicit PROTOBUF_CONSTEXPR Navigation_Acceleration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigation_Acceleration(const Navigation_Acceleration& from);
  Navigation_Acceleration(Navigation_Acceleration&& from) noexcept
    : Navigation_Acceleration() {
    *this = ::std::move(from);
  }

  inline Navigation_Acceleration& operator=(const Navigation_Acceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigation_Acceleration& operator=(Navigation_Acceleration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Navigation_Acceleration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigation_Acceleration* internal_default_instance() {
    return reinterpret_cast<const Navigation_Acceleration*>(
               &_Navigation_Acceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Navigation_Acceleration& a, Navigation_Acceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Navigation_Acceleration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigation_Acceleration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Navigation_Acceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Navigation_Acceleration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Navigation_Acceleration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Navigation_Acceleration& from) {
    Navigation_Acceleration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navigation_Acceleration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Navigation.Acceleration";
  }
  protected:
  explicit Navigation_Acceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kEFieldNumber = 2,
    kNFieldNumber = 3,
    kUFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
  };
  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .google.protobuf.DoubleValue e = 2;
  bool has_e() const;
  private:
  bool _internal_has_e() const;
  public:
  void clear_e();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& e() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_e();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_e();
  void set_allocated_e(::PROTOBUF_NAMESPACE_ID::DoubleValue* e);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_e() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_e();
  public:
  void unsafe_arena_set_allocated_e(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* e);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_e();

  // .google.protobuf.DoubleValue n = 3;
  bool has_n() const;
  private:
  bool _internal_has_n() const;
  public:
  void clear_n();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& n() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_n();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_n();
  void set_allocated_n(::PROTOBUF_NAMESPACE_ID::DoubleValue* n);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_n() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_n();
  public:
  void unsafe_arena_set_allocated_n(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* n);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_n();

  // .google.protobuf.DoubleValue u = 4;
  bool has_u() const;
  private:
  bool _internal_has_u() const;
  public:
  void clear_u();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& u() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_u();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_u();
  void set_allocated_u(::PROTOBUF_NAMESPACE_ID::DoubleValue* u);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_u() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_u();
  public:
  void unsafe_arena_set_allocated_u(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* u);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_u();

  // .google.protobuf.DoubleValue x = 5;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& x() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_x();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_x();
  void set_allocated_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* x);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_x() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* x);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_x();

  // .google.protobuf.DoubleValue y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& y() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_y();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_y();
  void set_allocated_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* y);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_y() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* y);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_y();

  // .google.protobuf.DoubleValue z = 7;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& z() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_z();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_z();
  void set_allocated_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_z() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_z();

  // @@protoc_insertion_point(class_scope:autonomous_proto.Navigation.Acceleration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::MessageInfo* header_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* e_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* n_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* u_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* x_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* y_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_navigation_2eproto;
};
// -------------------------------------------------------------------

class Navigation_AngularAcceleration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Navigation.AngularAcceleration) */ {
 public:
  inline Navigation_AngularAcceleration() : Navigation_AngularAcceleration(nullptr) {}
  ~Navigation_AngularAcceleration() override;
  explicit PROTOBUF_CONSTEXPR Navigation_AngularAcceleration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigation_AngularAcceleration(const Navigation_AngularAcceleration& from);
  Navigation_AngularAcceleration(Navigation_AngularAcceleration&& from) noexcept
    : Navigation_AngularAcceleration() {
    *this = ::std::move(from);
  }

  inline Navigation_AngularAcceleration& operator=(const Navigation_AngularAcceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigation_AngularAcceleration& operator=(Navigation_AngularAcceleration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Navigation_AngularAcceleration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigation_AngularAcceleration* internal_default_instance() {
    return reinterpret_cast<const Navigation_AngularAcceleration*>(
               &_Navigation_AngularAcceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Navigation_AngularAcceleration& a, Navigation_AngularAcceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Navigation_AngularAcceleration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigation_AngularAcceleration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Navigation_AngularAcceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Navigation_AngularAcceleration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Navigation_AngularAcceleration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Navigation_AngularAcceleration& from) {
    Navigation_AngularAcceleration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navigation_AngularAcceleration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Navigation.AngularAcceleration";
  }
  protected:
  explicit Navigation_AngularAcceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kEFieldNumber = 2,
    kNFieldNumber = 3,
    kUFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
  };
  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .google.protobuf.DoubleValue e = 2;
  bool has_e() const;
  private:
  bool _internal_has_e() const;
  public:
  void clear_e();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& e() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_e();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_e();
  void set_allocated_e(::PROTOBUF_NAMESPACE_ID::DoubleValue* e);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_e() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_e();
  public:
  void unsafe_arena_set_allocated_e(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* e);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_e();

  // .google.protobuf.DoubleValue n = 3;
  bool has_n() const;
  private:
  bool _internal_has_n() const;
  public:
  void clear_n();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& n() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_n();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_n();
  void set_allocated_n(::PROTOBUF_NAMESPACE_ID::DoubleValue* n);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_n() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_n();
  public:
  void unsafe_arena_set_allocated_n(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* n);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_n();

  // .google.protobuf.DoubleValue u = 4;
  bool has_u() const;
  private:
  bool _internal_has_u() const;
  public:
  void clear_u();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& u() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_u();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_u();
  void set_allocated_u(::PROTOBUF_NAMESPACE_ID::DoubleValue* u);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_u() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_u();
  public:
  void unsafe_arena_set_allocated_u(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* u);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_u();

  // .google.protobuf.DoubleValue x = 5;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& x() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_x();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_x();
  void set_allocated_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* x);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_x() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* x);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_x();

  // .google.protobuf.DoubleValue y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& y() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_y();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_y();
  void set_allocated_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* y);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_y() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* y);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_y();

  // .google.protobuf.DoubleValue z = 7;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& z() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_z();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_z();
  void set_allocated_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_z() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_z();

  // @@protoc_insertion_point(class_scope:autonomous_proto.Navigation.AngularAcceleration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::MessageInfo* header_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* e_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* n_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* u_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* x_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* y_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_navigation_2eproto;
};
// -------------------------------------------------------------------

class Navigation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autonomous_proto.Navigation) */ {
 public:
  inline Navigation() : Navigation(nullptr) {}
  ~Navigation() override;
  explicit PROTOBUF_CONSTEXPR Navigation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigation(const Navigation& from);
  Navigation(Navigation&& from) noexcept
    : Navigation() {
    *this = ::std::move(from);
  }

  inline Navigation& operator=(const Navigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigation& operator=(Navigation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Navigation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigation* internal_default_instance() {
    return reinterpret_cast<const Navigation*>(
               &_Navigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Navigation& a, Navigation& b) {
    a.Swap(&b);
  }
  inline void Swap(Navigation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Navigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Navigation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Navigation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Navigation& from) {
    Navigation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navigation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autonomous_proto.Navigation";
  }
  protected:
  explicit Navigation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Navigation_Position Position;
  typedef Navigation_Orientation Orientation;
  typedef Navigation_Velocity Velocity;
  typedef Navigation_AngularVelocity AngularVelocity;
  typedef Navigation_Acceleration Acceleration;
  typedef Navigation_AngularAcceleration AngularAcceleration;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
    kAccelerationFieldNumber = 6,
    kAngularAccelerationFieldNumber = 7,
  };
  // .autonomous_proto.MessageInfo header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autonomous_proto::MessageInfo& header() const;
  PROTOBUF_NODISCARD ::autonomous_proto::MessageInfo* release_header();
  ::autonomous_proto::MessageInfo* mutable_header();
  void set_allocated_header(::autonomous_proto::MessageInfo* header);
  private:
  const ::autonomous_proto::MessageInfo& _internal_header() const;
  ::autonomous_proto::MessageInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autonomous_proto::MessageInfo* header);
  ::autonomous_proto::MessageInfo* unsafe_arena_release_header();

  // .autonomous_proto.Navigation.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::autonomous_proto::Navigation_Position& position() const;
  PROTOBUF_NODISCARD ::autonomous_proto::Navigation_Position* release_position();
  ::autonomous_proto::Navigation_Position* mutable_position();
  void set_allocated_position(::autonomous_proto::Navigation_Position* position);
  private:
  const ::autonomous_proto::Navigation_Position& _internal_position() const;
  ::autonomous_proto::Navigation_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::autonomous_proto::Navigation_Position* position);
  ::autonomous_proto::Navigation_Position* unsafe_arena_release_position();

  // .autonomous_proto.Navigation.Orientation orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::autonomous_proto::Navigation_Orientation& orientation() const;
  PROTOBUF_NODISCARD ::autonomous_proto::Navigation_Orientation* release_orientation();
  ::autonomous_proto::Navigation_Orientation* mutable_orientation();
  void set_allocated_orientation(::autonomous_proto::Navigation_Orientation* orientation);
  private:
  const ::autonomous_proto::Navigation_Orientation& _internal_orientation() const;
  ::autonomous_proto::Navigation_Orientation* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::autonomous_proto::Navigation_Orientation* orientation);
  ::autonomous_proto::Navigation_Orientation* unsafe_arena_release_orientation();

  // .autonomous_proto.Navigation.Velocity velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::autonomous_proto::Navigation_Velocity& velocity() const;
  PROTOBUF_NODISCARD ::autonomous_proto::Navigation_Velocity* release_velocity();
  ::autonomous_proto::Navigation_Velocity* mutable_velocity();
  void set_allocated_velocity(::autonomous_proto::Navigation_Velocity* velocity);
  private:
  const ::autonomous_proto::Navigation_Velocity& _internal_velocity() const;
  ::autonomous_proto::Navigation_Velocity* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::autonomous_proto::Navigation_Velocity* velocity);
  ::autonomous_proto::Navigation_Velocity* unsafe_arena_release_velocity();

  // .autonomous_proto.Navigation.AngularVelocity angular_velocity = 5;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::autonomous_proto::Navigation_AngularVelocity& angular_velocity() const;
  PROTOBUF_NODISCARD ::autonomous_proto::Navigation_AngularVelocity* release_angular_velocity();
  ::autonomous_proto::Navigation_AngularVelocity* mutable_angular_velocity();
  void set_allocated_angular_velocity(::autonomous_proto::Navigation_AngularVelocity* angular_velocity);
  private:
  const ::autonomous_proto::Navigation_AngularVelocity& _internal_angular_velocity() const;
  ::autonomous_proto::Navigation_AngularVelocity* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::autonomous_proto::Navigation_AngularVelocity* angular_velocity);
  ::autonomous_proto::Navigation_AngularVelocity* unsafe_arena_release_angular_velocity();

  // .autonomous_proto.Navigation.Acceleration acceleration = 6;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::autonomous_proto::Navigation_Acceleration& acceleration() const;
  PROTOBUF_NODISCARD ::autonomous_proto::Navigation_Acceleration* release_acceleration();
  ::autonomous_proto::Navigation_Acceleration* mutable_acceleration();
  void set_allocated_acceleration(::autonomous_proto::Navigation_Acceleration* acceleration);
  private:
  const ::autonomous_proto::Navigation_Acceleration& _internal_acceleration() const;
  ::autonomous_proto::Navigation_Acceleration* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::autonomous_proto::Navigation_Acceleration* acceleration);
  ::autonomous_proto::Navigation_Acceleration* unsafe_arena_release_acceleration();

  // .autonomous_proto.Navigation.AngularAcceleration angular_acceleration = 7;
  bool has_angular_acceleration() const;
  private:
  bool _internal_has_angular_acceleration() const;
  public:
  void clear_angular_acceleration();
  const ::autonomous_proto::Navigation_AngularAcceleration& angular_acceleration() const;
  PROTOBUF_NODISCARD ::autonomous_proto::Navigation_AngularAcceleration* release_angular_acceleration();
  ::autonomous_proto::Navigation_AngularAcceleration* mutable_angular_acceleration();
  void set_allocated_angular_acceleration(::autonomous_proto::Navigation_AngularAcceleration* angular_acceleration);
  private:
  const ::autonomous_proto::Navigation_AngularAcceleration& _internal_angular_acceleration() const;
  ::autonomous_proto::Navigation_AngularAcceleration* _internal_mutable_angular_acceleration();
  public:
  void unsafe_arena_set_allocated_angular_acceleration(
      ::autonomous_proto::Navigation_AngularAcceleration* angular_acceleration);
  ::autonomous_proto::Navigation_AngularAcceleration* unsafe_arena_release_angular_acceleration();

  // @@protoc_insertion_point(class_scope:autonomous_proto.Navigation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::autonomous_proto::MessageInfo* header_;
    ::autonomous_proto::Navigation_Position* position_;
    ::autonomous_proto::Navigation_Orientation* orientation_;
    ::autonomous_proto::Navigation_Velocity* velocity_;
    ::autonomous_proto::Navigation_AngularVelocity* angular_velocity_;
    ::autonomous_proto::Navigation_Acceleration* acceleration_;
    ::autonomous_proto::Navigation_AngularAcceleration* angular_acceleration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_navigation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Navigation_Position

// .autonomous_proto.MessageInfo header = 1;
inline bool Navigation_Position::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Navigation_Position::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& Navigation_Position::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& Navigation_Position::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Position.header)
  return _internal_header();
}
inline void Navigation_Position::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Position.header)
}
inline ::autonomous_proto::MessageInfo* Navigation_Position::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_Position::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Position.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_Position::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* Navigation_Position::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Position.header)
  return _msg;
}
inline void Navigation_Position::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Position.header)
}

// .google.protobuf.DoubleValue lat = 2;
inline bool Navigation_Position::_internal_has_lat() const {
  return this != internal_default_instance() && _impl_.lat_ != nullptr;
}
inline bool Navigation_Position::has_lat() const {
  return _internal_has_lat();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Position::_internal_lat() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.lat_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Position::lat() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Position.lat)
  return _internal_lat();
}
inline void Navigation_Position::unsafe_arena_set_allocated_lat(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* lat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lat_);
  }
  _impl_.lat_ = lat;
  if (lat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Position.lat)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::release_lat() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.lat_;
  _impl_.lat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::unsafe_arena_release_lat() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Position.lat)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.lat_;
  _impl_.lat_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::_internal_mutable_lat() {
  
  if (_impl_.lat_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.lat_ = p;
  }
  return _impl_.lat_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::mutable_lat() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_lat();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Position.lat)
  return _msg;
}
inline void Navigation_Position::set_allocated_lat(::PROTOBUF_NAMESPACE_ID::DoubleValue* lat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lat_);
  }
  if (lat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat));
    if (message_arena != submessage_arena) {
      lat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lat_ = lat;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Position.lat)
}

// .google.protobuf.DoubleValue lon = 3;
inline bool Navigation_Position::_internal_has_lon() const {
  return this != internal_default_instance() && _impl_.lon_ != nullptr;
}
inline bool Navigation_Position::has_lon() const {
  return _internal_has_lon();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Position::_internal_lon() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.lon_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Position::lon() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Position.lon)
  return _internal_lon();
}
inline void Navigation_Position::unsafe_arena_set_allocated_lon(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* lon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lon_);
  }
  _impl_.lon_ = lon;
  if (lon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Position.lon)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::release_lon() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.lon_;
  _impl_.lon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::unsafe_arena_release_lon() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Position.lon)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.lon_;
  _impl_.lon_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::_internal_mutable_lon() {
  
  if (_impl_.lon_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.lon_ = p;
  }
  return _impl_.lon_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::mutable_lon() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_lon();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Position.lon)
  return _msg;
}
inline void Navigation_Position::set_allocated_lon(::PROTOBUF_NAMESPACE_ID::DoubleValue* lon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lon_);
  }
  if (lon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon));
    if (message_arena != submessage_arena) {
      lon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lon, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lon_ = lon;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Position.lon)
}

// .google.protobuf.DoubleValue alt = 4;
inline bool Navigation_Position::_internal_has_alt() const {
  return this != internal_default_instance() && _impl_.alt_ != nullptr;
}
inline bool Navigation_Position::has_alt() const {
  return _internal_has_alt();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Position::_internal_alt() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.alt_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Position::alt() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Position.alt)
  return _internal_alt();
}
inline void Navigation_Position::unsafe_arena_set_allocated_alt(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* alt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alt_);
  }
  _impl_.alt_ = alt;
  if (alt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Position.alt)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::release_alt() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.alt_;
  _impl_.alt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::unsafe_arena_release_alt() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Position.alt)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.alt_;
  _impl_.alt_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::_internal_mutable_alt() {
  
  if (_impl_.alt_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.alt_ = p;
  }
  return _impl_.alt_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Position::mutable_alt() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_alt();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Position.alt)
  return _msg;
}
inline void Navigation_Position::set_allocated_alt(::PROTOBUF_NAMESPACE_ID::DoubleValue* alt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alt_);
  }
  if (alt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alt));
    if (message_arena != submessage_arena) {
      alt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.alt_ = alt;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Position.alt)
}

// -------------------------------------------------------------------

// Navigation_Orientation

// .autonomous_proto.MessageInfo header = 1;
inline bool Navigation_Orientation::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Navigation_Orientation::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& Navigation_Orientation::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& Navigation_Orientation::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Orientation.header)
  return _internal_header();
}
inline void Navigation_Orientation::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Orientation.header)
}
inline ::autonomous_proto::MessageInfo* Navigation_Orientation::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_Orientation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Orientation.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_Orientation::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* Navigation_Orientation::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Orientation.header)
  return _msg;
}
inline void Navigation_Orientation::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Orientation.header)
}

// .google.protobuf.DoubleValue roll = 2;
inline bool Navigation_Orientation::_internal_has_roll() const {
  return this != internal_default_instance() && _impl_.roll_ != nullptr;
}
inline bool Navigation_Orientation::has_roll() const {
  return _internal_has_roll();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Orientation::_internal_roll() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.roll_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Orientation::roll() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Orientation.roll)
  return _internal_roll();
}
inline void Navigation_Orientation::unsafe_arena_set_allocated_roll(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roll_);
  }
  _impl_.roll_ = roll;
  if (roll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Orientation.roll)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::release_roll() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.roll_;
  _impl_.roll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::unsafe_arena_release_roll() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Orientation.roll)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.roll_;
  _impl_.roll_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::_internal_mutable_roll() {
  
  if (_impl_.roll_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.roll_ = p;
  }
  return _impl_.roll_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::mutable_roll() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_roll();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Orientation.roll)
  return _msg;
}
inline void Navigation_Orientation::set_allocated_roll(::PROTOBUF_NAMESPACE_ID::DoubleValue* roll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roll_);
  }
  if (roll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roll));
    if (message_arena != submessage_arena) {
      roll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roll_ = roll;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Orientation.roll)
}

// .google.protobuf.DoubleValue pitch = 3;
inline bool Navigation_Orientation::_internal_has_pitch() const {
  return this != internal_default_instance() && _impl_.pitch_ != nullptr;
}
inline bool Navigation_Orientation::has_pitch() const {
  return _internal_has_pitch();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Orientation::_internal_pitch() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.pitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Orientation::pitch() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Orientation.pitch)
  return _internal_pitch();
}
inline void Navigation_Orientation::unsafe_arena_set_allocated_pitch(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pitch_);
  }
  _impl_.pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Orientation.pitch)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::release_pitch() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.pitch_;
  _impl_.pitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::unsafe_arena_release_pitch() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Orientation.pitch)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.pitch_;
  _impl_.pitch_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::_internal_mutable_pitch() {
  
  if (_impl_.pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.pitch_ = p;
  }
  return _impl_.pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::mutable_pitch() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_pitch();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Orientation.pitch)
  return _msg;
}
inline void Navigation_Orientation::set_allocated_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pitch_);
  }
  if (pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch));
    if (message_arena != submessage_arena) {
      pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pitch_ = pitch;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Orientation.pitch)
}

// .google.protobuf.DoubleValue yaw = 4;
inline bool Navigation_Orientation::_internal_has_yaw() const {
  return this != internal_default_instance() && _impl_.yaw_ != nullptr;
}
inline bool Navigation_Orientation::has_yaw() const {
  return _internal_has_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Orientation::_internal_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Orientation::yaw() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Orientation.yaw)
  return _internal_yaw();
}
inline void Navigation_Orientation::unsafe_arena_set_allocated_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  _impl_.yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Orientation.yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::release_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::unsafe_arena_release_yaw() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Orientation.yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::_internal_mutable_yaw() {
  
  if (_impl_.yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.yaw_ = p;
  }
  return _impl_.yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Orientation::mutable_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_yaw();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Orientation.yaw)
  return _msg;
}
inline void Navigation_Orientation::set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  if (yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw));
    if (message_arena != submessage_arena) {
      yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_ = yaw;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Orientation.yaw)
}

// -------------------------------------------------------------------

// Navigation_Velocity

// .autonomous_proto.MessageInfo header = 1;
inline bool Navigation_Velocity::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Navigation_Velocity::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& Navigation_Velocity::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& Navigation_Velocity::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Velocity.header)
  return _internal_header();
}
inline void Navigation_Velocity::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Velocity.header)
}
inline ::autonomous_proto::MessageInfo* Navigation_Velocity::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_Velocity::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Velocity.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_Velocity::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* Navigation_Velocity::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Velocity.header)
  return _msg;
}
inline void Navigation_Velocity::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Velocity.header)
}

// .google.protobuf.DoubleValue e = 2;
inline bool Navigation_Velocity::_internal_has_e() const {
  return this != internal_default_instance() && _impl_.e_ != nullptr;
}
inline bool Navigation_Velocity::has_e() const {
  return _internal_has_e();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::_internal_e() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.e_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::e() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Velocity.e)
  return _internal_e();
}
inline void Navigation_Velocity::unsafe_arena_set_allocated_e(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* e) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.e_);
  }
  _impl_.e_ = e;
  if (e) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Velocity.e)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::release_e() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.e_;
  _impl_.e_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::unsafe_arena_release_e() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Velocity.e)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.e_;
  _impl_.e_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::_internal_mutable_e() {
  
  if (_impl_.e_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.e_ = p;
  }
  return _impl_.e_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::mutable_e() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Velocity.e)
  return _msg;
}
inline void Navigation_Velocity::set_allocated_e(::PROTOBUF_NAMESPACE_ID::DoubleValue* e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.e_);
  }
  if (e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e));
    if (message_arena != submessage_arena) {
      e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.e_ = e;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Velocity.e)
}

// .google.protobuf.DoubleValue n = 3;
inline bool Navigation_Velocity::_internal_has_n() const {
  return this != internal_default_instance() && _impl_.n_ != nullptr;
}
inline bool Navigation_Velocity::has_n() const {
  return _internal_has_n();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::_internal_n() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.n_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::n() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Velocity.n)
  return _internal_n();
}
inline void Navigation_Velocity::unsafe_arena_set_allocated_n(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* n) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.n_);
  }
  _impl_.n_ = n;
  if (n) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Velocity.n)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::release_n() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.n_;
  _impl_.n_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::unsafe_arena_release_n() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Velocity.n)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.n_;
  _impl_.n_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::_internal_mutable_n() {
  
  if (_impl_.n_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.n_ = p;
  }
  return _impl_.n_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::mutable_n() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_n();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Velocity.n)
  return _msg;
}
inline void Navigation_Velocity::set_allocated_n(::PROTOBUF_NAMESPACE_ID::DoubleValue* n) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.n_);
  }
  if (n) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(n));
    if (message_arena != submessage_arena) {
      n = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, n, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.n_ = n;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Velocity.n)
}

// .google.protobuf.DoubleValue u = 4;
inline bool Navigation_Velocity::_internal_has_u() const {
  return this != internal_default_instance() && _impl_.u_ != nullptr;
}
inline bool Navigation_Velocity::has_u() const {
  return _internal_has_u();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::_internal_u() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.u_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::u() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Velocity.u)
  return _internal_u();
}
inline void Navigation_Velocity::unsafe_arena_set_allocated_u(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* u) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.u_);
  }
  _impl_.u_ = u;
  if (u) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Velocity.u)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::release_u() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.u_;
  _impl_.u_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::unsafe_arena_release_u() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Velocity.u)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.u_;
  _impl_.u_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::_internal_mutable_u() {
  
  if (_impl_.u_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.u_ = p;
  }
  return _impl_.u_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::mutable_u() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_u();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Velocity.u)
  return _msg;
}
inline void Navigation_Velocity::set_allocated_u(::PROTOBUF_NAMESPACE_ID::DoubleValue* u) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.u_);
  }
  if (u) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(u));
    if (message_arena != submessage_arena) {
      u = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.u_ = u;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Velocity.u)
}

// .google.protobuf.DoubleValue x = 5;
inline bool Navigation_Velocity::_internal_has_x() const {
  return this != internal_default_instance() && _impl_.x_ != nullptr;
}
inline bool Navigation_Velocity::has_x() const {
  return _internal_has_x();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::_internal_x() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::x() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Velocity.x)
  return _internal_x();
}
inline void Navigation_Velocity::unsafe_arena_set_allocated_x(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Velocity.x)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::release_x() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Velocity.x)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::_internal_mutable_x() {
  
  if (_impl_.x_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.x_ = p;
  }
  return _impl_.x_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::mutable_x() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Velocity.x)
  return _msg;
}
inline void Navigation_Velocity::set_allocated_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x));
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.x_ = x;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Velocity.x)
}

// .google.protobuf.DoubleValue y = 6;
inline bool Navigation_Velocity::_internal_has_y() const {
  return this != internal_default_instance() && _impl_.y_ != nullptr;
}
inline bool Navigation_Velocity::has_y() const {
  return _internal_has_y();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::_internal_y() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::y() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Velocity.y)
  return _internal_y();
}
inline void Navigation_Velocity::unsafe_arena_set_allocated_y(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Velocity.y)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::release_y() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Velocity.y)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::_internal_mutable_y() {
  
  if (_impl_.y_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.y_ = p;
  }
  return _impl_.y_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::mutable_y() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Velocity.y)
  return _msg;
}
inline void Navigation_Velocity::set_allocated_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y));
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.y_ = y;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Velocity.y)
}

// .google.protobuf.DoubleValue z = 7;
inline bool Navigation_Velocity::_internal_has_z() const {
  return this != internal_default_instance() && _impl_.z_ != nullptr;
}
inline bool Navigation_Velocity::has_z() const {
  return _internal_has_z();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::_internal_z() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.z_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Velocity::z() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Velocity.z)
  return _internal_z();
}
inline void Navigation_Velocity::unsafe_arena_set_allocated_z(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  _impl_.z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Velocity.z)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::release_z() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Velocity.z)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::_internal_mutable_z() {
  
  if (_impl_.z_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.z_ = p;
  }
  return _impl_.z_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Velocity::mutable_z() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Velocity.z)
  return _msg;
}
inline void Navigation_Velocity::set_allocated_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z));
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.z_ = z;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Velocity.z)
}

// -------------------------------------------------------------------

// Navigation_AngularVelocity

// .autonomous_proto.MessageInfo header = 1;
inline bool Navigation_AngularVelocity::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Navigation_AngularVelocity::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& Navigation_AngularVelocity::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& Navigation_AngularVelocity::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularVelocity.header)
  return _internal_header();
}
inline void Navigation_AngularVelocity::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularVelocity.header)
}
inline ::autonomous_proto::MessageInfo* Navigation_AngularVelocity::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_AngularVelocity::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularVelocity.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_AngularVelocity::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* Navigation_AngularVelocity::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularVelocity.header)
  return _msg;
}
inline void Navigation_AngularVelocity::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularVelocity.header)
}

// .google.protobuf.DoubleValue e = 2;
inline bool Navigation_AngularVelocity::_internal_has_e() const {
  return this != internal_default_instance() && _impl_.e_ != nullptr;
}
inline bool Navigation_AngularVelocity::has_e() const {
  return _internal_has_e();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::_internal_e() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.e_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::e() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularVelocity.e)
  return _internal_e();
}
inline void Navigation_AngularVelocity::unsafe_arena_set_allocated_e(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* e) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.e_);
  }
  _impl_.e_ = e;
  if (e) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularVelocity.e)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::release_e() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.e_;
  _impl_.e_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::unsafe_arena_release_e() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularVelocity.e)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.e_;
  _impl_.e_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::_internal_mutable_e() {
  
  if (_impl_.e_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.e_ = p;
  }
  return _impl_.e_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::mutable_e() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularVelocity.e)
  return _msg;
}
inline void Navigation_AngularVelocity::set_allocated_e(::PROTOBUF_NAMESPACE_ID::DoubleValue* e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.e_);
  }
  if (e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e));
    if (message_arena != submessage_arena) {
      e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.e_ = e;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularVelocity.e)
}

// .google.protobuf.DoubleValue n = 3;
inline bool Navigation_AngularVelocity::_internal_has_n() const {
  return this != internal_default_instance() && _impl_.n_ != nullptr;
}
inline bool Navigation_AngularVelocity::has_n() const {
  return _internal_has_n();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::_internal_n() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.n_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::n() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularVelocity.n)
  return _internal_n();
}
inline void Navigation_AngularVelocity::unsafe_arena_set_allocated_n(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* n) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.n_);
  }
  _impl_.n_ = n;
  if (n) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularVelocity.n)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::release_n() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.n_;
  _impl_.n_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::unsafe_arena_release_n() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularVelocity.n)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.n_;
  _impl_.n_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::_internal_mutable_n() {
  
  if (_impl_.n_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.n_ = p;
  }
  return _impl_.n_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::mutable_n() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_n();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularVelocity.n)
  return _msg;
}
inline void Navigation_AngularVelocity::set_allocated_n(::PROTOBUF_NAMESPACE_ID::DoubleValue* n) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.n_);
  }
  if (n) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(n));
    if (message_arena != submessage_arena) {
      n = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, n, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.n_ = n;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularVelocity.n)
}

// .google.protobuf.DoubleValue u = 4;
inline bool Navigation_AngularVelocity::_internal_has_u() const {
  return this != internal_default_instance() && _impl_.u_ != nullptr;
}
inline bool Navigation_AngularVelocity::has_u() const {
  return _internal_has_u();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::_internal_u() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.u_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::u() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularVelocity.u)
  return _internal_u();
}
inline void Navigation_AngularVelocity::unsafe_arena_set_allocated_u(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* u) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.u_);
  }
  _impl_.u_ = u;
  if (u) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularVelocity.u)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::release_u() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.u_;
  _impl_.u_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::unsafe_arena_release_u() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularVelocity.u)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.u_;
  _impl_.u_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::_internal_mutable_u() {
  
  if (_impl_.u_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.u_ = p;
  }
  return _impl_.u_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::mutable_u() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_u();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularVelocity.u)
  return _msg;
}
inline void Navigation_AngularVelocity::set_allocated_u(::PROTOBUF_NAMESPACE_ID::DoubleValue* u) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.u_);
  }
  if (u) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(u));
    if (message_arena != submessage_arena) {
      u = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.u_ = u;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularVelocity.u)
}

// .google.protobuf.DoubleValue x = 5;
inline bool Navigation_AngularVelocity::_internal_has_x() const {
  return this != internal_default_instance() && _impl_.x_ != nullptr;
}
inline bool Navigation_AngularVelocity::has_x() const {
  return _internal_has_x();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::_internal_x() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::x() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularVelocity.x)
  return _internal_x();
}
inline void Navigation_AngularVelocity::unsafe_arena_set_allocated_x(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularVelocity.x)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::release_x() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularVelocity.x)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::_internal_mutable_x() {
  
  if (_impl_.x_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.x_ = p;
  }
  return _impl_.x_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::mutable_x() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularVelocity.x)
  return _msg;
}
inline void Navigation_AngularVelocity::set_allocated_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x));
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.x_ = x;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularVelocity.x)
}

// .google.protobuf.DoubleValue y = 6;
inline bool Navigation_AngularVelocity::_internal_has_y() const {
  return this != internal_default_instance() && _impl_.y_ != nullptr;
}
inline bool Navigation_AngularVelocity::has_y() const {
  return _internal_has_y();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::_internal_y() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::y() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularVelocity.y)
  return _internal_y();
}
inline void Navigation_AngularVelocity::unsafe_arena_set_allocated_y(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularVelocity.y)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::release_y() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularVelocity.y)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::_internal_mutable_y() {
  
  if (_impl_.y_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.y_ = p;
  }
  return _impl_.y_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::mutable_y() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularVelocity.y)
  return _msg;
}
inline void Navigation_AngularVelocity::set_allocated_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y));
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.y_ = y;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularVelocity.y)
}

// .google.protobuf.DoubleValue z = 7;
inline bool Navigation_AngularVelocity::_internal_has_z() const {
  return this != internal_default_instance() && _impl_.z_ != nullptr;
}
inline bool Navigation_AngularVelocity::has_z() const {
  return _internal_has_z();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::_internal_z() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.z_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularVelocity::z() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularVelocity.z)
  return _internal_z();
}
inline void Navigation_AngularVelocity::unsafe_arena_set_allocated_z(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  _impl_.z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularVelocity.z)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::release_z() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularVelocity.z)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::_internal_mutable_z() {
  
  if (_impl_.z_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.z_ = p;
  }
  return _impl_.z_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularVelocity::mutable_z() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularVelocity.z)
  return _msg;
}
inline void Navigation_AngularVelocity::set_allocated_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z));
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.z_ = z;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularVelocity.z)
}

// -------------------------------------------------------------------

// Navigation_Acceleration

// .autonomous_proto.MessageInfo header = 1;
inline bool Navigation_Acceleration::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Navigation_Acceleration::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& Navigation_Acceleration::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& Navigation_Acceleration::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Acceleration.header)
  return _internal_header();
}
inline void Navigation_Acceleration::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Acceleration.header)
}
inline ::autonomous_proto::MessageInfo* Navigation_Acceleration::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_Acceleration::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Acceleration.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_Acceleration::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* Navigation_Acceleration::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Acceleration.header)
  return _msg;
}
inline void Navigation_Acceleration::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Acceleration.header)
}

// .google.protobuf.DoubleValue e = 2;
inline bool Navigation_Acceleration::_internal_has_e() const {
  return this != internal_default_instance() && _impl_.e_ != nullptr;
}
inline bool Navigation_Acceleration::has_e() const {
  return _internal_has_e();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::_internal_e() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.e_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::e() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Acceleration.e)
  return _internal_e();
}
inline void Navigation_Acceleration::unsafe_arena_set_allocated_e(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* e) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.e_);
  }
  _impl_.e_ = e;
  if (e) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Acceleration.e)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::release_e() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.e_;
  _impl_.e_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::unsafe_arena_release_e() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Acceleration.e)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.e_;
  _impl_.e_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::_internal_mutable_e() {
  
  if (_impl_.e_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.e_ = p;
  }
  return _impl_.e_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::mutable_e() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Acceleration.e)
  return _msg;
}
inline void Navigation_Acceleration::set_allocated_e(::PROTOBUF_NAMESPACE_ID::DoubleValue* e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.e_);
  }
  if (e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e));
    if (message_arena != submessage_arena) {
      e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.e_ = e;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Acceleration.e)
}

// .google.protobuf.DoubleValue n = 3;
inline bool Navigation_Acceleration::_internal_has_n() const {
  return this != internal_default_instance() && _impl_.n_ != nullptr;
}
inline bool Navigation_Acceleration::has_n() const {
  return _internal_has_n();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::_internal_n() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.n_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::n() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Acceleration.n)
  return _internal_n();
}
inline void Navigation_Acceleration::unsafe_arena_set_allocated_n(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* n) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.n_);
  }
  _impl_.n_ = n;
  if (n) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Acceleration.n)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::release_n() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.n_;
  _impl_.n_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::unsafe_arena_release_n() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Acceleration.n)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.n_;
  _impl_.n_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::_internal_mutable_n() {
  
  if (_impl_.n_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.n_ = p;
  }
  return _impl_.n_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::mutable_n() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_n();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Acceleration.n)
  return _msg;
}
inline void Navigation_Acceleration::set_allocated_n(::PROTOBUF_NAMESPACE_ID::DoubleValue* n) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.n_);
  }
  if (n) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(n));
    if (message_arena != submessage_arena) {
      n = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, n, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.n_ = n;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Acceleration.n)
}

// .google.protobuf.DoubleValue u = 4;
inline bool Navigation_Acceleration::_internal_has_u() const {
  return this != internal_default_instance() && _impl_.u_ != nullptr;
}
inline bool Navigation_Acceleration::has_u() const {
  return _internal_has_u();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::_internal_u() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.u_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::u() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Acceleration.u)
  return _internal_u();
}
inline void Navigation_Acceleration::unsafe_arena_set_allocated_u(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* u) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.u_);
  }
  _impl_.u_ = u;
  if (u) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Acceleration.u)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::release_u() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.u_;
  _impl_.u_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::unsafe_arena_release_u() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Acceleration.u)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.u_;
  _impl_.u_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::_internal_mutable_u() {
  
  if (_impl_.u_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.u_ = p;
  }
  return _impl_.u_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::mutable_u() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_u();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Acceleration.u)
  return _msg;
}
inline void Navigation_Acceleration::set_allocated_u(::PROTOBUF_NAMESPACE_ID::DoubleValue* u) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.u_);
  }
  if (u) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(u));
    if (message_arena != submessage_arena) {
      u = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.u_ = u;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Acceleration.u)
}

// .google.protobuf.DoubleValue x = 5;
inline bool Navigation_Acceleration::_internal_has_x() const {
  return this != internal_default_instance() && _impl_.x_ != nullptr;
}
inline bool Navigation_Acceleration::has_x() const {
  return _internal_has_x();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::_internal_x() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::x() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Acceleration.x)
  return _internal_x();
}
inline void Navigation_Acceleration::unsafe_arena_set_allocated_x(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Acceleration.x)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::release_x() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Acceleration.x)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::_internal_mutable_x() {
  
  if (_impl_.x_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.x_ = p;
  }
  return _impl_.x_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::mutable_x() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Acceleration.x)
  return _msg;
}
inline void Navigation_Acceleration::set_allocated_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x));
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.x_ = x;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Acceleration.x)
}

// .google.protobuf.DoubleValue y = 6;
inline bool Navigation_Acceleration::_internal_has_y() const {
  return this != internal_default_instance() && _impl_.y_ != nullptr;
}
inline bool Navigation_Acceleration::has_y() const {
  return _internal_has_y();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::_internal_y() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::y() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Acceleration.y)
  return _internal_y();
}
inline void Navigation_Acceleration::unsafe_arena_set_allocated_y(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Acceleration.y)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::release_y() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Acceleration.y)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::_internal_mutable_y() {
  
  if (_impl_.y_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.y_ = p;
  }
  return _impl_.y_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::mutable_y() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Acceleration.y)
  return _msg;
}
inline void Navigation_Acceleration::set_allocated_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y));
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.y_ = y;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Acceleration.y)
}

// .google.protobuf.DoubleValue z = 7;
inline bool Navigation_Acceleration::_internal_has_z() const {
  return this != internal_default_instance() && _impl_.z_ != nullptr;
}
inline bool Navigation_Acceleration::has_z() const {
  return _internal_has_z();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::_internal_z() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.z_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_Acceleration::z() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.Acceleration.z)
  return _internal_z();
}
inline void Navigation_Acceleration::unsafe_arena_set_allocated_z(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  _impl_.z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.Acceleration.z)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::release_z() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.Acceleration.z)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::_internal_mutable_z() {
  
  if (_impl_.z_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.z_ = p;
  }
  return _impl_.z_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_Acceleration::mutable_z() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.Acceleration.z)
  return _msg;
}
inline void Navigation_Acceleration::set_allocated_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z));
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.z_ = z;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.Acceleration.z)
}

// -------------------------------------------------------------------

// Navigation_AngularAcceleration

// .autonomous_proto.MessageInfo header = 1;
inline bool Navigation_AngularAcceleration::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Navigation_AngularAcceleration::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& Navigation_AngularAcceleration::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& Navigation_AngularAcceleration::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularAcceleration.header)
  return _internal_header();
}
inline void Navigation_AngularAcceleration::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularAcceleration.header)
}
inline ::autonomous_proto::MessageInfo* Navigation_AngularAcceleration::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_AngularAcceleration::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularAcceleration.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation_AngularAcceleration::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* Navigation_AngularAcceleration::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularAcceleration.header)
  return _msg;
}
inline void Navigation_AngularAcceleration::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularAcceleration.header)
}

// .google.protobuf.DoubleValue e = 2;
inline bool Navigation_AngularAcceleration::_internal_has_e() const {
  return this != internal_default_instance() && _impl_.e_ != nullptr;
}
inline bool Navigation_AngularAcceleration::has_e() const {
  return _internal_has_e();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::_internal_e() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.e_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::e() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularAcceleration.e)
  return _internal_e();
}
inline void Navigation_AngularAcceleration::unsafe_arena_set_allocated_e(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* e) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.e_);
  }
  _impl_.e_ = e;
  if (e) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularAcceleration.e)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::release_e() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.e_;
  _impl_.e_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::unsafe_arena_release_e() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularAcceleration.e)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.e_;
  _impl_.e_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::_internal_mutable_e() {
  
  if (_impl_.e_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.e_ = p;
  }
  return _impl_.e_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::mutable_e() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularAcceleration.e)
  return _msg;
}
inline void Navigation_AngularAcceleration::set_allocated_e(::PROTOBUF_NAMESPACE_ID::DoubleValue* e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.e_);
  }
  if (e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e));
    if (message_arena != submessage_arena) {
      e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.e_ = e;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularAcceleration.e)
}

// .google.protobuf.DoubleValue n = 3;
inline bool Navigation_AngularAcceleration::_internal_has_n() const {
  return this != internal_default_instance() && _impl_.n_ != nullptr;
}
inline bool Navigation_AngularAcceleration::has_n() const {
  return _internal_has_n();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::_internal_n() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.n_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::n() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularAcceleration.n)
  return _internal_n();
}
inline void Navigation_AngularAcceleration::unsafe_arena_set_allocated_n(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* n) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.n_);
  }
  _impl_.n_ = n;
  if (n) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularAcceleration.n)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::release_n() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.n_;
  _impl_.n_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::unsafe_arena_release_n() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularAcceleration.n)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.n_;
  _impl_.n_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::_internal_mutable_n() {
  
  if (_impl_.n_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.n_ = p;
  }
  return _impl_.n_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::mutable_n() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_n();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularAcceleration.n)
  return _msg;
}
inline void Navigation_AngularAcceleration::set_allocated_n(::PROTOBUF_NAMESPACE_ID::DoubleValue* n) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.n_);
  }
  if (n) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(n));
    if (message_arena != submessage_arena) {
      n = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, n, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.n_ = n;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularAcceleration.n)
}

// .google.protobuf.DoubleValue u = 4;
inline bool Navigation_AngularAcceleration::_internal_has_u() const {
  return this != internal_default_instance() && _impl_.u_ != nullptr;
}
inline bool Navigation_AngularAcceleration::has_u() const {
  return _internal_has_u();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::_internal_u() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.u_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::u() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularAcceleration.u)
  return _internal_u();
}
inline void Navigation_AngularAcceleration::unsafe_arena_set_allocated_u(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* u) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.u_);
  }
  _impl_.u_ = u;
  if (u) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularAcceleration.u)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::release_u() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.u_;
  _impl_.u_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::unsafe_arena_release_u() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularAcceleration.u)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.u_;
  _impl_.u_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::_internal_mutable_u() {
  
  if (_impl_.u_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.u_ = p;
  }
  return _impl_.u_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::mutable_u() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_u();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularAcceleration.u)
  return _msg;
}
inline void Navigation_AngularAcceleration::set_allocated_u(::PROTOBUF_NAMESPACE_ID::DoubleValue* u) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.u_);
  }
  if (u) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(u));
    if (message_arena != submessage_arena) {
      u = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.u_ = u;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularAcceleration.u)
}

// .google.protobuf.DoubleValue x = 5;
inline bool Navigation_AngularAcceleration::_internal_has_x() const {
  return this != internal_default_instance() && _impl_.x_ != nullptr;
}
inline bool Navigation_AngularAcceleration::has_x() const {
  return _internal_has_x();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::_internal_x() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::x() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularAcceleration.x)
  return _internal_x();
}
inline void Navigation_AngularAcceleration::unsafe_arena_set_allocated_x(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularAcceleration.x)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::release_x() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularAcceleration.x)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::_internal_mutable_x() {
  
  if (_impl_.x_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.x_ = p;
  }
  return _impl_.x_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::mutable_x() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularAcceleration.x)
  return _msg;
}
inline void Navigation_AngularAcceleration::set_allocated_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x));
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.x_ = x;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularAcceleration.x)
}

// .google.protobuf.DoubleValue y = 6;
inline bool Navigation_AngularAcceleration::_internal_has_y() const {
  return this != internal_default_instance() && _impl_.y_ != nullptr;
}
inline bool Navigation_AngularAcceleration::has_y() const {
  return _internal_has_y();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::_internal_y() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::y() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularAcceleration.y)
  return _internal_y();
}
inline void Navigation_AngularAcceleration::unsafe_arena_set_allocated_y(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularAcceleration.y)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::release_y() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularAcceleration.y)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::_internal_mutable_y() {
  
  if (_impl_.y_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.y_ = p;
  }
  return _impl_.y_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::mutable_y() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularAcceleration.y)
  return _msg;
}
inline void Navigation_AngularAcceleration::set_allocated_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y));
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.y_ = y;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularAcceleration.y)
}

// .google.protobuf.DoubleValue z = 7;
inline bool Navigation_AngularAcceleration::_internal_has_z() const {
  return this != internal_default_instance() && _impl_.z_ != nullptr;
}
inline bool Navigation_AngularAcceleration::has_z() const {
  return _internal_has_z();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::_internal_z() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.z_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Navigation_AngularAcceleration::z() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.AngularAcceleration.z)
  return _internal_z();
}
inline void Navigation_AngularAcceleration::unsafe_arena_set_allocated_z(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  _impl_.z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.AngularAcceleration.z)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::release_z() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.AngularAcceleration.z)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::_internal_mutable_z() {
  
  if (_impl_.z_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.z_ = p;
  }
  return _impl_.z_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Navigation_AngularAcceleration::mutable_z() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.AngularAcceleration.z)
  return _msg;
}
inline void Navigation_AngularAcceleration::set_allocated_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z));
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.z_ = z;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.AngularAcceleration.z)
}

// -------------------------------------------------------------------

// Navigation

// .autonomous_proto.MessageInfo header = 1;
inline bool Navigation::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Navigation::has_header() const {
  return _internal_has_header();
}
inline const ::autonomous_proto::MessageInfo& Navigation::_internal_header() const {
  const ::autonomous_proto::MessageInfo* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::MessageInfo&>(
      ::autonomous_proto::_MessageInfo_default_instance_);
}
inline const ::autonomous_proto::MessageInfo& Navigation::header() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.header)
  return _internal_header();
}
inline void Navigation::unsafe_arena_set_allocated_header(
    ::autonomous_proto::MessageInfo* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.header)
}
inline ::autonomous_proto::MessageInfo* Navigation::release_header() {
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.header)
  
  ::autonomous_proto::MessageInfo* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::autonomous_proto::MessageInfo* Navigation::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::MessageInfo>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::autonomous_proto::MessageInfo* Navigation::mutable_header() {
  ::autonomous_proto::MessageInfo* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.header)
  return _msg;
}
inline void Navigation::set_allocated_header(::autonomous_proto::MessageInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.header)
}

// .autonomous_proto.Navigation.Position position = 2;
inline bool Navigation::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Navigation::has_position() const {
  return _internal_has_position();
}
inline void Navigation::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::autonomous_proto::Navigation_Position& Navigation::_internal_position() const {
  const ::autonomous_proto::Navigation_Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::Navigation_Position&>(
      ::autonomous_proto::_Navigation_Position_default_instance_);
}
inline const ::autonomous_proto::Navigation_Position& Navigation::position() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.position)
  return _internal_position();
}
inline void Navigation::unsafe_arena_set_allocated_position(
    ::autonomous_proto::Navigation_Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.position)
}
inline ::autonomous_proto::Navigation_Position* Navigation::release_position() {
  
  ::autonomous_proto::Navigation_Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::Navigation_Position* Navigation::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.position)
  
  ::autonomous_proto::Navigation_Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::autonomous_proto::Navigation_Position* Navigation::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::Navigation_Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::autonomous_proto::Navigation_Position* Navigation::mutable_position() {
  ::autonomous_proto::Navigation_Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.position)
  return _msg;
}
inline void Navigation::set_allocated_position(::autonomous_proto::Navigation_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.position)
}

// .autonomous_proto.Navigation.Orientation orientation = 3;
inline bool Navigation::_internal_has_orientation() const {
  return this != internal_default_instance() && _impl_.orientation_ != nullptr;
}
inline bool Navigation::has_orientation() const {
  return _internal_has_orientation();
}
inline void Navigation::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && _impl_.orientation_ != nullptr) {
    delete _impl_.orientation_;
  }
  _impl_.orientation_ = nullptr;
}
inline const ::autonomous_proto::Navigation_Orientation& Navigation::_internal_orientation() const {
  const ::autonomous_proto::Navigation_Orientation* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::Navigation_Orientation&>(
      ::autonomous_proto::_Navigation_Orientation_default_instance_);
}
inline const ::autonomous_proto::Navigation_Orientation& Navigation::orientation() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.orientation)
  return _internal_orientation();
}
inline void Navigation::unsafe_arena_set_allocated_orientation(
    ::autonomous_proto::Navigation_Orientation* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.orientation)
}
inline ::autonomous_proto::Navigation_Orientation* Navigation::release_orientation() {
  
  ::autonomous_proto::Navigation_Orientation* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::Navigation_Orientation* Navigation::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.orientation)
  
  ::autonomous_proto::Navigation_Orientation* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::autonomous_proto::Navigation_Orientation* Navigation::_internal_mutable_orientation() {
  
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::Navigation_Orientation>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::autonomous_proto::Navigation_Orientation* Navigation::mutable_orientation() {
  ::autonomous_proto::Navigation_Orientation* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.orientation)
  return _msg;
}
inline void Navigation::set_allocated_orientation(::autonomous_proto::Navigation_Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.orientation)
}

// .autonomous_proto.Navigation.Velocity velocity = 4;
inline bool Navigation::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool Navigation::has_velocity() const {
  return _internal_has_velocity();
}
inline void Navigation::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
inline const ::autonomous_proto::Navigation_Velocity& Navigation::_internal_velocity() const {
  const ::autonomous_proto::Navigation_Velocity* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::Navigation_Velocity&>(
      ::autonomous_proto::_Navigation_Velocity_default_instance_);
}
inline const ::autonomous_proto::Navigation_Velocity& Navigation::velocity() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.velocity)
  return _internal_velocity();
}
inline void Navigation::unsafe_arena_set_allocated_velocity(
    ::autonomous_proto::Navigation_Velocity* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.velocity)
}
inline ::autonomous_proto::Navigation_Velocity* Navigation::release_velocity() {
  
  ::autonomous_proto::Navigation_Velocity* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::Navigation_Velocity* Navigation::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.velocity)
  
  ::autonomous_proto::Navigation_Velocity* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::autonomous_proto::Navigation_Velocity* Navigation::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::Navigation_Velocity>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::autonomous_proto::Navigation_Velocity* Navigation::mutable_velocity() {
  ::autonomous_proto::Navigation_Velocity* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.velocity)
  return _msg;
}
inline void Navigation::set_allocated_velocity(::autonomous_proto::Navigation_Velocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.velocity)
}

// .autonomous_proto.Navigation.AngularVelocity angular_velocity = 5;
inline bool Navigation::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && _impl_.angular_velocity_ != nullptr;
}
inline bool Navigation::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void Navigation::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
}
inline const ::autonomous_proto::Navigation_AngularVelocity& Navigation::_internal_angular_velocity() const {
  const ::autonomous_proto::Navigation_AngularVelocity* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::Navigation_AngularVelocity&>(
      ::autonomous_proto::_Navigation_AngularVelocity_default_instance_);
}
inline const ::autonomous_proto::Navigation_AngularVelocity& Navigation::angular_velocity() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.angular_velocity)
  return _internal_angular_velocity();
}
inline void Navigation::unsafe_arena_set_allocated_angular_velocity(
    ::autonomous_proto::Navigation_AngularVelocity* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.angular_velocity)
}
inline ::autonomous_proto::Navigation_AngularVelocity* Navigation::release_angular_velocity() {
  
  ::autonomous_proto::Navigation_AngularVelocity* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::Navigation_AngularVelocity* Navigation::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.angular_velocity)
  
  ::autonomous_proto::Navigation_AngularVelocity* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::autonomous_proto::Navigation_AngularVelocity* Navigation::_internal_mutable_angular_velocity() {
  
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::Navigation_AngularVelocity>(GetArenaForAllocation());
    _impl_.angular_velocity_ = p;
  }
  return _impl_.angular_velocity_;
}
inline ::autonomous_proto::Navigation_AngularVelocity* Navigation::mutable_angular_velocity() {
  ::autonomous_proto::Navigation_AngularVelocity* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.angular_velocity)
  return _msg;
}
inline void Navigation::set_allocated_angular_velocity(::autonomous_proto::Navigation_AngularVelocity* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_velocity);
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.angular_velocity)
}

// .autonomous_proto.Navigation.Acceleration acceleration = 6;
inline bool Navigation::_internal_has_acceleration() const {
  return this != internal_default_instance() && _impl_.acceleration_ != nullptr;
}
inline bool Navigation::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void Navigation::clear_acceleration() {
  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
}
inline const ::autonomous_proto::Navigation_Acceleration& Navigation::_internal_acceleration() const {
  const ::autonomous_proto::Navigation_Acceleration* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::Navigation_Acceleration&>(
      ::autonomous_proto::_Navigation_Acceleration_default_instance_);
}
inline const ::autonomous_proto::Navigation_Acceleration& Navigation::acceleration() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.acceleration)
  return _internal_acceleration();
}
inline void Navigation::unsafe_arena_set_allocated_acceleration(
    ::autonomous_proto::Navigation_Acceleration* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.acceleration)
}
inline ::autonomous_proto::Navigation_Acceleration* Navigation::release_acceleration() {
  
  ::autonomous_proto::Navigation_Acceleration* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::Navigation_Acceleration* Navigation::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.acceleration)
  
  ::autonomous_proto::Navigation_Acceleration* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::autonomous_proto::Navigation_Acceleration* Navigation::_internal_mutable_acceleration() {
  
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::Navigation_Acceleration>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::autonomous_proto::Navigation_Acceleration* Navigation::mutable_acceleration() {
  ::autonomous_proto::Navigation_Acceleration* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.acceleration)
  return _msg;
}
inline void Navigation::set_allocated_acceleration(::autonomous_proto::Navigation_Acceleration* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acceleration);
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.acceleration)
}

// .autonomous_proto.Navigation.AngularAcceleration angular_acceleration = 7;
inline bool Navigation::_internal_has_angular_acceleration() const {
  return this != internal_default_instance() && _impl_.angular_acceleration_ != nullptr;
}
inline bool Navigation::has_angular_acceleration() const {
  return _internal_has_angular_acceleration();
}
inline void Navigation::clear_angular_acceleration() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_acceleration_ != nullptr) {
    delete _impl_.angular_acceleration_;
  }
  _impl_.angular_acceleration_ = nullptr;
}
inline const ::autonomous_proto::Navigation_AngularAcceleration& Navigation::_internal_angular_acceleration() const {
  const ::autonomous_proto::Navigation_AngularAcceleration* p = _impl_.angular_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::autonomous_proto::Navigation_AngularAcceleration&>(
      ::autonomous_proto::_Navigation_AngularAcceleration_default_instance_);
}
inline const ::autonomous_proto::Navigation_AngularAcceleration& Navigation::angular_acceleration() const {
  // @@protoc_insertion_point(field_get:autonomous_proto.Navigation.angular_acceleration)
  return _internal_angular_acceleration();
}
inline void Navigation::unsafe_arena_set_allocated_angular_acceleration(
    ::autonomous_proto::Navigation_AngularAcceleration* angular_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_acceleration_);
  }
  _impl_.angular_acceleration_ = angular_acceleration;
  if (angular_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autonomous_proto.Navigation.angular_acceleration)
}
inline ::autonomous_proto::Navigation_AngularAcceleration* Navigation::release_angular_acceleration() {
  
  ::autonomous_proto::Navigation_AngularAcceleration* temp = _impl_.angular_acceleration_;
  _impl_.angular_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autonomous_proto::Navigation_AngularAcceleration* Navigation::unsafe_arena_release_angular_acceleration() {
  // @@protoc_insertion_point(field_release:autonomous_proto.Navigation.angular_acceleration)
  
  ::autonomous_proto::Navigation_AngularAcceleration* temp = _impl_.angular_acceleration_;
  _impl_.angular_acceleration_ = nullptr;
  return temp;
}
inline ::autonomous_proto::Navigation_AngularAcceleration* Navigation::_internal_mutable_angular_acceleration() {
  
  if (_impl_.angular_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::autonomous_proto::Navigation_AngularAcceleration>(GetArenaForAllocation());
    _impl_.angular_acceleration_ = p;
  }
  return _impl_.angular_acceleration_;
}
inline ::autonomous_proto::Navigation_AngularAcceleration* Navigation::mutable_angular_acceleration() {
  ::autonomous_proto::Navigation_AngularAcceleration* _msg = _internal_mutable_angular_acceleration();
  // @@protoc_insertion_point(field_mutable:autonomous_proto.Navigation.angular_acceleration)
  return _msg;
}
inline void Navigation::set_allocated_angular_acceleration(::autonomous_proto::Navigation_AngularAcceleration* angular_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.angular_acceleration_;
  }
  if (angular_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_acceleration);
    if (message_arena != submessage_arena) {
      angular_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angular_acceleration_ = angular_acceleration;
  // @@protoc_insertion_point(field_set_allocated:autonomous_proto.Navigation.angular_acceleration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autonomous_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_navigation_2eproto
